<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UDNZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.udnz.com/"/>
  <updated>2018-10-27T15:08:18.000Z</updated>
  <id>https://www.udnz.com/</id>
  
  <author>
    <name>Austin Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 语言实践：编写可维护的程序的建议【译】</title>
    <link href="https://www.udnz.com/2018/10/27/Go-%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5%EF%BC%9A%E7%BC%96%E5%86%99%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BB%BA%E8%AE%AE%E3%80%90%E8%AF%91%E3%80%91/"/>
    <id>https://www.udnz.com/2018/10/27/Go-语言实践：编写可维护的程序的建议【译】/</id>
    <published>2018-10-27T15:08:18.000Z</published>
    <updated>2018-10-27T15:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>译者注</strong></p><p>本文为 <strong>QCon 2018 上海站</strong>主题演讲嘉宾、Heptio 资深工程师、著名Go语言专家 <a href="https://2018.qconshanghai.com/speaker/2503" target="_blank" rel="noopener">David Cheney</a> 关于 Go 语言实践的英文分享。为方便大家阅读，在此由 <a href="https://www.udnz.com">Austin Luo</a> 翻译为中文。翻译水平有限，如有偏颇之处，烦请联系我更正之。</p><p>转载请注明出处，保留本节译者注。</p><hr><p><strong>引言</strong></p><p>接下来这两场我将给大家一些编写 Go 代码的最佳实践。</p><p>今天这是一个研讨会风格的演讲，我会摒弃那些绚丽的 PPT，而是直接使用你们可以直接带走的文档。</p><blockquote><p>TIP: 你可以在这里找到这个演讲最新的在线版本：<br><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a></p></blockquote><h1 id="指导原则"><a href="#指导原则" class="headerlink" title="指导原则"></a>指导原则</h1><p>我们要谈论在一个编程语言中的最佳实践，那么我们首先应该明确什么是“最佳”。如果你们听了我昨天那场讲演的话，你一定看到了来自 Go 团队的 Russ Cox 讲的一句话：</p><blockquote><p>软件工程，是当你在编程时增加了工期和其他编程人员之后发生的事。 — Russ Cox</p></blockquote><p>Russ 是在阐述软件“编程”和软件“工程”之间的区别，前者是你写的程序，而后者是一个让更多的人长期使用的产品。软件工程师会来来去去地更换，团队也会成长或者萎缩，需求也会发生变化，新的特性也会增加，bug 也会被修复，这就是软件“工程”的本质。</p><p>我可能是现场最早的 Go 语言用户，但与其说我的主张来自我的资历，不如说我今天讲的是真实来自于 Go 语言本身的指导原则，那就是：</p><ol><li>简单性</li><li>可读性</li><li>生产率</li></ol><blockquote><p>你可能已经注意到，我并没有提<strong>性能</strong>或者<strong>并发性</strong>。实际上有不少的语言执行效率比 Go 还要高，但它们一定没有 Go 这么简单。有些语言也以<strong>并发性</strong>为最高目标，但它们的可读性和生产率都不好。</p></blockquote><blockquote><p><strong>性能</strong>和<strong>并发性</strong>都很重要，但它们不如<strong>简单性</strong>、<strong>可读性</strong>和<strong>生产率</strong>那么重要。</p></blockquote><a id="more"></a><h2 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h2><p>为什么我们要力求简单，为什么简单对 Go 语言编程如此重要？</p><p>我们有太多的时候感叹“这段代码我看不懂”，是吧？我们害怕修改一丁点代码，生怕这一点修改就导致其他你不懂的部分出问题，而你又没办法修复它。</p><p>这就是复杂性。复杂性把可读的程序变得不可读，复杂性终结了很多软件项目。</p><p>简单性是 Go 的最高目标。无论我们写什么程序，我们都应该能一致认为它应当简单。</p><h2 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h2><blockquote><p>可读性对于可维护性至关重要。 — Mark Reinhold, JVM language summit 2018</p></blockquote><p>为什么 Go 代码的可读性如此重要？为什么我们应该力求可读性？</p><blockquote><p>程序应该是写来被人阅读的，而只是顺带可以被机器执行。<br>— Hal Abelson and Gerald Sussman, Structure and Interpretation of Computer Programs</p></blockquote><p>可阅读性对所有的程序——不仅仅是 Go 程序，都是如此之重要，是因为程序是人写的，并且给其他人阅读的，其次才是被机器所执行。</p><p>代码被阅读的次数，远远大于被编写的次数。一段小的代码，在它的整个生命周期，可能被阅读成百上千次。</p><blockquote><p>程序员最重要的技能是有效沟通想法的能力。 — Gastón Jorquera <a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">^1</a></p></blockquote><p>可读性是弄清楚一个程序是在做什么事的关键。如果你都不知道这个程序在做什么，你如何去维护这个程序？如果一个软件不可用被维护，那就可能被重写，并且这也可能是你公司最后一次在 GO 上面投入了。</p><p>如果你仅仅是为自己个人写一个程序，可能这个程序是一次性的，或者使用这个程序的人也只有你一个，那你想怎样写就怎样写。但如果是多人合作贡献的程序，或者因为它解决人们的需求、满足某些特性、运行它的环境会变化，而在一个很长的时间内被很多人使用，那么程序的<strong>可维护性</strong>则必须成为目标。</p><p>编写可维护的程序的第一步，那就是确保代码是可读的。</p><h2 id="生产率"><a href="#生产率" class="headerlink" title="生产率"></a>生产率</h2><blockquote><p>设计是一门艺术，要求编写的代码当前可用，并且以后仍能被改动。— Sandi Metz</p></blockquote><p>我想重点阐述的最后一个基本原则是<strong>生产率</strong>。开发者的生产率是一个复杂的话题，但归结起来就是：为了有效的工作，你因为一些工具、外部代码库而浪费了多少时间。Go 程序员应该感受得到，他们在工作中可以从很多东西中受益了。（Austin Luo：言下之意是，Go 的工具集和基础库完备，很多东西触手可得。）</p><p>有一个笑话是说，Go 是在 C++ 程序编译过程中被设计出来的。快速的编译是 Go 语言用以吸引新开发者的关键特性。编译速度仍然是一个不变的战场，很公平地说，其他语言需要几分钟才能编译，而 Go 只需要几秒即可完成。这有助于 Go 开发者有动态语言开发者一样的高效，但又没有那些动态语言本身的可靠性问题。</p><p>Go 开发者意识到代码是写来被阅读的，并且把<strong>阅读</strong>放在<strong>编写</strong>之上。Go 致力于从工具集、习惯等方面强制要求代码必须编写为一种特定样式，这消除了学习项目特定术语的障碍，同时也可以仅仅从“看起来”不正确即可帮助开发者发现潜在的错误。</p><p>Go 开发者不会整日去调试那些莫名其妙的编译错误。他们也不会整日浪费时间在复杂的构建脚本或将代码部署到生产中这事上。更重要的是他们不会花时间在尝试搞懂同事们写的代码是什么意思这事上。</p><p>当 Go 语言团队在谈论一个语言必须扩展时，他们谈论的就是生产率。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>我们要讨论的第一个议题是标识符。标识符是一个名称的描述词，这个名称可以是一个变量的名称、一个函数的名称、一个方法的名称、一个类型的名称或者一个包的名称等等。</p><blockquote><p>拙劣的名称是拙劣的设计的表征。— Dave Cheney</p></blockquote><p>鉴于 Go 的语法限制，我们为程序中的事物选择的名称对我们程序的可读性产生了过大的影响。良好的可读性是评判代码质量的关键，因此选择好名称对于 Go 代码的可读性至关重要。</p><h2 id="选择清晰的名称，而不是简洁的名称"><a href="#选择清晰的名称，而不是简洁的名称" class="headerlink" title="选择清晰的名称，而不是简洁的名称"></a>选择清晰的名称，而不是简洁的名称</h2><blockquote><p>代码要明确这很重要，你在一行中能做的事，应该拆到三行里做。— Ukiah Smith</p></blockquote><p>Go 不是专注于将代码精巧优化为一行的那种语言，Go 也不是致力于将代码精炼到最小行数的语言。我们并不追求源码在磁盘上占用的空间更少，也不关心录入代码需要多长时间。</p><blockquote><p>好的名称就如同一个好的笑话，如果你需要去解释它，那它就不搞笑了。— Dave Cheney</p></blockquote><p>这个清晰度的关键就是我们为 Go 程序选择的标识符。让我们来看看一个好的名称应当具备什么吧：</p><ul><li><strong>好的名称是简洁的。</strong>一个好的名称未必是尽可能短的，但它肯定不会浪费任何无关的东西在上面，好名字具有高信噪比。</li><li><strong>好的名称是描述性的。</strong>一个好的名称应该描述一个变量或常量的使用，而非其内容。一个好的明明应该描述函数的结果或一个方法的行为，而不是这个函数或方法本身的操作。一个好的名称应该描述一个包的目的，而不是包的内容。名称描述的东西越准确，名称越好。</li><li><strong>好的名称是可预测的。</strong>您应该能够从名称中推断出它的使用方式，这是选择描述性名称带来的作用，同时也遵循了传统。Go 开发者在谈论<em>惯用语</em>时，即是说的这个。</li></ul><p>接下来让我们深入地讨论一下。</p><h2 id="标识符长度"><a href="#标识符长度" class="headerlink" title="标识符长度"></a>标识符长度</h2><p>有时候人们批评 Go 风格推荐短变量名。正如 Rob Pike 所说，“Go 开发者想要的是合适长度的标识符”。<a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">^1</a></p><p>Andrew Gerrand 建议通过使用更长的标识符向读者暗示它们具有更高的重要性。</p><blockquote><p>标识符的声明和使用间隔越远，名称的长度就应当越长。 Andrew Gerrand <a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">^2</a></p></blockquote><p>据此，我们可以归纳一些指导意见：</p><ul><li>短变量名称在声明和上次使用之间的距离很短时效果很好。</li><li>长变量名证明其不同的合理性：越长的变量名，越需要更多的理由来证明其合理。冗长的官僚主义名称与他们在页面上的权重相比，携带的信息很低。</li><li>不要在变量名中包含变量类型的名称。</li><li>常量需要描述其存储的值的含义，而不是怎么使用它。</li><li>单字母变量可用于循环或逻辑分支，单词变量可用于参数或返回值，多词短语可用于函数和包这一级的声明。</li><li>单词可用于方法、接口和包</li><li>请记住，包的命名将成为用户引用它时采用的名称，确保这个名称更有意义。</li></ul><p>让我们来看一个示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AverageAge returns the average age of people.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AverageAge</span><span class="params">(people []Person)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(people) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count, sum <span class="keyword">int</span></span><br><span class="line">  <span class="keyword">for</span> _, p := <span class="keyword">range</span> people &#123;</span><br><span class="line">    sum += p.Age</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum / count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，范围变量<code>p</code>在定义之后只在接下来的一行使用。<code>p</code>在整页源码和函数执行过程中都只生存一小段时间。对<code>p</code>感兴趣的读者只需要查看两行代码即可。</p><p>与之形成对比的是，变量<code>people</code>在函数参数中定义，并且存在了 7 行，同理的还有<code>sum</code>和<code>count</code>，这他们使用了更长的名称，读者必须关注更广泛的代码行。</p><p>我也可以使用<code>s</code>而不是<code>sum</code>，用<code>c</code>（或<code>n</code>）而不是<code>count</code>，但这会将整个程序中的变量都聚集在相同的重要性上。我也可以使用<code>p</code>而不是<code>people</code>，但是这样又有一个问题，那就是<code>for ... range</code>循环中的变量又用什么？单数的 <code>person</code> 看起来也很奇怪，生存时间极短命名却比导出它的那个值更长。</p><blockquote><p>Austin Luo：这里说的是，若数组<code>people</code>用变量名<code>p</code>，那么从数组中获取的每一个元素取名就成了问题，比如用<code>person</code>，那即使用<code>person</code>看起来也很奇怪，一方面是单数，一方面<code>person</code>的生存周期只有两行（很短），命名比生存周期更长的<code>p</code>（<code>people</code>）还长了。</p></blockquote><blockquote><p>TIP：跟使用空行在文档中分段一样，使用空行将函数执行过程分段。在函数<code>AverageAge</code>中有按顺序的三个操作。第一个是先决条件，检查当<code>people</code>为空时我们不会除零，第二个是累加总和和计数，最后一个是计算平均数。</p></blockquote><h3 id="上下文是关键"><a href="#上下文是关键" class="headerlink" title="上下文是关键"></a>上下文是关键</h3><p>绝大多数的命名建议都是根据上下文的，意识到这一点很重要。我喜欢称之为原则，而不是规则。</p><p><code>i</code>和<code>index</code> 这两个标识符有什么不同？我们很难确切地说其中一个比另一个好，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(s); index++ &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的可读性，基本上都会认为比下面这段要强：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我表示不赞同。因为无论是<code>i</code>还是<code>index</code>，都是限定于<code>for</code>循环体的，更冗长的命名，并没有让我们<em>更容易</em>地理解这段代码。</p><p>话说回来，下面两段代码那一段可读性更强呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SNMP)</span> <span class="title">Fetch</span><span class="params">(oid []<span class="keyword">int</span>, index <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SNMP)</span> <span class="title">Fetch</span><span class="params">(o []<span class="keyword">int</span>, i <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>oid</code>是<code>SNMP</code>对象 ID 的缩写，因此将其略写为 <code>o</code> 意味着开发者必须将他们在文档中看到的常规符号转换理解为代码中更短的符号。同样地，将<code>index</code>简略为<code>i</code>，减少了其作为<code>SNMP</code>消息的索引的含义。</p><blockquote><p>TIP：在参数声明中不要混用长、短不同的命名风格。</p></blockquote><h2 id="命名中不要包含所属类型的名称"><a href="#命名中不要包含所属类型的名称" class="headerlink" title="命名中不要包含所属类型的名称"></a>命名中不要包含所属类型的名称</h2><p>正如你给宠物取名一样，你会给狗取名“汪汪”，给猫取名为“咪咪”，但不会取名为“汪汪狗”、“咪咪猫”。出于同样的原因，你也不应在变量名称中包含其类型的名称。</p><p>变量命名应该体现它的内容，而不是类型。我们来看下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usersMap <span class="keyword">map</span>[<span class="keyword">string</span>]*User</span><br></pre></td></tr></table></figure><p>这样的命名有什么好处呢？我们能知道它是个 map，并且它与<code>*User</code>类型有关，这可能还不错。但是 Go 作为一种静态类型语言，它并不会允许我们在需要标量变量的地方意外地使用到这个变量，因此<code>Map</code>后缀实际上是多余的。</p><p>现在我们来看像下面这样定义变量又是什么情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  companiesMap <span class="keyword">map</span>[<span class="keyword">string</span>]*Company</span><br><span class="line">  productsMap <span class="keyword">map</span>[<span class="keyword">string</span>]*Products</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在这个范围内我们有了三个 map 类型的变量了：<code>usersMap</code>，<code>companiesMap</code>，以及 <code>productsMap</code>，所有这些都从字符串映射到了不同的类型。我们知道它们都是 map，我们也知道它们的 map 声明会阻止我们使用一个代替另一个——如果我们尝试在需要<code>map[string]*User</code>的地方使用<code>companiesMap</code>，编译器将抛出错误。在这种情况下，很明显<code>Map</code>后缀不会提高代码的清晰度，它只是编程时需要键入的冗余内容。（Austin Luo：陈旧的思维方式）</p><p>我的建议是，避免给变量加上与类型相关的任何后缀。</p><blockquote><p>TIP：如果<code>users</code>不能描述得足够清楚，那<code>usersMap</code>也一定不能。</p></blockquote><p>这个建议也适用于函数参数，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteConfig</span><span class="params">(w io.Writer, config *Config)</span></span></span><br></pre></td></tr></table></figure><p>将<code>*Config</code>参数命名为<code>config</code>是多余的，我们知道它是个<code>*Config</code>，函数签名上写得很清楚。</p><p>在这种情况建议考虑<code>conf</code>或者<code>c</code>——如果生命周期足够短的话。</p><p>如果在一个范围内有超过一个<code>*Config</code>，那命名为<code>conf1</code>、<code>conf2</code>的描述性就比<code>original</code>、<code>updated</code>更差，而且后者比前者更不容易出错。</p><blockquote><p>NOTE：不要让包名占用了更适合变量的名称</p></blockquote><blockquote><p>导入的标识符是会包含它所属包的名称的。<br>例如我们很清楚<code>context.Context</code>是包<code>context</code>中的类型<code>Context</code>。这就导致我们在我们自己的包里，再也无法使用<code>context</code>作为变量或类型名了。<br><code>func WriteLog(context context.Context, message string)</code><br>这无法编译。这也是为什么我们通常将<code>context.Context</code>类型的变量命名为<code>ctx</code>的原因，如：<br><code>func WriteLog(ctx context.Context, message string)</code></p></blockquote><h2 id="使用一致的命名风格"><a href="#使用一致的命名风格" class="headerlink" title="使用一致的命名风格"></a>使用一致的命名风格</h2><p>一个好名字的另一个特点是它应该是可预测的。阅读者应该可以在第一次看到的时候就能够理解它如何使用。如果遇到一个约定俗称的名字，他们应该能够认为自从他们上次看到这个名字以来它没有改变意义。</p><p>例如，如果你要传递一个数据库句柄，请确保每次的参数命名都是一样的。与其使用<code>d *sql.DB</code>，<code>dbase *sql.DB</code>，<code>DB *sql.DB</code>和<code>database *sql.DB</code>，还不如都统一为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db *sql.DB</span><br></pre></td></tr></table></figure><p>这样做可以增进熟悉度：如果你看到<code>db</code>，那么你就知道那是个<code>*sql.DB</code>，并且已经在本地定义或者由调用者提供了。</p><p>对于方法接收者也类似，在类型的每个方法中使用相同的接收者名称，这样可以让阅读者在跨方法阅读和理解时更容易主观推断。</p><blockquote><p>Austin Luo：“接收者”是一种特殊类型的参数。<a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">^2</a><br>比如<code>func (b *Buffer) Read(p []byte) (n int, err error)</code>，它通常只用一到两个字母来表示，但在不同的方法中仍然应当保持一致。</p></blockquote><blockquote><p>注意：Go 中对接收者的短命名规则惯例与目前提供的建议不一致。这只是早期做出的选择之一，并且已经成为首选的风格，就像使用<code>CamelCase</code>而不是<code>snake_case</code>一样。</p></blockquote><blockquote><p>TIP：Go 的命名风格规定接收器具有单个字母名称或其派生类型的首字母缩略词。有时您可能会发现接收器的名称有时会与方法中参数的名称冲突，在这种情况下，请考虑使参数名称稍长，并且仍然不要忘记一致地使用这个新名称。</p></blockquote><p>最后，某些单字母变量传统上与循环和计数有关。例如，<code>i</code>，<code>j</code>，和<code>k</code>通常是简单的<code>for</code>循环变量。<code>n</code>通常与计数器或累加器有关。 <code>v</code>通常是某个值的简写，<code>k</code>通常用于映射的键，<code>s</code>通常用作<code>string</code>类型参数的简写。</p><p>与上面<code>db</code>的例子一样，程序员期望<code>i</code>是循环变量。如果你保证<code>i</code>始终是一个循环变量——而不是在<code>for</code>循环之外的情况下使用，那么当读者遇到一个名为<code>i</code>或者<code>j</code>的变量时，他们就知道当前还在循环中。</p><blockquote><p>TIP：如果你发现在嵌套循环中你都使用完<code>i</code>，<code>j</code>，<code>k</code>了，那么很显然这已经到了将函数拆得更小的时候了。</p></blockquote><h2 id="使用一致的声明风格"><a href="#使用一致的声明风格" class="headerlink" title="使用一致的声明风格"></a>使用一致的声明风格</h2><p>Go 中至少有 6 种声明变量的方法</p><ul><li><code>var x int = 1</code></li><li><code>var x = 1</code></li><li><code>var x int; x = 1</code></li><li><code>var x = int(1)</code></li><li><code>x := 1</code></li></ul><p>我敢肯定还有更多我没想到的。这是 Go 的设计师认识到的可能是一个错误的地方，但现在改变它为时已晚。有这么多不同的方式来声明变量，那么我们如何避免每个 Go 程序员选择自己个性独特的声明风格呢？</p><p>我想展示一些在我自己的程序里声明变量的建议。这是我尽可能使用的风格。</p><ul><li><p><strong>只声明，不初始化时，使用<code>var</code>。</strong>声明之后将显式地初始化时，使用<code>var</code>关键字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players <span class="keyword">int</span>    <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> things []Thing <span class="comment">// an empty slice of Things</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing Thing    <span class="comment">// empty Thing struct</span></span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure><p><code>var</code>关键字表明这个变量被<strong>有意地</strong>声明为该类型的零值。这也与在包级别声明变量时使用<code>var</code>而不是短声明语法（Austin Luo：<code>:=</code>）的要求一致——尽管我稍后会说你根本不应该使用包级变量。</p></li><li><p><strong>既声明，也初始化时，使用<code>:=</code>。</strong>当同时要声明和初始化变量时，换言之我们不让变量隐式地被初始化为零值时，我建议使用短声明语法的形式。这使得读者清楚地知道<code>:=</code>左侧的变量是有意被初始化的。</p></li></ul><p>为解释原因，我们回头再看看上面的例子，但这一次每个变量都被有意初始化了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> things []Thing = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing *Thing = <span class="built_in">new</span>(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><p>第一个和第三个示例中，因为 Go 没有从一种类型到另一种类型的自动转换，赋值运算符左侧和右侧的类型必定是一致的。编译器可以从右侧的类型推断出左侧声明的变量的类型。对于这个示例可以更简洁地写成这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> things []Thing = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing = <span class="built_in">new</span>(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><p>由于<code>0</code>是<code>players</code>的零值，因此为<code>players</code>显式地初始化为<code>0</code>就显得多余了。所以为了更清晰地表明我们使用了零值，应该写成这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>那第二条语句呢？我们不能忽视类型写成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> things = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>因为<code>nil</code>根本就没有类型<a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">^2</a>。相反，我们有一个选择，我们是否希望切片的零值？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> things []Thing</span><br></pre></td></tr></table></figure><p>或者我们是否希望创建一个没有元素的切片？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> things = <span class="built_in">make</span>([]Thing, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>如果我们想要的是后者，这不是个切片类型的零值，那么我们应该使用短声明语法让阅读者很清楚地明白我们的选择：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">things := <span class="built_in">make</span>([]Thing, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这告诉了读者我们显式地初始化了<code>things</code>。</p><p>再来看看第三个声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thing = <span class="built_in">new</span>(Thing)</span><br></pre></td></tr></table></figure><p>这既显式地初始化了变量，也引入了 Go 程序员不喜欢而且很不常用的<code>new</code>关键字。如果我们遵循短命名语法的建议，那么这句将变成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thing := <span class="built_in">new</span>(Thing)</span><br></pre></td></tr></table></figure><p>这很清楚地表明，<code>thing</code>被显式地初始化为<code>new(Thing)</code>的结果——一个指向<code>Thing</code>的指针——但仍然保留了我们不常用的<code>new</code>。我们可以通过使用<strong>紧凑结构初始化的形式</strong>来解决这个问题，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thing := &amp;Thing&#123;&#125;</span><br></pre></td></tr></table></figure><p>这和<code>new(Thing)</code>做了同样的事——也因此很多 Go 程序员对这种重复感觉不安。不过，这一句仍然意味着我们为<code>thing</code>明确地初始化了一个<code>Thing{}</code>的指针——一个<code>Thing</code>的零值。</p><p>在这里，我们应该意识到，<code>thing</code>被初始化为了零值，并且将它的指针地址传递给了<code>json.Unmarshall</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thing Thing</span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;译者注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文为 &lt;strong&gt;QCon 2018 上海站&lt;/strong&gt;主题演讲嘉宾、Heptio 资深工程师、著名Go语言专家 &lt;a href=&quot;https://2018.qconshanghai.com/speaker/2503&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;David Cheney&lt;/a&gt; 关于 Go 语言实践的英文分享。为方便大家阅读，在此由 &lt;a href=&quot;https://www.udnz.com&quot;&gt;Austin Luo&lt;/a&gt; 翻译为中文。翻译水平有限，如有偏颇之处，烦请联系我更正之。&lt;/p&gt;
&lt;p&gt;转载请注明出处，保留本节译者注。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来这两场我将给大家一些编写 Go 代码的最佳实践。&lt;/p&gt;
&lt;p&gt;今天这是一个研讨会风格的演讲，我会摒弃那些绚丽的 PPT，而是直接使用你们可以直接带走的文档。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP: 你可以在这里找到这个演讲最新的在线版本：&lt;br&gt;&lt;a href=&quot;https://dave.cheney.net/practical-go/presentations/qcon-china.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dave.cheney.net/practical-go/presentations/qcon-china.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;指导原则&quot;&gt;&lt;a href=&quot;#指导原则&quot; class=&quot;headerlink&quot; title=&quot;指导原则&quot;&gt;&lt;/a&gt;指导原则&lt;/h1&gt;&lt;p&gt;我们要谈论在一个编程语言中的最佳实践，那么我们首先应该明确什么是“最佳”。如果你们听了我昨天那场讲演的话，你一定看到了来自 Go 团队的 Russ Cox 讲的一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件工程，是当你在编程时增加了工期和其他编程人员之后发生的事。 — Russ Cox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Russ 是在阐述软件“编程”和软件“工程”之间的区别，前者是你写的程序，而后者是一个让更多的人长期使用的产品。软件工程师会来来去去地更换，团队也会成长或者萎缩，需求也会发生变化，新的特性也会增加，bug 也会被修复，这就是软件“工程”的本质。&lt;/p&gt;
&lt;p&gt;我可能是现场最早的 Go 语言用户，但与其说我的主张来自我的资历，不如说我今天讲的是真实来自于 Go 语言本身的指导原则，那就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单性&lt;/li&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;生产率&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;你可能已经注意到，我并没有提&lt;strong&gt;性能&lt;/strong&gt;或者&lt;strong&gt;并发性&lt;/strong&gt;。实际上有不少的语言执行效率比 Go 还要高，但它们一定没有 Go 这么简单。有些语言也以&lt;strong&gt;并发性&lt;/strong&gt;为最高目标，但它们的可读性和生产率都不好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;和&lt;strong&gt;并发性&lt;/strong&gt;都很重要，但它们不如&lt;strong&gt;简单性&lt;/strong&gt;、&lt;strong&gt;可读性&lt;/strong&gt;和&lt;strong&gt;生产率&lt;/strong&gt;那么重要。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Go" scheme="https://www.udnz.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>在 Visual Studio Code 中使用 MINGW32 作为终端</title>
    <link href="https://www.udnz.com/2018/10/08/%E5%9C%A8-Visual-Studio-Code-%E4%B8%AD%E4%BD%BF%E7%94%A8-MINGW32-%E4%BD%9C%E4%B8%BA%E7%BB%88%E7%AB%AF/"/>
    <id>https://www.udnz.com/2018/10/08/在-Visual-Studio-Code-中使用-MINGW32-作为终端/</id>
    <published>2018-10-08T09:09:18.000Z</published>
    <updated>2018-10-08T09:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>打开 Visual Studio Code 的设置，按如下配置即可：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 找到您的 git 目录</span><br><span class="line">  <span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files (x86)\\Git\\bin\\bash.exe"</span>,</span><br><span class="line">  <span class="string">"terminal.integrated.shellArgs.windows"</span>: [<span class="string">"--login"</span>, <span class="string">"-i"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开 Visual Studio Code 的设置，按如下配置即可：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="VSC" scheme="https://www.udnz.com/tags/VSC/"/>
    
  </entry>
  
  <entry>
    <title>Linux 环境一键打包发布脚本</title>
    <link href="https://www.udnz.com/2018/10/06/Linux-%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/"/>
    <id>https://www.udnz.com/2018/10/06/Linux-环境一键打包发布脚本/</id>
    <published>2018-10-06T10:16:28.000Z</published>
    <updated>2018-10-06T10:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下脚本作为工作笔记沉淀，记录一下。</p><a id="more"></a><p>deploy.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本脚本用于开发环境，直接打包需要发布的文件，然后通过 SSH 复制到服务器并直接通过 pm2 启动执行。</span></span><br><span class="line"><span class="comment"># 主要功能：</span></span><br><span class="line"><span class="comment">#   - 打包本地文件</span></span><br><span class="line"><span class="comment">#   - 剪切备份 $BUILDDIR 目录（实际程序执行的目录）</span></span><br><span class="line"><span class="comment">#   - 复制到远程服务器 $BUILDDIR 目录</span></span><br><span class="line"><span class="comment">#   - 解压</span></span><br><span class="line"><span class="comment">#   - 使用备份的配置文件覆盖</span></span><br><span class="line"><span class="comment">#   - 启动程序</span></span><br><span class="line"></span><br><span class="line">WORKROOT=/path/to/your/dir/on/remote/server</span><br><span class="line">BUILDDIR=<span class="variable">$WORKROOT</span>/build</span><br><span class="line"></span><br><span class="line">SKEY=<span class="string">" -i ~/.ssh/your-ssh-key-file"</span></span><br><span class="line">SCHANNEL=<span class="string">"your-ssh-user@your-ssh-host"</span></span><br><span class="line">SROOT=<span class="variable">$SCHANNEL</span>:<span class="variable">$WORKROOT</span></span><br><span class="line">SBUILD=<span class="variable">$SCHANNEL</span>:<span class="variable">$BUILDDIR</span></span><br><span class="line">DATE=`date <span class="string">'+%Y-%m-%d%H%M%S'</span>`</span><br><span class="line"></span><br><span class="line">. ./bash/pack.sh <span class="variable">$DATE</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"copying files..."</span></span><br><span class="line">scp <span class="variable">$SKEY</span> -r ./build/build-<span class="variable">$DATE</span>.zip <span class="variable">$SROOT</span></span><br><span class="line">ssh <span class="variable">$SKEY</span> <span class="variable">$SCHANNEL</span> mv <span class="variable">$BUILDDIR</span> <span class="variable">$BUILDDIR</span>-<span class="variable">$DATE</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"unzipping files..."</span></span><br><span class="line">ssh <span class="variable">$SKEY</span> <span class="variable">$SCHANNEL</span> unzip -q <span class="variable">$WORKROOT</span>/build-<span class="variable">$DATE</span>.zip -d <span class="variable">$BUILDDIR</span></span><br><span class="line"><span class="comment">#ssh $SKEY $SCHANNEL cp $WORKROOT/bak/etc/config.json $BUILDDIR/etc/config.json</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"starting..."</span></span><br><span class="line">CMD=<span class="string">"cd <span class="variable">$BUILDDIR</span> ; pm2 restart ./etc/pm2.config.json"</span></span><br><span class="line">ssh <span class="variable">$SKEY</span> <span class="variable">$SCHANNEL</span> <span class="variable">$CMD</span></span><br></pre></td></tr></table></figure><p>pack.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要在项目根目录执行，如：./bash/pack.sh</span></span><br><span class="line"></span><br><span class="line">DATE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$DATE</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">  DATE=`date <span class="string">'+%Y-%m-%d%H%M%S'</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份本地配置，使用生产环境配置</span></span><br><span class="line">mv ./etc/config.json ./etc/config.dev.json.bak</span><br><span class="line">mv ./etc/config.prod.json ./etc/config.json</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"packing files..."</span></span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./bin</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./dal</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./etc -i ./etc/*.json</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./controller</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./middlewares</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./models</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./node_modules</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./public</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./routes</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./utils</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./views</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原配置</span></span><br><span class="line">mv ./etc/config.json ./etc/config.prod.json</span><br><span class="line">mv ./etc/config.dev.json.bak ./etc/config.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下脚本作为工作笔记沉淀，记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.udnz.com/tags/Linux/"/>
    
      <category term="DevOps" scheme="https://www.udnz.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>通过 SSH 隧道链接远程 MySQL</title>
    <link href="https://www.udnz.com/2018/10/01/%E9%80%9A%E8%BF%87-SSH-%E9%9A%A7%E9%81%93%E9%93%BE%E6%8E%A5%E8%BF%9C%E7%A8%8B-MySQL/"/>
    <id>https://www.udnz.com/2018/10/01/通过-SSH-隧道链接远程-MySQL/</id>
    <published>2018-10-01T12:18:10.000Z</published>
    <updated>2018-10-01T12:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景：</p><ul><li>SSH 跳板机：10.0.0.1</li><li>MySQL 数据库：10.0.0.2:3306</li></ul><p>MySQL 部署的机器不允许 SSH 连接，并且数据库端口只允许 localhost 或 10.0.0.1 这台跳板机访问，此时本机可以通过 ssh 连上跳板机，通过 ssh 建立的隧道端口转发连接上 MySQL 数据库。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机连接跳板机</span></span><br><span class="line"><span class="comment"># 打开本机 13306 端口，代理到 ssh 跳板机，并且通过跳板机访问 10.0.0.2:3306</span></span><br><span class="line">ssh -fCPN -L localhost:13306:10.0.0.2:3306 root@10.0.0.1</span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line"><span class="comment"># -C    使用压缩功能,是可选的,加快速度.</span></span><br><span class="line"><span class="comment"># -P    用一个非特权端口进行出去的连接.</span></span><br><span class="line"><span class="comment"># -f    一旦SSH完成认证并建立port forwarding,则转入后台运行.</span></span><br><span class="line"><span class="comment"># -N    不执行远程命令.该参数在只打开转发端口时很有用（V2版本SSH支持）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 MySQL</span></span><br><span class="line">mysql -uusername -ppassword -hlocalhost -P13306</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://mingxinglai.com/cn/2015/09/connect-mysql-via-ssh-tunnel/" target="_blank" rel="noopener">http://mingxinglai.com/cn/2015/09/connect-mysql-via-ssh-tunnel/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH 跳板机：10.0.0.1&lt;/li&gt;
&lt;li&gt;MySQL 数据库：10.0.0.2:3306&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL 部署的机器不允许 SSH 连接，并且数据库端口只允许 localhost 或 10.0.0.1 这台跳板机访问，此时本机可以通过 ssh 连上跳板机，通过 ssh 建立的隧道端口转发连接上 MySQL 数据库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.udnz.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.udnz.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Architecture</title>
    <link href="https://www.udnz.com/2018/09/30/Understanding-Architecture/"/>
    <id>https://www.udnz.com/2018/09/30/Understanding-Architecture/</id>
    <published>2018-09-30T07:13:43.000Z</published>
    <updated>2018-09-30T07:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="架构是这样定义的"><a href="#架构是这样定义的" class="headerlink" title="架构是这样定义的"></a>架构是这样定义的</h1><ul><li>每个系统都有一个架构</li><li>架构由架构元素以及相互之间的关系构成</li><li>系统是为了满足 <strong>利益相关者（stakeholder）</strong> 的需求而构建的</li><li>利益相关者都有自己的<strong>关注点（concerns）</strong></li><li>架构由架构文档描述</li><li>架构文档描述了一系列的<strong>架构视角</strong></li><li>每个视角都解决并且对应到利益相关者的关注点。</li></ul><p>架构师的首要任务是尽最大可能找出所有利益相关者，业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。架构师常犯错误是漏掉重要的利益相关者，沟通不充分，都会造成架构有欠缺，不能满足利益相关者的需求。利益相关者的关注点是有可能冲突的，比如管理层（可管理性）vs技术方（性能），业务方（多快好省）vs 技术方（可靠稳定），这需要架构师去灵活平衡，如何平衡体现了架构师的水平和价值。</p><a id="more"></a><blockquote><p>Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.</p><p>—- Grady Booch, UML的创始人之一</p><p>架构表示对一个系统的成型起关键作用的设计决策，这里的关键性是由“改变它”的成本来决定的。</p></blockquote><p>微服务中每个服务可以独立演变，它的cost of change比较小，整体架构比较灵活，是一种支持创新的演化式架构。</p><h1 id="Architecture-Requirements"><a href="#Architecture-Requirements" class="headerlink" title="Architecture Requirements"></a>Architecture Requirements</h1><table><thead><tr><th>Requirement</th><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>Easy to separate</td><td>Autonomy</td><td>易分离，自治性</td></tr><tr><td>Easy to understand</td><td>Understandablility</td><td>可理解性</td></tr><tr><td>Easy to extend</td><td>Extensibility</td><td>可延展性</td></tr><tr><td>Easy to change</td><td>Changeability</td><td>可变性</td></tr><tr><td>Easy to replace</td><td>Replaceability</td><td>可替换性</td></tr><tr><td>Easy to deploy</td><td>Deployability</td><td>可部署性</td></tr><tr><td>Easy to scale</td><td>Scalability</td><td>伸缩性，可扩展性</td></tr><tr><td>Easy to recover</td><td>Resilience</td><td>可恢复性</td></tr><tr><td>Easy to connect</td><td>Uniform interface</td><td>易连接，易集成，统一接口</td></tr><tr><td>Easy to afford</td><td>Cost-efficiency</td><td>成本效率，性价比</td></tr></tbody></table><p>架构的目标是用于管理复杂性、易变性和不确定性，以确保在长期的系统演化过程中，一部分架构的变化不会对架构的其它部分产生不必要的负面影响。这样做可以确保业务和研发效率的敏捷，让应用的易变部分能够频繁地变化，对应用的其它部分的影响尽可能的小。</p><h1 id="微服务更多是关于组织和团队，而不是技术"><a href="#微服务更多是关于组织和团队，而不是技术" class="headerlink" title="微服务更多是关于组织和团队，而不是技术"></a>微服务更多是关于组织和团队，而不是技术</h1><blockquote><p>organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations.</p><p>康威定律：设计系统的组织，其产生的设计和架构等价于组织间的沟通结构.</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1411204-7b51d528373115c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;架构是这样定义的&quot;&gt;&lt;a href=&quot;#架构是这样定义的&quot; class=&quot;headerlink&quot; title=&quot;架构是这样定义的&quot;&gt;&lt;/a&gt;架构是这样定义的&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;每个系统都有一个架构&lt;/li&gt;
&lt;li&gt;架构由架构元素以及相互之间的关系构成&lt;/li&gt;
&lt;li&gt;系统是为了满足 &lt;strong&gt;利益相关者（stakeholder）&lt;/strong&gt; 的需求而构建的&lt;/li&gt;
&lt;li&gt;利益相关者都有自己的&lt;strong&gt;关注点（concerns）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;架构由架构文档描述&lt;/li&gt;
&lt;li&gt;架构文档描述了一系列的&lt;strong&gt;架构视角&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个视角都解决并且对应到利益相关者的关注点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构师的首要任务是尽最大可能找出所有利益相关者，业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。架构师常犯错误是漏掉重要的利益相关者，沟通不充分，都会造成架构有欠缺，不能满足利益相关者的需求。利益相关者的关注点是有可能冲突的，比如管理层（可管理性）vs技术方（性能），业务方（多快好省）vs 技术方（可靠稳定），这需要架构师去灵活平衡，如何平衡体现了架构师的水平和价值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="https://www.udnz.com/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 环境搭建</title>
    <link href="https://www.udnz.com/2018/09/30/Kubernetes/"/>
    <id>https://www.udnz.com/2018/09/30/Kubernetes/</id>
    <published>2018-09-30T03:08:49.000Z</published>
    <updated>2018-11-30T12:59:46.516Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#kubernetes">kubernetes</a><ul><li><a href="#安装-vm-驱动">安装 VM 驱动</a></li><li><a href="#--virtualbox">- VirtualBox</a></li><li><a href="#--kvm2">- KVM2</a></li><li><a href="#--其他驱动">- 其他驱动</a></li><li><a href="#安装-kubectl">安装 kubectl</a></li><li><a href="#安装-minikube">安装 minikube</a></li></ul></li><li><a href="#运行">运行</a><ul><li><a href="#拉取-k8s-相关镜像">拉取 k8s 相关镜像</a></li><li><a href="#kubenetes">Kubenetes</a></li><li><a href="#向-kubernetes-添加账号">向 kubernetes 添加账号</a></li></ul></li><li><a href="#相关问题">相关问题</a><ul><li><a href="#failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-cgroupfs-is-different-from-docker-cgrdriver-systemd">failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”</a></li><li><a href="#error-filecontent--proc-sys-net-bridge-bridge-nf-call-iptables-procsysnetbridgebridge-nf-call-iptables-contents-are-not-set-to-1">[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1</a></li><li><a href="#unable-to-update-cni-config-no-networks-found-in-etccninetd">Unable to update cni config: No networks found in /etc/cni/net.d</a></li></ul></li><li><a href="#参考">参考</a></li></ul><!-- /TOC --><a id="more"></a><h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h1><p>指引：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-kubectl/</a></p><h2 id="安装-VM-驱动"><a href="#安装-VM-驱动" class="headerlink" title="安装 VM 驱动"></a>安装 VM 驱动</h2><blockquote><p>腾讯云 CVM 未能启用驱动启动 minikube，安装驱动的过程可忽略。</p></blockquote><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="- VirtualBox"></a>- VirtualBox</h2><blockquote><p>CentOS：虚拟机不支持内部 VM，未在物理机上尝试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo</span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum install -y binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms</span><br><span class="line">yum install -y VirtualBox-5.2</span><br><span class="line"></span><br><span class="line">service vboxdrv start</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.if-not-true-then-false.com/2010/install-virtualbox-with-yum-on-fedora-centos-red-hat-rhel/" target="_blank" rel="noopener">https://www.if-not-true-then-false.com/2010/install-virtualbox-with-yum-on-fedora-centos-red-hat-rhel/</a></li><li><a href="https://www.virtualbox.org/wiki/Linux_Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Linux_Downloads</a></li><li><a href="https://www.cnblogs.com/harry-h/p/6405433.html" target="_blank" rel="noopener">https://www.cnblogs.com/harry-h/p/6405433.html</a></li></ul><blockquote><p>MAC 上可以直接下载安装：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></p></blockquote><h2 id="KVM2"><a href="#KVM2" class="headerlink" title="- KVM2"></a>- KVM2</h2><blockquote><p>安装成功，但 <code>minikube start</code> 时未能尝试成功</p></blockquote><p><a href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm2-driver" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm2-driver</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt-daemon-kvm qemu-kvm</span><br><span class="line"></span><br><span class="line">curl -Lo docker-machine-driver-kvm2 https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 \</span><br><span class="line">&amp;&amp; chmod +x docker-machine-driver-kvm2 \</span><br><span class="line">&amp;&amp; sudo cp docker-machine-driver-kvm2 /usr/<span class="built_in">local</span>/bin/ \</span><br><span class="line">&amp;&amp; rm docker-machine-driver-kvm2</span><br></pre></td></tr></table></figure><p>附：查看虚拟机网络以及使用不同的网络启动 minikube</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt virt-install bridge-utils</span><br><span class="line"><span class="comment"># 查看虚拟机网络</span></span><br><span class="line">virsh net-list --all</span><br><span class="line"><span class="comment"># 使用不同的虚拟机网络(minikube-net)</span></span><br><span class="line">minikube start --vm-driver kvm2 --kvm-network minikube-net</span><br></pre></td></tr></table></figure><h2 id="其他驱动"><a href="#其他驱动" class="headerlink" title="- 其他驱动"></a>- 其他驱动</h2><p>指引：<a href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm-driver" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm-driver</a></p><h2 id="安装-kubectl"><a href="#安装-kubectl" class="headerlink" title="安装 kubectl"></a>安装 kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum install -y kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># MAC: 方式一</span></span><br><span class="line">brew install kubernetes-cli</span><br><span class="line"><span class="comment"># MAC：方式二</span></span><br><span class="line">curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.5.1/bin/darwin/amd64/kubectl &amp;&amp; chmod +x kubectl &amp;&amp; sudo mv kubectl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装校验</span></span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保服务已启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet.service</span><br><span class="line">systemctl start kubelet.service</span><br></pre></td></tr></table></figure><h2 id="安装-minikube"><a href="#安装-minikube" class="headerlink" title="安装 minikube"></a>安装 minikube</h2><p>指引：<a href="https://github.com/kubernetes/minikube/releases" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/releases</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.29.0/minikube-linux-amd64 \</span><br><span class="line">    &amp;&amp; chmod +x minikube \</span><br><span class="line">    &amp;&amp; sudo cp minikube /usr/<span class="built_in">local</span>/bin/ \</span><br><span class="line">    &amp;&amp; rm minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># MAC</span></span><br><span class="line">brew cask install minikube</span><br></pre></td></tr></table></figure><hr><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p><strong>（使用 KVM2 驱动）运行之前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd &amp;&amp; systemctl start libvirtd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程文件</span></span><br><span class="line">ls -l /var/run/libvirt/libvirt-sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若进程文件不存在，则修改配置：</span></span><br><span class="line">vi /etc/libvirt/libvirtd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消行前注释，重新启动服务</span></span><br><span class="line"><span class="comment">#unix_sock_dir = "/var/run/libvirt"</span></span><br></pre></td></tr></table></figure><h2 id="拉取-k8s-相关镜像"><a href="#拉取-k8s-相关镜像" class="headerlink" title="拉取 k8s 相关镜像"></a>拉取 k8s 相关镜像</h2><p>原本在 <code>minikube start</code> 命令中会自动拉取镜像，但是因为众所周知的原因，我们无法成功拉取到镜像。这里可以使用阿里 docker 容器镜像服务：<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入虚拟机拉取，而非本机</span></span><br><span class="line">minikube ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-apiserver-amd64:v1.10.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-controller-manager-amd64:v1.10.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-scheduler-amd64:v1.10.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/etcd-amd64:3.1.12</span><br><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com/kubernetes_google/kubernetes-dashboard-amd64:v1.10.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/kube-apiserver-amd64:v1.10.0 k8s.gcr.io/kube-apiserver-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/kube-controller-manager-amd64:v1.10.0 k8s.gcr.io/kube-controller-manager-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/kube-scheduler-amd64:v1.10.0 k8s.gcr.io/kube-scheduler-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/etcd-amd64:3.1.12 k8s.gcr.io/etcd-amd64:3.1.12</span><br><span class="line">docker tag registry.cn-shenzhen.aliyuncs.com/kubernetes_google/kubernetes-dashboard-amd64:v1.10.0 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0</span><br></pre></td></tr></table></figure><h2 id="Kubenetes"><a href="#Kubenetes" class="headerlink" title="Kubenetes"></a>Kubenetes</h2><p>指引：<a href="https://kubernetes.io/docs/setup/minikube/#quickstart" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/minikube/#quickstart</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在代理下运行时，需要指定正确的代理，否则 minikube 在内部访问网络会有问题</span></span><br><span class="line"><span class="comment"># 注意，代理地址应当是在虚拟机中能够访问的地址，不能使用 127.0.0.1、localhost 这种</span></span><br><span class="line">https_proxy=http://web-proxy.oa.com:8080</span><br><span class="line">minikube start \</span><br><span class="line">    --docker-env http_proxy=http://web-proxy.oa.com:8080 \</span><br><span class="line">    --docker-env https_proxy=http://web-proxy.oa.com:8080 \</span><br><span class="line">    --docker-env no_proxy=192.168.99.0/24</span><br><span class="line">    --vm-driver=none</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装和启动过程中可能产生错误，通过该命令查看日志</span></span><br><span class="line">minikube logs -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 k8s（ CentOS 上不使用任何 vm 驱动，MAC 上默认可使用 VirtualBox）</span></span><br><span class="line">minikube start \</span><br><span class="line">    --network-plugin=cni \</span><br><span class="line">    --container-runtime=containerd \</span><br><span class="line">    --bootstrapper=kubeadm</span><br><span class="line">    --vm-driver=none</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dashboard</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/dashboard</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line">kubectl proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署及运行镜像</span></span><br><span class="line">kubectl run hello-minikube --image=registry.cn-hangzhou.aliyuncs.com/acs/echoserver:1.4 --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出服务</span></span><br><span class="line">kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 Pod</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl describe --namespace=kube-system po kubernetes-dashboard-6f4cfc5d87-d647l</span><br><span class="line">kubectl logs kubernetes-dashboard-6f4cfc5d87-x976v --namespace=kube-system</span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用服务</span></span><br><span class="line">curl $(minikube service hello-minikube --url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">kubectl delete services hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line">kubectl delete deployment hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 k8s</span></span><br><span class="line">minikube stop</span><br></pre></td></tr></table></figure><h2 id="向-kubernetes-添加账号"><a href="#向-kubernetes-添加账号" class="headerlink" title="向 kubernetes 添加账号"></a>向 kubernetes 添加账号</h2><p><a href="https://github.com/kubernetes/dashboard/wiki/Creating-sample-user" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/wiki/Creating-sample-user</a></p><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><h2 id="failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-“cgroupfs”-is-different-from-docker-cgr…driver-“systemd”"><a href="#failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-“cgroupfs”-is-different-from-docker-cgr…driver-“systemd”" class="headerlink" title="failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”"></a>failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”</h2><p>该问题因为 docker 的配置和 kubelet 的配置不一致导致。</p><p>使用 docker info 打印 docker 信息：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_16_centos kubelet.service.d]# docker info | grep Driver</span><br><span class="line"> <span class="literal">WARNING</span>: Usage <span class="keyword">of</span> loopback devices <span class="keyword">is</span> strongly discouraged <span class="keyword">for</span> production <span class="keyword">use</span>. <span class="keyword">Use</span> `<span class="comment">--storage-opt dm.thinpooldev` to specify a custom block storage device.</span></span><br><span class="line">  <span class="literal">WARNING</span>: You<span class="symbol">'re</span> <span class="keyword">not</span> using the <span class="keyword">default</span> seccomp profile</span><br><span class="line">Storage Driver: devicemapper</span><br><span class="line">Logging Driver: journald</span><br><span class="line">Cgroup Driver: systemd</span><br></pre></td></tr></table></figure><p>而查看 kubelet 服务的启动参数（<code>--cgroup-driver</code>），其设置为 <code>cgroupfs</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_16_centos kubelet.service.d]# more /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Wants</span>=docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/kubelet <span class="attribute">--hostname-override</span>=minikube <span class="attribute">--cluster-domain</span>=cluster.local <span class="attribute">--cgroup-driver</span>=cgroupfs <span class="attribute">--authorization-mode</span>=Webhook <span class="attribute">--client-ca-file</span>=/var/lib/minikube/certs/ca.crt <span class="attribute">--fail-swap-on</span>=<span class="literal">false</span> <span class="attribute">--kubeconfig</span>=/etc/kubernetes/ku</span><br><span class="line">belet.conf <span class="attribute">--bootstrap-kubeconfig</span>=/etc/kubernetes/bootstrap-kubelet.conf <span class="attribute">--pod-manifest-path</span>=/etc/kubernetes/manifests <span class="attribute">--allow-privileged</span>=<span class="literal">true</span> <span class="attribute">--cluster-dns</span>=10.96.0.10 <span class="attribute">--cadvisor-port</span>=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure><p>此时，修改 docker 的服务参数（<code>vi /usr/lib/systemd/system/docker.service</code>），将其中的 <code>--exec-opt native.cgroupdriver</code> 参数值改为 <code>cgroupfs</code> 。</p><p>然后，重启 docker，重启 kubelet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="ERROR-FileContent–proc-sys-net-bridge-bridge-nf-call-iptables-proc-sys-net-bridge-bridge-nf-call-iptables-contents-are-not-set-to-1"><a href="#ERROR-FileContent–proc-sys-net-bridge-bridge-nf-call-iptables-proc-sys-net-bridge-bridge-nf-call-iptables-contents-are-not-set-to-1" class="headerlink" title="[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1"></a>[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1</h2><p>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure></p><h2 id="Unable-to-update-cni-config-No-networks-found-in-etc-cni-net-d"><a href="#Unable-to-update-cni-config-No-networks-found-in-etc-cni-net-d" class="headerlink" title="Unable to update cni config: No networks found in /etc/cni/net.d"></a>Unable to update cni config: No networks found in /etc/cni/net.d</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubernetes-cni</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/a42eeb66a19c" target="_blank" rel="noopener">https://www.jianshu.com/p/a42eeb66a19c</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#kubernetes&quot;&gt;kubernetes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#安装-vm-驱动&quot;&gt;安装 VM 驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#--virtualbox&quot;&gt;- VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#--kvm2&quot;&gt;- KVM2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#--其他驱动&quot;&gt;- 其他驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装-kubectl&quot;&gt;安装 kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装-minikube&quot;&gt;安装 minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#运行&quot;&gt;运行&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#拉取-k8s-相关镜像&quot;&gt;拉取 k8s 相关镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kubenetes&quot;&gt;Kubenetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#向-kubernetes-添加账号&quot;&gt;向 kubernetes 添加账号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#相关问题&quot;&gt;相关问题&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-cgroupfs-is-different-from-docker-cgrdriver-systemd&quot;&gt;failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#error-filecontent--proc-sys-net-bridge-bridge-nf-call-iptables-procsysnetbridgebridge-nf-call-iptables-contents-are-not-set-to-1&quot;&gt;[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#unable-to-update-cni-config-no-networks-found-in-etccninetd&quot;&gt;Unable to update cni config: No networks found in /etc/cni/net.d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.udnz.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="https://www.udnz.com/tags/kubernetes/"/>
    
      <category term="Micro Service" scheme="https://www.udnz.com/tags/Micro-Service/"/>
    
  </entry>
  
  <entry>
    <title>记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪</title>
    <link href="https://www.udnz.com/2018/06/15/%E8%AE%B0%E4%B8%80%E6%AC%A1-NET-Framework-%E4%B8%8D%E5%85%BC%E5%AE%B9-HTTP-COOKIE-%E5%8D%8F%E8%AE%AE%E6%A0%87%E5%87%86%E7%9A%84%E9%97%AE%E9%A2%98%E8%B7%9F%E8%B8%AA/"/>
    <id>https://www.udnz.com/2018/06/15/记一次-NET-Framework-不兼容-HTTP-COOKIE-协议标准的问题跟踪/</id>
    <published>2018-06-15T08:48:16.000Z</published>
    <updated>2018-06-15T08:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在后端系统实现了 HTTP 请求的代理类，用于请求其他第三方系统。大致的请求流程是这样的：</p><p><img src="/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-1.png" alt=""></p><p>消费系统不能直接请求业务系统的 HTTP 接口，需要由中间的 HttpHelper 代理请求。其中 HttpHelper 接受消费系统传入的各种参数，包括要请求的 URL、METHOD、HEAD、BODY 等，在实际生产中一直运行得很好，直到如下异常的出现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Net.CookieException: Cookie format error.</span><br><span class="line">   at System.Net.CookieContainer.CookieCutter(Uri uri, String headerName, String setCookieHeader, Boolean isThrow)</span><br></pre></td></tr></table></figure><a id="more"></a><p>跟进异常信息，很容易知道是设置 Cookie 时发生的异常。根据请求端传入的 HEAD 信息排查，我们很容易还原故障现场：传入 HTTP 头信息 <code>Cookie: expires=Fri, 15 Jun 2018 15:19:14 GMT</code></p><p><img src="/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-2.png" alt=""></p><p>这里是在设置 Cookie 的过期时间，并且这个时间看起来也正常，并没有格式错误或者时间不存在的错误。看起来问题不出在时间本身上。上网查查 HTTP 规范，根据 HTTP Cookie 协议，也是允许如下形式的字符串的，看起来也没有什么问题：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span>: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT</span><br></pre></td></tr></table></figure><p>既然异常是微软代码抛出来的，也给了具体抛出异常的方法的地方，那么我们就来翻翻微软代码吧。终于，在微软代码 System.Net.Cookie.VerifySetDefaults:L382 发现了问题所在。在这里，微软在校验 Cookie 值时，如果发现指定的值字符串中有保留字符（“,”、”;”），则要求该值必须使用双引号引起来，否则就会抛出异常。查看我们请求的头，在 expires 的值“Fri, 15 Jun 2018 15:19:14 GMT”中，的确有“,”存在，并且值也并未使用双引号引起来。于是我尝试修改传入的 HTTP 头参数：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: expires=“Fri, 15 Jun 2018 15:19:14 GMT”</span><br></pre></td></tr></table></figure><p>很自然，异常不再存在了，目前看起来的确是微软的这段代码导致了抛出异常。</p><p>你们我们来看看，这个值到底是不是可以去加双引号吧。继续上网翻文档，在 <code>rfc2965#section-3.1</code> 和 <code>rfc6265#section-4.1.1</code> 中提到，值可以是字符串或引号引起来的字符串（<code>quoted-string</code>），这是 在 HTTP State Management Mechanism 中有所规定的。那么我们可以很放心地做这个兼容性处理了，即，当传入的 Cookie 值包含保留字符，并且未被双引号引起来时（一定会产生异常），我们自动地追加双引号，把值引起来，这样既可避免微软对值进行严格校验时抛出异常了。</p><p>但是，此事还没有到此为止，我们实际来试试，加了双引号之后，业务系统是否能够正确收到消费系统传入的头呢？收到的头，是否为消费系统的正确意图呢？</p><p><img src="/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-3.png" alt=""></p><p>值得注意的是，在业务系统里获取到的 Cookie 值，是添加了引号的值，并不是严格地与消费系统里传入的文本一致。</p><p>到此为止，应对这个异常便有两个方案了：</p><ol><li>传入的 Cookie 值包含保留字符，并且未被双引号引起来时（一定会产生异常），我们自动地追加双引号。</li><li>什么都不做，按原意抛出异常，提醒调用者更正 HTTP 头信息的格式。</li></ol><p>在我们的项目中，由于情况特殊（使用场景为后端服务之间的通信交互），一般不涉及到 Cookie 的设置，并且消费服务可能由很多个不同的团队实现，而业务服务可以统一处理添加的双引号，因此我们采用了方案 1。至于其他场景，实际上个人偏向于采用方案 2，不掩盖任何问题——特别是因为加了双引号之后，请求接受端接收到的值，不能完全原样表达请求发起端设置的值。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://en.wikipedia.org/wiki/HTTP_cookie" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/HTTP_cookie</a></li><li><a href="https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,67f8e4d3cb862668" target="_blank" rel="noopener">https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,67f8e4d3cb862668</a></li><li><a href="https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,dca3e494aed8e006" target="_blank" rel="noopener">https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,dca3e494aed8e006</a></li><li><a href="https://tools.ietf.org/html/rfc6265#section-4.1.1" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6265#section-4.1.1</a></li><li><a href="https://tools.ietf.org/html/rfc2965#section-3.1" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2965#section-3.1</a></li><li><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在后端系统实现了 HTTP 请求的代理类，用于请求其他第三方系统。大致的请求流程是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;消费系统不能直接请求业务系统的 HTTP 接口，需要由中间的 HttpHelper 代理请求。其中 HttpHelper 接受消费系统传入的各种参数，包括要请求的 URL、METHOD、HEAD、BODY 等，在实际生产中一直运行得很好，直到如下异常的出现：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.Net.CookieException: Cookie format error.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   at System.Net.CookieContainer.CookieCutter(Uri uri, String headerName, String setCookieHeader, Boolean isThrow)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="http" scheme="https://www.udnz.com/tags/http/"/>
    
      <category term=".net" scheme="https://www.udnz.com/tags/net/"/>
    
      <category term="Cookie" scheme="https://www.udnz.com/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>软件系统的黑匣子：我们要怎样写日志</title>
    <link href="https://www.udnz.com/2018/02/28/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%BB%91%E5%8C%A3%E5%AD%90%EF%BC%9A%E6%88%91%E4%BB%AC%E8%A6%81%E6%80%8E%E6%A0%B7%E5%86%99%E6%97%A5%E5%BF%97/"/>
    <id>https://www.udnz.com/2018/02/28/软件系统的黑匣子：我们要怎样写日志/</id>
    <published>2018-02-28T07:28:22.000Z</published>
    <updated>2018-02-28T07:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>作为一个软件系统，需要写日志，这是不言而喻的，这是大家都会不假思索地说“那当然”的事。不论是什么语言，写日志的专用框架也不一而足，写到文本的，写到数据库的，写到队列的，写到Redis的等等等等。对于日志的几个级别，Trace、Debug、Warning、Error、Fault，大家也能够如数家珍。但是，有多少人能够回答下面这几个问题呢？</p><p>为什么需要写日志？<br>什么时候写日志？<br>日志是写给谁看的？<br>日志里都要写什么？<br>日志的组织形式应该怎样？</p><p>接下来，我尝试一一地解答这些问题，说说我的理解。</p><a id="more"></a><h1 id="为什么需要写日志"><a href="#为什么需要写日志" class="headerlink" title="为什么需要写日志"></a>为什么需要写日志</h1><p>首先我们要树立一个观点，那就是“不是为了记录日志而记录日志，日志也不是随意记的”。要实现能够只通过日志文件还原整个程序执行的过程，达到能透明地看到程序里执行情况，每个线程每个过程到底执行到哪的目的。日志就像飞机的黑匣子一样，应当能够复原异常的整个现场乃至细节。</p><p>作为程序员，我相信吐槽写注释、写文档的段子已经见得很多了。然而在我看来，写日志的重要性完全不亚于前两者，甚至在很多时候，比前两者更为重要。</p><p>我们说“软件工程”，很多人只着眼了“软件”两个字，而忽视了“工程”。软件本身是为解决问题服务的，作为一项工程，我们不单要考虑软件本身的开发环节（注释、文档），还应当考虑软件的运营环节（日志）。世界上没有100%完美的事，不存在没有 bug 的软件系统，一旦软件上线，作为开发人员的我们，就不再能够接触到了，如果系统发生了异常，我们却又对系统运行的状态一无所知，那我们就完全没有办法解决问题。有时候重启一下应用，重启一下系统什么的，也能临时解决，但这只是掩耳盗铃，该来的还会再来，出现过的异常，还会在某一天再次出现。</p><p>这个时候对“日志”的需求便应运而生。通过日志，记录程序在运行过程中的细节，记录发生异常时的现场，我们便能像庖丁解牛一样，对运行中的应用了如指掌了。</p><h1 id="什么时候写日志"><a href="#什么时候写日志" class="headerlink" title="什么时候写日志"></a>什么时候写日志</h1><p>所谓“麻雀虽小五脏俱全”，当我们在建构一个软件系统框架时，所谓的几层结构，所谓的基础模块（通用模块、工具模块、数据访问模块……），包括写日志的模块，这些方法都是不用思考，放之四海而皆准的东西，直接搭建/拼凑起来再说。</p><p>然后呢？我想很多人就开始闷头做功能了——我是指只写功能代码，完成实际的业务逻辑。在做业务功能的时候，由于现代IDE的调试功能很强大，可以一行一行调试，看到运行状态、变量状态等等，所以此时对日志的需求和功用是极度不敏感，觉得此时可有可无。但是一旦业务功能做完了，基于各种各样的理由，工期紧啊，已经完成功能了啊，就直接转测不再继续完善了。其结果是，功能的确完成了，但是搭建的日志模块却几乎没有使用。完成了整个系统，只有不痛不痒的两三行日志，大多都是在搭建框架时写的“应用启动了”，“应用停止了”一类。后面就不用说了，都说回头补设计文档，有多少人补了？都说回头补注释，有多少人补了？既然已经转测了，既然已经上线了，就更不会再回头去写日志了。</p><p>后来，可想而知，当生产环境除了问题，由于没有日志，到底出了什么异常，就两眼一抹黑，没人能知道了。终于，临时解决了问题，意识到日志的重要性之后，急急回头翻出代码来写日志，可是当时做业务的逻辑、思考、陷阱、注意事项等等，都忘记的差不多了，写日志也就只能像看陌生代码一样，看表面，“进入了XXX方法”，“插入数据库完成”，只能写这样的日志了。而在我看来，这样的日志是不够的，这也是我最反感的写日志的方式，完全是为了写而写——也是不足以还原故障现场的，这个后续再说。</p><p>说到此可能你应该也看出来的，什么时候写日志是最佳时机呢？那就是在开发功能代码时。可以说，日志本身也是属于功能代码的一部分，只不过业务功能是给最终客户的，而日志是给运维、开发等用的。此时写日志有一个巨大的好处，那就是因为你是一边在思考，一边在开发，那么此时业务流转、可能的异常都会考虑得很完善，写日志的过程，也是反复思考和校验逻辑的过程，也就自然而然地会在日志中体现更多的关键信息。</p><h1 id="日志是写给谁看的"><a href="#日志是写给谁看的" class="headerlink" title="日志是写给谁看的"></a>日志是写给谁看的</h1><ul><li>当然是给运维了啊，运维能够第一时间看到，比如日志中写端口被占用，马上改个端口就可以了！</li><li>当然是给开发了啊，每次系统发生了异常，运维人员不是直接把日志给开发人员一丢就了事了吗？</li></ul><p>在我看来，不论是运维，还是开发，再广泛地讲，包括白盒测试，都是需要看日志的。日志对不同的人，都有不同的使用价值。运维通过日志了解到程序基本的安装、环境依赖、加载情况、运行态信息等等；开发通过日志还可以了解到程序对业务处理的信息，每个业务的流程、环节、现场状态等等；白盒测试也可以通过日志了解到程序要求的非功能特性等等。</p><h1 id="日志里都要写什么"><a href="#日志里都要写什么" class="headerlink" title="日志里都要写什么"></a>日志里都要写什么</h1><p>明确了“为什么要写日志”和“日志写给谁看的”了之后，要回答“日志里都要写什么”就容易得多了。我们需要从多个侧面来想这个问题。</p><h2 id="考虑使用者"><a href="#考虑使用者" class="headerlink" title="考虑使用者"></a>考虑使用者</h2><p>正如前文说，日志可能面向运维、面向开发等等不同身份的人群。因此日志的内容上，就要为不同的人写入其关切的入不同内容。</p><h2 id="考虑业务"><a href="#考虑业务" class="headerlink" title="考虑业务"></a>考虑业务</h2><p>这里的“业务”可能不一定是最终用户的业务，也可能是中间态的业务逻辑。当业务处理出现问题时，到底是程序的bug造成，还是错误的数据造成，或者是硬件、网络等资源的问题造成，这些都应当能够从日志中分析得出来。</p><p>一段日志，应当能够对故障现场的每一个细节都能在大脑思维里复盘。同时，日志不单单像流水账一样记录程序的运行过程，每行日志还不应该是孤立的，还应当是一个有机的整体，是有上下文的，有头有尾的。比如下面这一段日志：</p><p><img src="/images/log-example.png" alt="log-example"></p><p>日志中记录了一些关键事件以及一些关键信息。比如什么时候侦测到了新消息，有几个Handler可以去处理，每个Handler对应了哪个线程，每个线程对应在处理那种消息；有了某个处理过程的开始，就应当有对应的结束，如果涉及到多线程，还应当能够区分两行同样的日志，对应的不同线程和不同业务单据等等。而不仅仅是“侦测到消息”，“开始处理”，“处理完毕”这种简单的记录。</p><h2 id="考虑运营"><a href="#考虑运营" class="headerlink" title="考虑运营"></a>考虑运营</h2><p>对于业务，一般我们需要后续的分析和运营，日志在这方面也有起到较大作用，因此这部分日志应当考虑以结构化、规范化的方式来记录，从而方便后续对日志进行自动化分析。</p><h2 id="考虑生命周期"><a href="#考虑生命周期" class="headerlink" title="考虑生命周期"></a>考虑生命周期</h2><p>那么日志是越详细越好，记录得越多越好吗？是。也不是。</p><p>每一个软件系统都是有一定的生命周期的。刚测试上线的软件，一般最不稳定，最容易出现各种这样那样的问题，此时日志应当详细些。而长期运行了很久的软件，经过了时间、业务的大量考验，该出现的bug也已经修复得差不多了，几乎不会再出现什么问题，日志应当少一些。</p><p>怎么实现呢？很显然我们不能通过改代码，去掉写日志的代码之后重新发布来做这件事。常规地，我们通过日志分级来应对这个问题。通过不同的日志分级，以及日志输出开关，实时地调整日志输出的细节程度。因此，在我们编写输出日志的代码时，就务必要注意即将输出的日志应当是什么级别。Trace、Debug、Warning、Error、Fault，这些级别，应当对应不同重要程度、不同使用场景的细节。</p><p>考虑了以上三个方面，在开发完成之后，我们还应当切换不同的身份、角度以及配置不同的日志输出级别，来“设身处地”地审视输出的日志文件，是否能够满足要求，这样才能写一份好的日志记录。</p><h1 id="日志的组织形式应该怎样"><a href="#日志的组织形式应该怎样" class="headerlink" title="日志的组织形式应该怎样"></a>日志的组织形式应该怎样</h1><p>既然叫“日志”，那我们通常的组织形式变是以时间为顺序来组织的一系列文件。除此之外，还可以将日志写入数据库、外部分析系统等等。</p><p>考虑“Separation of Concerns”，日志的组织形式，也可以根据上文考虑的不同方面来组织，比如将Error及以上的日志冗余独立记录，将面向运维的启停、加载信息独立记录，将软件运行日志和业务处理日志分开记录等等。关键是“Concern”，编写记录日志的代码时，我们应该对这段代码的功能、重要性、在整个系统的角色有深刻的认知，从而才能以不同的“关切”来考虑日志应该怎么输出，怎么组织。</p><h1 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h1><p>当然，根据软件系统的不同，其日志的侧重点也可能不同。但总体来说，日志就如同飞机的黑匣子一样重要，我们应当重视日志输出的编写工作，而绝非仅仅是完成核心业务代码的编写。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;作为一个软件系统，需要写日志，这是不言而喻的，这是大家都会不假思索地说“那当然”的事。不论是什么语言，写日志的专用框架也不一而足，写到文本的，写到数据库的，写到队列的，写到Redis的等等等等。对于日志的几个级别，Trace、Debug、Warning、Error、Fault，大家也能够如数家珍。但是，有多少人能够回答下面这几个问题呢？&lt;/p&gt;
&lt;p&gt;为什么需要写日志？&lt;br&gt;什么时候写日志？&lt;br&gt;日志是写给谁看的？&lt;br&gt;日志里都要写什么？&lt;br&gt;日志的组织形式应该怎样？&lt;/p&gt;
&lt;p&gt;接下来，我尝试一一地解答这些问题，说说我的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="https://www.udnz.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>创建 VS 2017 的离线安装包</title>
    <link href="https://www.udnz.com/2017/11/15/%E5%88%9B%E5%BB%BA-VS-2017-%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>https://www.udnz.com/2017/11/15/创建-VS-2017-的离线安装包/</id>
    <published>2017-11-15T08:03:02.000Z</published>
    <updated>2017-11-15T08:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下以 VS 的编译工具包为例，实际上 VS IDE 本身也可以如此进行。</p><h1 id="一、下载在线安装文件"><a href="#一、下载在线安装文件" class="headerlink" title="一、下载在线安装文件"></a>一、下载在线安装文件</h1><ol><li>进入下载页：<a href="https://www.visualstudio.com/zh-hans/downloads/" target="_blank" rel="noopener">https://www.visualstudio.com/zh-hans/downloads/</a></li><li>选择最底部的 <code>Other Tools and Frameworks</code> -&gt; <code>Visual Studio 2017</code> 生成工具 并下载。</li><li>以管理员身份运行刚刚下载的在线安装文件，注意带参数：<code>--layout &quot;F:\software\VS2017 BuildTool\Offline&quot; --lang zh-CN</code></li></ol><p><img src="/images/创建 VS 2017 的离线安装包-1.png" alt=""></p><p>此时将开始下载安装所需文件：（如果断电断网或者关闭了下载窗口，没关系，输入命令重头来过，还是会继续下载的）</p><p><img src="/images/创建 VS 2017 的离线安装包-2.png" alt=""></p><a id="more"></a><h1 id="二、离线安装"><a href="#二、离线安装" class="headerlink" title="二、离线安装"></a>二、离线安装</h1><ol><li><p>打开刚刚存放离线文件的路径，然后找到certificates文件夹并打开，依次安装该文件夹下的软件证书。</p></li><li><p>运行离线根目录下的安装程序，各版本位置如下：</p><ul><li>企业版：离线文件存储文件夹\vs_Enterprise.exe</li><li>专业版：离线文件存储文件夹\vs_Professional.exe</li><li>社区版：离线文件存储文件夹\vs_Community.exe</li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/install/create-an-offline-installation-of-visual-studio" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/visualstudio/install/create-an-offline-installation-of-visual-studio</a></p><p><a href="https://www.ithome.com/html/win10/297093.htm" target="_blank" rel="noopener">https://www.ithome.com/html/win10/297093.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下以 VS 的编译工具包为例，实际上 VS IDE 本身也可以如此进行。&lt;/p&gt;
&lt;h1 id=&quot;一、下载在线安装文件&quot;&gt;&lt;a href=&quot;#一、下载在线安装文件&quot; class=&quot;headerlink&quot; title=&quot;一、下载在线安装文件&quot;&gt;&lt;/a&gt;一、下载在线安装文件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;进入下载页：&lt;a href=&quot;https://www.visualstudio.com/zh-hans/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.visualstudio.com/zh-hans/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;选择最底部的 &lt;code&gt;Other Tools and Frameworks&lt;/code&gt; -&amp;gt; &lt;code&gt;Visual Studio 2017&lt;/code&gt; 生成工具 并下载。&lt;/li&gt;
&lt;li&gt;以管理员身份运行刚刚下载的在线安装文件，注意带参数：&lt;code&gt;--layout &amp;quot;F:\software\VS2017 BuildTool\Offline&amp;quot; --lang zh-CN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/创建 VS 2017 的离线安装包-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时将开始下载安装所需文件：（如果断电断网或者关闭了下载窗口，没关系，输入命令重头来过，还是会继续下载的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/创建 VS 2017 的离线安装包-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://www.udnz.com/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>什么是写程序的快感？</title>
    <link href="https://www.udnz.com/2017/04/21/%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%99%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BF%AB%E6%84%9F%EF%BC%9F/"/>
    <id>https://www.udnz.com/2017/04/21/什么是写程序的快感？/</id>
    <published>2017-04-21T05:25:28.000Z</published>
    <updated>2017-04-21T05:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>初中时，在电视里看office学习节目，对电脑无比神往。高二时，第一次开电脑上机课，两个人一台机学开机关机等基本操作，激动得大腿肌肉颤抖，在凳子上坐不住，坐两分钟蹲几分钟马步，实在会发抖，过了十几分钟才坐的住。这就是快感。</p><p>大学时，左边放着个水杯，码一阵代码后开启调试的间歇喝一口水，结果杯里的水喝完了，举着空杯喝一口空气。杯子放下继续码代码，直到第二次…第N次举着空水杯喝空气之后，仍然没有去把杯子续上，然而续水很远吗？不，水壶就在右手边。这就是快感。</p><p>临毕业，自己写一个博客程序，生生推倒重写3次，每一次都是质变。期间一个结构设计问题思考酝酿了很久，最终是半夜做梦突然来了灵感醒来，兴奋的再也睡不着了，马上一个激灵起来实现。整个博客程序完成之后无意看到了head first设计模式，各种我操我操的感叹，尼玛怎么跟我想的一样？这就是快感。</p><a id="more"></a><p>毕业后，特别是做自己的练手项目，无论白天黑夜，总跟自己说，这个问题5分钟就能解决，然而第N个5分钟过去了，需求已经早扩大得无边无际了，还在继续，直到天亮仍然放不下。这就是快感。</p><p>这个清明节，做了两个 visual studio 插件，三天假两天都是凌晨5点睡觉的。刚刚才收到无警告报告（手上的项目每几个小时会上报运营报告，凌晨2点是个check point），一抬头，天就亮了。这就是快感。</p><p>非计算机专业，纯自学一路走来，唯有这快感激励我走到今天，提供我码每一行代码的动力。这么多年来，很多朋友、同事接私单业余做也收益可观，但我只做过两个帮忙性质的单子，是的，十年只两个。摸着良心说，挣钱还真不是我码代码的第一原因——虽然做过的小产品已经很多了，但从来都没有转化为经济。我还买不起房，并不是来体验生活的富二代。</p><p>这种示例还很多…五指朝上地说，没有半句虚言。</p><p>快感，就是着了魔。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初中时，在电视里看office学习节目，对电脑无比神往。高二时，第一次开电脑上机课，两个人一台机学开机关机等基本操作，激动得大腿肌肉颤抖，在凳子上坐不住，坐两分钟蹲几分钟马步，实在会发抖，过了十几分钟才坐的住。这就是快感。&lt;/p&gt;
&lt;p&gt;大学时，左边放着个水杯，码一阵代码后开启调试的间歇喝一口水，结果杯里的水喝完了，举着空杯喝一口空气。杯子放下继续码代码，直到第二次…第N次举着空水杯喝空气之后，仍然没有去把杯子续上，然而续水很远吗？不，水壶就在右手边。这就是快感。&lt;/p&gt;
&lt;p&gt;临毕业，自己写一个博客程序，生生推倒重写3次，每一次都是质变。期间一个结构设计问题思考酝酿了很久，最终是半夜做梦突然来了灵感醒来，兴奋的再也睡不着了，马上一个激灵起来实现。整个博客程序完成之后无意看到了head first设计模式，各种我操我操的感叹，尼玛怎么跟我想的一样？这就是快感。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://www.udnz.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>后端视角的高性能、高可用设计概要</title>
    <link href="https://www.udnz.com/2017/03/23/%E5%90%8E%E7%AB%AF%E8%A7%86%E8%A7%92%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%81%E9%AB%98%E5%8F%AF%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%A6%81/"/>
    <id>https://www.udnz.com/2017/03/23/后端视角的高性能、高可用设计概要/</id>
    <published>2017-03-23T02:31:28.000Z</published>
    <updated>2017-03-23T02:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h1><h2 id="业务方面"><a href="#业务方面" class="headerlink" title="业务方面"></a>业务方面</h2><ul><li>将同步业务转化为异步业务</li><li>业务分级，柔性可用</li><li>减少不必要的数据库请求</li><li>业务解耦，降低关联性</li></ul><h2 id="应用方面"><a href="#应用方面" class="headerlink" title="应用方面"></a>应用方面</h2><ul><li>前端高性能设计（略）</li><li>使用缓存：多级缓存、分布式缓存</li><li>预加载、懒加载、延迟初始化</li><li>尽量减小交互接口数据包大小</li><li>尽量减少序列化、对象克隆</li><li>尽量减少跨进程、跨机器、跨网络访问</li><li>尽量减少在同步业务中使用事务</li><li>尽量减少锁的使用<ul><li>使用乐观锁</li><li>尽量缩小锁的范围</li><li>尽量将低性能逻辑放到锁的范围之外</li></ul></li><li>使用异步逻辑</li><li>队列削峰，先接受，后处理</li><li>尽量复用<ul><li>线程：线程池</li><li>连接：长连接、连接池</li></ul></li></ul><a id="more"></a><h2 id="数据库方面"><a href="#数据库方面" class="headerlink" title="数据库方面"></a>数据库方面</h2><ul><li>数据库读写分离</li><li>优化 SQL 语句、表结构、索引等</li></ul><h2 id="硬件及部署方面"><a href="#硬件及部署方面" class="headerlink" title="硬件及部署方面"></a>硬件及部署方面</h2><ul><li>负载均衡</li><li>分离应用服务器和数据库服务器</li></ul><h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><h2 id="业务方面-1"><a href="#业务方面-1" class="headerlink" title="业务方面"></a>业务方面</h2><ul><li>快速拒绝：尽早拒绝不符合策略的请求</li><li>灰度推广、灰度上线：按部门、分时段</li><li>服务分级，柔性可用</li></ul><h2 id="应用方面-1"><a href="#应用方面-1" class="headerlink" title="应用方面"></a>应用方面</h2><ul><li>自动重试机制<ul><li>单点重试</li><li>多点重试</li></ul></li><li>超时机制</li><li>幂等设计</li><li>无状态设计</li><li>容错机制<ul><li>登录时，创建 Staff 抛出“该员工不存在”</li><li></li></ul></li><li>提高编码质量，减少异常</li><li>完善的测试准出<ul><li>功能</li><li>性能</li></ul></li></ul><h2 id="运维方面"><a href="#运维方面" class="headerlink" title="运维方面"></a>运维方面</h2><ul><li>状态报告及预警<ul><li>KeepAlive</li></ul></li><li>资源报告及预警<ul><li>CPU、内存、硬盘、IO</li></ul></li><li>业务报告及预警<ul><li>QPS、TPS、SQL查询</li><li>PV、UV</li></ul></li><li>日志</li></ul><h2 id="硬件及部署方面-1"><a href="#硬件及部署方面-1" class="headerlink" title="硬件及部署方面"></a>硬件及部署方面</h2><ul><li>核心业务与非核心业务分开部署</li><li>负载均衡、双机热备、主备</li><li>异地多活</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>先思考，后动手。多思考，少蛮干。</li><li>严格要求自己，将出手的产品当做孩子一样对待</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高性能&quot;&gt;&lt;a href=&quot;#高性能&quot; class=&quot;headerlink&quot; title=&quot;高性能&quot;&gt;&lt;/a&gt;高性能&lt;/h1&gt;&lt;h2 id=&quot;业务方面&quot;&gt;&lt;a href=&quot;#业务方面&quot; class=&quot;headerlink&quot; title=&quot;业务方面&quot;&gt;&lt;/a&gt;业务方面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将同步业务转化为异步业务&lt;/li&gt;
&lt;li&gt;业务分级，柔性可用&lt;/li&gt;
&lt;li&gt;减少不必要的数据库请求&lt;/li&gt;
&lt;li&gt;业务解耦，降低关联性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用方面&quot;&gt;&lt;a href=&quot;#应用方面&quot; class=&quot;headerlink&quot; title=&quot;应用方面&quot;&gt;&lt;/a&gt;应用方面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前端高性能设计（略）&lt;/li&gt;
&lt;li&gt;使用缓存：多级缓存、分布式缓存&lt;/li&gt;
&lt;li&gt;预加载、懒加载、延迟初始化&lt;/li&gt;
&lt;li&gt;尽量减小交互接口数据包大小&lt;/li&gt;
&lt;li&gt;尽量减少序列化、对象克隆&lt;/li&gt;
&lt;li&gt;尽量减少跨进程、跨机器、跨网络访问&lt;/li&gt;
&lt;li&gt;尽量减少在同步业务中使用事务&lt;/li&gt;
&lt;li&gt;尽量减少锁的使用&lt;ul&gt;
&lt;li&gt;使用乐观锁&lt;/li&gt;
&lt;li&gt;尽量缩小锁的范围&lt;/li&gt;
&lt;li&gt;尽量将低性能逻辑放到锁的范围之外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用异步逻辑&lt;/li&gt;
&lt;li&gt;队列削峰，先接受，后处理&lt;/li&gt;
&lt;li&gt;尽量复用&lt;ul&gt;
&lt;li&gt;线程：线程池&lt;/li&gt;
&lt;li&gt;连接：长连接、连接池&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="https://www.udnz.com/tags/Architecture/"/>
    
      <category term="高可用" scheme="https://www.udnz.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="高性能" scheme="https://www.udnz.com/tags/%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
