<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UDNZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.udnz.com/"/>
  <updated>2019-01-23T11:39:55.000Z</updated>
  <id>https://www.udnz.com/</id>
  
  <author>
    <name>Austin Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Using portable commands like zip/tar on Windows</title>
    <link href="https://www.udnz.com/2019/01/23/Using-portable-commands-like-zip-tar-on-Windows/"/>
    <id>https://www.udnz.com/2019/01/23/Using-portable-commands-like-zip-tar-on-Windows/</id>
    <published>2019-01-23T11:39:55.000Z</published>
    <updated>2019-01-23T11:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Windows-上使用-Mac-Linux-上的-zip-tar-等命令"><a href="#在-Windows-上使用-Mac-Linux-上的-zip-tar-等命令" class="headerlink" title="在 Windows 上使用 Mac/Linux 上的 zip/tar 等命令"></a>在 Windows 上使用 Mac/Linux 上的 zip/tar 等命令</h1><p>开发时时而在 MAC、Linux 上，时而在 Windows 上，脚本执行环境无法统一是个大问题。所幸我们使用的 Git 中带有 MINGW32（或安装 CYGWIN），这里面已经有很多的非 Windows 平台命令了。</p><p>但是在使用过程中，还是有一些命令是缺失的，比如 <code>zip</code>，此时我们可以自行下载他们（<a href="https://sourceforge.net/projects/gnuwin32/files/" target="_blank" rel="noopener">下载地址</a>），下载之后，将可执行的 exe 文件和相关依赖文件，放到 MING32/CYGWIN 的 bin 目录中即可。</p><p>附：</p><ul><li>Git 的 MINGW32 默认安装目录：C:\Program Files (x86)\Git\mingw32\bin</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在-Windows-上使用-Mac-Linux-上的-zip-tar-等命令&quot;&gt;&lt;a href=&quot;#在-Windows-上使用-Mac-Linux-上的-zip-tar-等命令&quot; class=&quot;headerlink&quot; title=&quot;在 Windows 上使用 Ma
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将代码从 SVN 迁移到 GIT 并保留提交记录</title>
    <link href="https://www.udnz.com/2018/12/04/%E5%B0%86%E4%BB%A3%E7%A0%81%E4%BB%8E-SVN-%E8%BF%81%E7%A7%BB%E5%88%B0-GIT-%E5%B9%B6%E4%BF%9D%E7%95%99%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.udnz.com/2018/12/04/将代码从-SVN-迁移到-GIT-并保留提交记录/</id>
    <published>2018-12-04T09:25:44.000Z</published>
    <updated>2018-12-04T09:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步：用户映射"><a href="#第一步：用户映射" class="headerlink" title="第一步：用户映射"></a>第一步：用户映射</h1><p>创建用户映射 （例如 users.txt） ，将 SVN 用户和 Git 用户对应起来，为保留提交记录做准备。</p><p>进入 SVN 的目录，执行如下命令，注意其中 <code>$1\@tencent.com</code> 部分应当替换为你实际的映射关系。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ svn <span class="built_in">log</span> --xml | grep -P <span class="string">"^&lt;author"</span> | sort -u | \</span><br><span class="line">    perl -pe <span class="string">'s/&lt;author&gt;(.*?)&lt;\/author&gt;/$1 = $1 &lt;$1\@tencent.com&gt;/'</span> &gt; users.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"></span><br><span class="line">$ svn <span class="built_in">log</span> -q svn+ssh://your/svn/path | \</span><br><span class="line">    awk -F <span class="string">'|'</span> <span class="string">'/^r/ &#123;sub("^ ", "", $2); sub(" $", "", $2); print $2" = "$2" &lt;"$2"@tencent.com&gt;"&#125;'</span> | \</span><br><span class="line">    sort -u &gt; users.txt</span><br></pre></td></tr></table></figure><p>注意，生成的 users.txt 文件应当以 ANSI 编码保存，并且使用 CRLF 换行，您可以使用记事本另存为的功能选择该编码。</p><h1 id="第二步：克隆代码"><a href="#第二步：克隆代码" class="headerlink" title="第二步：克隆代码"></a>第二步：克隆代码</h1><p>创建一个用于存放 Git 本地仓库的文件夹，如：<code>E:/git</code>，进入该文件夹，执行 <code>clone</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /e/git</span><br><span class="line">git svn <span class="built_in">clone</span> svn+ssh://your/svn/path -r 2000:HEAD --no-metadata --authors-file=users.txt --trunk=.</span><br></pre></td></tr></table></figure><p>该步骤除了 clone 代码之外，还将导入所有的提交记录，执行较慢，需要耐心等待。中途出现找不到作者的情况时，可以修改 <code>users.txt</code> 补充该作者，重新再执行 <code>git svn clone</code> 命令。</p><p>详细命令参数，请参考 <code>git svn help clone</code>。</p><p>执行完成之后，会在 <code>E:/git</code> 目录下创建以你 SVN path 最后一节为名称的子目录，可以进入该目录下的 <code>.git</code> 文件夹，执行 <code>git log</code> 命令查看提交记录。</p><h1 id="第三步：提交到-GIT"><a href="#第三步：提交到-GIT" class="headerlink" title="第三步：提交到 GIT"></a>第三步：提交到 GIT</h1><p>这个步骤和常规地创建 GIT 仓库没有任何区别，直接添加远程仓库地址，push 即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin http://your/remote/git/path.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>至此，代码及提交记录从 SVN 迁移到 GIT 的工作全部完成。</p><p>参考链接：</p><ul><li><a href="https://gitee.com/progit/8-Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F.html#8.2-%E8%BF%81%E7%A7%BB%E5%88%B0-Git" target="_blank" rel="noopener">https://gitee.com/progit/8-Git-%E4%B8%8E%E5%85%B6%E4%BB%96%E7%B3%BB%E7%BB%9F.html#8.2-%E8%BF%81%E7%A7%BB%E5%88%B0-Git</a></li><li><a href="https://www.lovelucy.info/codebase-from-svn-to-git-migration-keep-commit-history.html" target="_blank" rel="noopener">https://www.lovelucy.info/codebase-from-svn-to-git-migration-keep-commit-history.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一步：用户映射&quot;&gt;&lt;a href=&quot;#第一步：用户映射&quot; class=&quot;headerlink&quot; title=&quot;第一步：用户映射&quot;&gt;&lt;/a&gt;第一步：用户映射&lt;/h1&gt;&lt;p&gt;创建用户映射 （例如 users.txt） ，将 SVN 用户和 Git 用户对应起来，为保
      
    
    </summary>
    
    
      <category term="SVN" scheme="https://www.udnz.com/tags/SVN/"/>
    
      <category term="GIT" scheme="https://www.udnz.com/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>【译】Go 语言实践：编写可维护的程序的建议</title>
    <link href="https://www.udnz.com/2018/10/27/%E3%80%90%E8%AF%91%E3%80%91Go-%E8%AF%AD%E8%A8%80%E5%AE%9E%E8%B7%B5%EF%BC%9A%E7%BC%96%E5%86%99%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BB%BA%E8%AE%AE/"/>
    <id>https://www.udnz.com/2018/10/27/【译】Go-语言实践：编写可维护的程序的建议/</id>
    <published>2018-10-27T15:08:18.000Z</published>
    <updated>2018-11-25T10:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>译者注</strong></p><p>本文为 <strong>QCon 2018 上海站</strong>主题演讲嘉宾、Heptio 资深工程师、著名 Go 语言专家 <a href="https://2018.qconshanghai.com/speaker/2503" target="_blank" rel="noopener">David Cheney</a> 关于 Go 语言实践的英文分享。为方便大家阅读，在此由 <a href="https://www.udnz.com">Austin Luo</a> 翻译为中文，在文中难以理解之处，也特别增加了译者的理解说明。翻译水平有限，如有偏颇之处，烦请联系我（<a href="mailto:uonun@163.com" target="_blank" rel="noopener">uonun@163.com</a>）更正。转载请注明出处，保留本节译者注。</p><hr><p><strong>目录</strong></p><ul><li>指导原则<ul><li>简单性</li><li>可读性</li><li>生产率</li></ul></li><li>标识符<ul><li>选择清晰的名称，而不是简洁的名称</li><li>标识符长度</li><li>命名中不要包含所属类型的名称</li><li>使用一致的命名风格</li><li>使用一致的声明风格</li><li>成为团队合作者</li></ul></li><li>代码注释<ul><li>变量和常量上的注释应当描述它的内容，而非目的</li><li>总是为公开符号写文档说明</li></ul></li><li>包的设计<ul><li>一个好的包从它的名称开始</li><li>避免将包命名为 base、common、util</li><li>快速返回，而不是深层嵌套</li><li>让零值变得有意义</li><li>避免包级别的状态</li></ul></li><li>项目结构<ul><li>考虑更少，更大的包</li><li>确保 main 包越小越好</li></ul></li><li>API 设计<ul><li>设计难以被误用的 API</li><li>针对默认用例设计 API</li><li>让函数自身定义它所需的行为</li></ul></li><li>错误处理<ul><li>通过消除错误来消除错误处理</li><li>错误只处理一次</li></ul></li><li>并发<ul><li>保持自己忙碌，否则自己做</li><li>将并发留给调用者</li><li>不要启动一个永不停止的协程</li></ul></li></ul><p><strong>引言</strong></p><p>接下来这两场我将给大家一些编写 Go 代码的最佳实践。</p><p>今天这是一个研讨会风格的演讲，我会摒弃那些绚丽的 PPT，而是使用您们可以直接带走的文档。</p><blockquote><p>您可以在这里找到这个演讲最新的在线版本：<br><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html" target="_blank" rel="noopener">https://dave.cheney.net/practical-go/presentations/qcon-china.html</a></p></blockquote><a id="more"></a><h1 id="指导原则"><a href="#指导原则" class="headerlink" title="指导原则"></a>指导原则</h1><p>我们要谈论在一个编程语言中的最佳实践，那么我们首先应该明确什么是“最佳”。如果您们听了我昨天那场讲演的话，您一定看到了来自 Go 团队的 Russ Cox 讲的一句话：</p><blockquote><p>软件工程，是您在编程过程中增加了工期或者开发人员之后发生的那些事。 — Russ Cox</p></blockquote><p>Russ 是在阐述软件“编程”和软件“工程”之间的区别，前者是您写的程序，而后者是一个让更多的人长期使用的产品。软件工程师会来来去去地更换，团队也会成长或者萎缩，需求也会发生变化，新的特性也会增加，bug 也会被修复，这就是软件“工程”的本质。</p><p>我可能是现场最早的 Go 语言用户，但与其说我的主张来自我的资历，不如说我今天讲的是真实来自于 Go 语言本身的指导原则，那就是：</p><ol><li>简单性</li><li>可读性</li><li>生产率</li></ol><blockquote><p>您可能已经注意到，我并没有提<strong>性能</strong>或者<strong>并发性</strong>。实际上有不少的语言执行效率比 Go 还要高，但它们一定没有 Go 这么简单。有些语言也以<strong>并发性</strong>为最高目标，但它们的可读性和生产率都不好。</p></blockquote><blockquote><p><strong>性能</strong>和<strong>并发性</strong>都很重要，但它们不如<strong>简单性</strong>、<strong>可读性</strong>和<strong>生产率</strong>那么重要。</p></blockquote><h2 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h2><p>为什么我们要力求简单，为什么简单对 Go 语言编程如此重要？</p><p>我们有太多的时候感叹“这段代码我看不懂”，是吧？我们害怕修改一丁点代码，生怕这一点修改就导致其他您不懂的部分出问题，而您又没办法修复它。</p><p>这就是复杂性。复杂性把可读的程序变得不可读，复杂性终结了很多软件项目。</p><p>简单性是 Go 的最高目标。无论我们写什么程序，我们都应该能一致认为它应当简单。</p><h2 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h2><blockquote><p>Readability is essential for maintainability. — Mark Reinhold, JVM language summit 2018<br>可读性对于可维护性至关重要。</p></blockquote><p>为什么 Go 代码的可读性如此重要？为什么我们应该力求可读性？</p><blockquote><p>Programs must be written for people to read, and only incidentally for machines to execute. — Hal Abelson and Gerald Sussman, Structure and Interpretation of Computer Programs<br>程序应该是写来被人阅读的，而只是顺带可以被机器执行。</p></blockquote><p>可阅读性对所有的程序——不仅仅是 Go 程序，都是如此之重要，是因为程序是人写的并且给其他人阅读的，事实上被机器所执行只是其次。</p><p>代码被阅读的次数，远远大于被编写的次数。一段小的代码，在它的整个生命周期，可能被阅读成百上千次。</p><blockquote><p>The most important skill for a programmer is the ability to effectively communicate ideas. — Gastón Jorquera <a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">^1</a><br>程序员最重要的技能是有效沟通想法的能力。</p></blockquote><p>可读性是弄清楚一个程序是在做什么事的关键。如果您都不知道这个程序在做什么，您如何去维护这个程序？如果一个软件不可用被维护，那就可能被重写，并且这也可能是您公司最后一次在 GO 上面投入了。</p><p>如果您仅仅是为自己个人写一个程序，可能这个程序是一次性的，或者使用这个程序的人也只有您一个，那您想怎样写就怎样写。但如果是多人合作贡献的程序，或者因为它解决人们的需求、满足某些特性、运行它的环境会变化，而在一个很长的时间内被很多人使用，那么程序的<strong>可维护性</strong>则必须成为目标。</p><p>编写可维护的程序的第一步，那就是确保代码是可读的。</p><h2 id="生产率"><a href="#生产率" class="headerlink" title="生产率"></a>生产率</h2><blockquote><p>Design is the art of arranging code to work today, and be changeable forever. — Sandi Metz<br>设计是一门艺术，要求编写的代码当前可用，并且以后仍能被改动。</p></blockquote><p>我想重点阐述的最后一个基本原则是<strong>生产率</strong>。开发者的生产率是一个复杂的话题，但归结起来就是：为了有效的工作，您因为一些工具、外部代码库而浪费了多少时间。Go 程序员应该感受得到，他们在工作中可以从很多东西中受益了。（Austin Luo：言下之意是，Go 的工具集和基础库完备，很多东西触手可得。）</p><p>有一个笑话是说，Go 是在 C++ 程序编译过程中被设计出来的。快速的编译是 Go 语言用以吸引新开发者的关键特性。编译速度仍然是一个不变的战场，很公平地说，其他语言需要几分钟才能编译，而 Go 只需要几秒即可完成。这有助于 Go 开发者拥有动态语言开发者一样的高效，但却不会面临那些动态语言本身可靠性的问题。</p><p>Go 开发者意识到代码是写来被阅读的，并且把<strong>阅读</strong>放在<strong>编写</strong>之上。Go 致力于从工具集、习惯等方面强制要求代码必须编写为一种特定样式，这消除了学习项目特定术语的障碍，同时也可以仅仅从“看起来”不正确即可帮助开发者发现潜在的错误。</p><p>Go 开发者不会整日去调试那些莫名其妙的编译错误。他们也不会整日浪费时间在复杂的构建脚本或将代码部署到生产中这事上。更重要的是他们不会花时间在尝试搞懂同事们写的代码是什么意思这事上。</p><p>当 Go 语言团队在谈论一个语言必须扩展时，他们谈论的就是生产率。</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>我们要讨论的第一个议题是标识符。标识符是一个名称的描述词，这个名称可以是一个变量的名称、一个函数的名称、一个方法的名称、一个类型的名称或者一个包的名称等等。</p><blockquote><p>Poor naming is symptomatic of poor design. — Dave Cheney<br>拙劣的名称是拙劣的设计的表征。</p></blockquote><p>鉴于 Go 的语法限制，我们为程序中的事物选择的名称对我们程序的可读性产生了过大的影响。良好的可读性是评判代码质量的关键，因此选择好名称对于 Go 代码的可读性至关重要。</p><h2 id="选择清晰的名称，而不是简洁的名称"><a href="#选择清晰的名称，而不是简洁的名称" class="headerlink" title="选择清晰的名称，而不是简洁的名称"></a>选择清晰的名称，而不是简洁的名称</h2><blockquote><p>Obvious code is important. What you can do in one line you should do in three. — Ukiah Smith<br>代码要明确这很重要，您在一行中能做的事，应该拆到三行里做。</p></blockquote><p>Go 不是专注于将代码精巧优化为一行的那种语言，Go 也不是致力于将代码精炼到最小行数的语言。我们并不追求源码在磁盘上占用的空间更少，也不关心录入代码需要多长时间。</p><blockquote><p>Good naming is like a good joke. If you have to explain it, it’s not funny. — Dave Cheney<br>好的名称就如同一个好的笑话，如果您需要去解释它，那它就不搞笑了。</p></blockquote><p>这个清晰度的关键就是我们为 Go 程序选择的标识符。让我们来看看一个好的名称应当具备什么吧：</p><ul><li><strong>好的名称是简洁的。</strong>一个好的名称未必是尽可能短的，但它肯定不会浪费任何无关的东西在上面，好名字具有高信噪比。</li><li><strong>好的名称是描述性的。</strong>一个好的名称应该描述一个变量或常量的使用，而非其内容。一个好的命名应该描述函数的结果或一个方法的行为，而不是这个函数或方法本身的操作。一个好的名称应该描述一个包的目的，而不是包的内容。名称描述的东西越准确，名称越好。</li><li><strong>好的名称是可预测的。</strong>您应该能够从名称中推断出它的使用方式，这是选择描述性名称带来的作用，同时也遵循了传统。Go 开发者在谈论<strong>惯用语</strong>时，即是说的这个。</li></ul><p>接下来让我们深入地讨论一下。</p><h2 id="标识符长度"><a href="#标识符长度" class="headerlink" title="标识符长度"></a>标识符长度</h2><p>有时候人们批评 Go 风格推荐短变量名。正如 Rob Pike 所说，“Go 开发者想要的是合适长度的标识符”。<a href="https://gaston.life/books/effective-programming/" target="_blank" rel="noopener">^1</a></p><p>Andrew Gerrand 建议通过使用更长的标识符向读者暗示它们具有更高的重要性。</p><blockquote><p>The greater the distance between a name’s declaration and its uses, the longer the name should be. — Andrew Gerrand <a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">^2</a><br>标识符的声明和使用间隔越远，名称的长度就应当越长。</p></blockquote><p>据此，我们可以归纳一些指导意见：</p><ul><li>短变量名称在声明和上次使用之间的距离很短时效果很好。</li><li>长变量名需要证明其不同的合理性：越长的变量名，越需要更多的理由来证明其合理。冗长、繁琐的名称与他们在页面上的权重相比，携带的信息很低。</li><li>不要在变量名中包含其类型的名称。</li><li>常量需要描述其存储的值的含义，而不是怎么使用它。</li><li>单字母变量可用于循环或逻辑分支，单词变量可用于参数或返回值，多词短语可用于函数和包这一级的声明。</li><li>单词可用于方法、接口和包</li><li>请记住，包的命名将成为用户引用它时采用的名称，确保这个名称更有意义。</li></ul><p>让我们来看一个示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AverageAge returns the average age of people.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AverageAge</span><span class="params">(people []Person)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(people) == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count, sum <span class="keyword">int</span></span><br><span class="line">  <span class="keyword">for</span> _, p := <span class="keyword">range</span> people &#123;</span><br><span class="line">    sum += p.Age</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum / count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，范围变量<code>p</code>在定义之后只在接下来的一行使用。<code>p</code>在整页源码和函数执行过程中都只生存一小段时间。对<code>p</code>感兴趣的读者只需要查看两行代码即可。</p><p>与之形成对比的是，变量<code>people</code>在函数参数中定义，并且存在了 7 行，同理的还有<code>sum</code>和<code>count</code>，这他们使用了更长的名称，读者必须关注更广泛的代码行。</p><p>我也可以使用<code>s</code>而不是<code>sum</code>，用<code>c</code>（或<code>n</code>）而不是<code>count</code>，但这会将整个程序中的变量都聚集在相同的重要性上。我也可以使用<code>p</code>而不是<code>people</code>，但是这样又有一个问题，那就是<code>for ... range</code>循环中的变量又用什么？单数的 <code>person</code> 看起来也很奇怪，生存时间极短命名却比导出它的那个值更长。</p><blockquote><p>Austin Luo：这里说的是，若数组<code>people</code>用变量名<code>p</code>，那么从数组中获取的每一个元素取名就成了问题，比如用<code>person</code>，即使使用<code>person</code>看起来也很奇怪，一方面是单数，一方面<code>person</code>的生存周期只有两行（很短），命名比生存周期更长的<code>p</code>（<code>people</code>）还长了。</p></blockquote><blockquote><p>小窍门：跟使用空行在文档中分段一样，使用空行将函数执行过程分段。在函数<code>AverageAge</code>中有按顺序的三个操作。第一个是先决条件，检查当<code>people</code>为空时我们不会除零，第二个是累加总和和计数，最后一个是计算平均数。</p></blockquote><h3 id="上下文是关键"><a href="#上下文是关键" class="headerlink" title="上下文是关键"></a>上下文是关键</h3><p>绝大多数的命名建议都是根据上下文的，意识到这一点很重要。我喜欢称之为原则，而不是规则。</p><p><code>i</code>和<code>index</code> 这两个标识符有什么不同？我们很难确切地说其中一个比另一个好，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="built_in">len</span>(s); index++ &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的可读性，基本上都会认为比下面这段要强：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我表示不赞同。因为无论是<code>i</code>还是<code>index</code>，都是限定于<code>for</code>循环体的，更冗长的命名，并没有让我们<strong>更容易</strong>地理解这段代码。</p><p>话说回来，下面两段代码那一段可读性更强呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SNMP)</span> <span class="title">Fetch</span><span class="params">(oid []<span class="keyword">int</span>, index <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SNMP)</span> <span class="title">Fetch</span><span class="params">(o []<span class="keyword">int</span>, i <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>oid</code>是<code>SNMP</code>对象 ID 的缩写，因此将其略写为 <code>o</code> 意味着开发者必须将他们在文档中看到的常规符号转换理解为代码中更短的符号。同样地，将<code>index</code>简略为<code>i</code>，减少了其作为<code>SNMP</code>消息的索引的含义。</p><blockquote><p>小窍门：在参数声明中不要混用长、短不同的命名风格。</p></blockquote><h2 id="命名中不要包含所属类型的名称"><a href="#命名中不要包含所属类型的名称" class="headerlink" title="命名中不要包含所属类型的名称"></a>命名中不要包含所属类型的名称</h2><p>正如您给宠物取名一样，您会给狗取名“汪汪”，给猫取名为“咪咪”，但不会取名为“汪汪狗”、“咪咪猫”。出于同样的原因，您也不应在变量名称中包含其类型的名称。</p><p>变量命名应该体现它的内容，而不是类型。我们来看下面这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> usersMap <span class="keyword">map</span>[<span class="keyword">string</span>]*User</span><br></pre></td></tr></table></figure><p>这样的命名有什么好处呢？我们能知道它是个 map，并且它与<code>*User</code>类型有关，这可能还不错。但是 Go 作为一种静态类型语言，它并不会允许我们在需要标量变量的地方意外地使用到这个变量，因此<code>Map</code>后缀实际上是多余的。</p><p>现在我们来看像下面这样定义变量又是什么情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">  companiesMap <span class="keyword">map</span>[<span class="keyword">string</span>]*Company</span><br><span class="line">  productsMap <span class="keyword">map</span>[<span class="keyword">string</span>]*Products</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>现在这个范围内我们有了三个 map 类型的变量了：<code>usersMap</code>，<code>companiesMap</code>，以及 <code>productsMap</code>，所有这些都从字符串映射到了不同的类型。我们知道它们都是 map，我们也知道它们的 map 声明会阻止我们使用一个代替另一个——如果我们尝试在需要<code>map[string]*User</code>的地方使用<code>companiesMap</code>，编译器将抛出错误。在这种情况下，很明显<code>Map</code>后缀不会提高代码的清晰度，它只是编程时需要键入的冗余内容。（Austin Luo：陈旧的思维方式）</p><p>我的建议是，避免给变量加上与类型相关的任何后缀。</p><blockquote><p>小窍门：如果<code>users</code>不能描述得足够清楚，那<code>usersMap</code>也一定不能。</p></blockquote><p>这个建议也适用于函数参数，比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteConfig</span><span class="params">(w io.Writer, config *Config)</span></span></span><br></pre></td></tr></table></figure><p>将<code>*Config</code>参数命名为<code>config</code>是多余的，我们知道它是个<code>*Config</code>，函数签名上写得很清楚。</p><p>在这种情况建议考虑<code>conf</code>或者<code>c</code>——如果生命周期足够短的话。</p><p>如果在一个范围内有超过一个<code>*Config</code>，那命名为<code>conf1</code>、<code>conf2</code>的描述性就比<code>original</code>、<code>updated</code>更差，而且后者比前者更不容易出错。</p><blockquote><p>NOTE：<strong>不要让包名占用了更适合变量的名称。</strong><br>导入的标识符是会包含它所属包的名称的。<br>例如我们很清楚<code>context.Context</code>是包<code>context</code>中的类型<code>Context</code>。这就导致我们在我们自己的包里，再也无法使用<code>context</code>作为变量或类型名了。<br><code>func WriteLog(context context.Context, message string)</code><br>这无法编译。这也是为什么我们通常将<code>context.Context</code>类型的变量命名为<code>ctx</code>的原因，如：<br><code>func WriteLog(ctx context.Context, message string)</code></p></blockquote><h2 id="使用一致的命名风格"><a href="#使用一致的命名风格" class="headerlink" title="使用一致的命名风格"></a>使用一致的命名风格</h2><p>一个好名字的另一个特点是它应该是可预测的。阅读者应该可以在第一次看到的时候就能够理解它如何使用。如果遇到一个约定俗称的名字，他们应该能够认为和上次看到这个名字一样，一直以来它都没有改变意义。</p><p>例如，如果您要传递一个数据库句柄，请确保每次的参数命名都是一样的。与其使用<code>d *sql.DB</code>，<code>dbase *sql.DB</code>，<code>DB *sql.DB</code>和<code>database *sql.DB</code>，还不如都统一为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db *sql.DB</span><br></pre></td></tr></table></figure><p>这样做可以增进熟悉度：如果您看到<code>db</code>，那么您就知道那是个<code>*sql.DB</code>，并且已经在本地定义或者由调用者提供了。</p><p>对于方法接收者也类似，在类型的每个方法中使用相同的接收者名称，这样可以让阅读者在跨方法阅读和理解时更容易主观推断。</p><blockquote><p>Austin Luo：“接收者”是一种特殊类型的参数。<a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">^2</a><br>比如<code>func (b *Buffer) Read(p []byte) (n int, err error)</code>，它通常只用一到两个字母来表示，但在不同的方法中仍然应当保持一致。</p></blockquote><blockquote><p>注意：Go 中对接收者的短命名规则惯例与目前提供的建议不一致。这只是早期做出的选择之一，并且已经成为首选的风格，就像使用<code>CamelCase</code>而不是<code>snake_case</code>一样。</p></blockquote><blockquote><p>小窍门：Go 的命名风格规定接收器具有单个字母名称或其派生类型的首字母缩略词。有时您可能会发现接收器的名称有时会与方法中参数的名称冲突，在这种情况下，请考虑使参数名称稍长，并且仍然不要忘记一致地使用这个新名称。</p></blockquote><p>最后，某些单字母变量传统上与循环和计数有关。例如，<code>i</code>，<code>j</code>，和<code>k</code>通常是简单的<code>for</code>循环变量。<code>n</code>通常与计数器或累加器有关。 <code>v</code>通常是某个值的简写，<code>k</code>通常用于映射的键，<code>s</code>通常用作<code>string</code>类型参数的简写。</p><p>与上面<code>db</code>的例子一样，程序员期望<code>i</code>是循环变量。如果您保证<code>i</code>始终是一个循环变量——而不是在<code>for</code>循环之外的情况下使用，那么当读者遇到一个名为<code>i</code>或者<code>j</code>的变量时，他们就知道当前还在循环中。</p><blockquote><p>小窍门：如果您发现在嵌套循环中您都使用完<code>i</code>，<code>j</code>，<code>k</code>了，那么很显然这已经到了将函数拆得更小的时候了。</p></blockquote><h2 id="使用一致的声明风格"><a href="#使用一致的声明风格" class="headerlink" title="使用一致的声明风格"></a>使用一致的声明风格</h2><p>Go 中至少有 6 种声明变量的方法（Austin Luo：作者说了 6 种，但只列了 5 种）</p><ul><li><code>var x int = 1</code></li><li><code>var x = 1</code></li><li><code>var x int; x = 1</code></li><li><code>var x = int(1)</code></li><li><code>x := 1</code></li></ul><p>我敢肯定还有更多我没想到的。这是 Go 的设计师认识到可能是一个错误的地方，但现在改变它为时已晚。有这么多不同的方式来声明变量，那么我们如何避免每个 Go 程序员选择自己个性独特的声明风格呢？</p><p>我想展示一些在我自己的程序里声明变量的建议。这是我尽可能使用的风格。</p><ul><li><p><strong>只声明，不初始化时，使用<code>var</code>。</strong>在声明之后，将会显式地初始化时，使用<code>var</code>关键字。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players <span class="keyword">int</span>    <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> things []Thing <span class="comment">// an empty slice of Things</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing Thing    <span class="comment">// empty Thing struct</span></span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure><p><code>var</code>关键字表明这个变量被<strong>有意地</strong>声明为该类型的零值。这也与在包级别声明变量时使用<code>var</code>而不是短声明语法（Austin Luo：<code>:=</code>）的要求一致——尽管我稍后会说您根本不应该使用包级变量。</p></li><li><p><strong>既声明，也初始化时，使用<code>:=</code>。</strong>当同时要声明和初始化变量时，换言之我们不让变量隐式地被初始化为零值时，我建议使用短声明语法的形式。这使得读者清楚地知道<code>:=</code>左侧的变量是有意被初始化的。</p></li></ul><p>为解释原因，我们回头再看看上面的例子，但这一次每个变量都被有意初始化了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> things []Thing = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing *Thing = <span class="built_in">new</span>(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><p>第一个和第三个示例中，因为 Go 没有从一种类型到另一种类型的自动转换，赋值运算符左侧和右侧的类型必定是一致的。编译器可以从右侧的类型推断出左侧所声明变量的类型。对于这个示例可以更简洁地写成这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> things []Thing = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thing = <span class="built_in">new</span>(Thing)</span><br><span class="line">json.Unmarshall(reader, thing)</span><br></pre></td></tr></table></figure><p>由于<code>0</code>是<code>players</code>的零值，因此为<code>players</code>显式地初始化为<code>0</code>就显得多余了。所以为了更清晰地表明我们使用了零值，应该写成这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> players <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>那第二条语句呢？我们不能忽视类型写成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> things = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>因为<code>nil</code>根本就没有类型<a href="https://talks.golang.org/2014/names.slide#4" target="_blank" rel="noopener">^2</a>。相反，我们有一个选择，我们是否希望切片的零值？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> things []Thing</span><br></pre></td></tr></table></figure><p>或者我们是否希望创建一个没有元素的切片？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> things = <span class="built_in">make</span>([]Thing, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>如果我们想要的是后者，这不是个切片类型的零值，那么我们应该使用短声明语法让阅读者很清楚地明白我们的选择：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">things := <span class="built_in">make</span>([]Thing, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这告诉了读者我们显式地初始化了<code>things</code>。</p><p>再来看看第三个声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thing = <span class="built_in">new</span>(Thing)</span><br></pre></td></tr></table></figure><p>这既显式地初始化了变量，也引入了 Go 程序员不喜欢而且很不常用的<code>new</code>关键字。如果我们遵循短命名语法的建议，那么这句将变成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thing := <span class="built_in">new</span>(Thing)</span><br></pre></td></tr></table></figure><p>这很清楚地表明，<code>thing</code>被显式地初始化为<code>new(Thing)</code>的结果——一个指向<code>Thing</code>的指针——但仍然保留了我们不常用的<code>new</code>。我们可以通过使用<strong>紧凑结构初始化的形式</strong>来解决这个问题，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thing := &amp;Thing&#123;&#125;</span><br></pre></td></tr></table></figure><p>这和<code>new(Thing)</code>做了同样的事——也因此很多 Go 程序员对这种重复感觉不安。不过，这一句仍然意味着我们为<code>thing</code>明确地初始化了一个<code>Thing{}</code>的指针——一个<code>Thing</code>的零值。</p><p>在这里，我们应该意识到，<code>thing</code>被初始化为了零值，并且将它的指针地址传递给了<code>json.Unmarshall</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thing Thing</span><br><span class="line">json.Unmarshall(reader, &amp;thing)</span><br></pre></td></tr></table></figure><blockquote><p>注意：当然，对于任何经验法则都有例外。比如，有些变量之间很相关，那么与其写成这样：<br>var min int<br>max := 1000<br>不如写成这样更具可读性：<br><code>min, max := 0, 1000</code></p></blockquote><p>综上所述：</p><ul><li>只声明，不初始化时，使用<code>var</code>。</li><li>既声明，也显式地初始化时，使用<code>:=</code>。</li></ul><blockquote><p>小窍门：<strong>使得机巧的声明更加显而易见。</strong><br>当某件事本身很复杂时，<strong>应当</strong>使它看起来就复杂。<br><code>var length uint32 = 0x80</code><br>这里的<code>length</code>可能和一个需要有特定数字类型的库一起使用，并且<code>length</code>被很明确地指定为<code>uint32</code>类型而不只是短声明形式：<br><code>length := uint32(0x80)</code><br>在第一个例子中，我故意违反了使用<code>var</code>声明形式和显式初始化程序的规则。这个和我惯常形式不同的决定，可以让读者意识到这里需要注意。</p></blockquote><h2 id="成为团队合作者"><a href="#成为团队合作者" class="headerlink" title="成为团队合作者"></a>成为团队合作者</h2><p>我谈到了软件工程的目标，即生成可读，可维护的代码。而您的大部分职业生涯参与的项目可能您都不是唯一的作者。在这种情况下我的建议是遵守团队的风格。</p><p>在文件中间改变编码风格是不适合的。同样，即使您不喜欢，可维护性也比您的个人喜好有价值得多。我的原则是：如果满足<code>gofmt</code>，那么通常就不值得再进行代码风格审查了。</p><blockquote><p>小窍门：如果您要横跨整个代码库进行重命名，那么不要在其中混入其他的修改。如果其他人正在使用 git bisect，他们一定不愿意从几千行代码的重命名中“跋山涉水”地去寻找您别的修改。</p></blockquote><h1 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h1><p>在我们进行下一个更大的主题之前，我想先花几分钟说说注释的事。</p><blockquote><p>Good code has lots of comments, bad code requires lots of comments. — Dave Thomas and Andrew Hunt, The Pragmatic Programmer<br>好的代码中附带有大量的注释，坏的代码缺少大量的注释。</p></blockquote><p>代码注释对 Go 程序的可读性极为重要。一个注释应该做到如下三个方面的至少一个：</p><ol><li>注释应该解释“做什么”。</li><li>注释应该解释“怎么做的”。</li><li>注释应该解释“为什么这么做”。</li></ol><p>第一种形式适合公开的符号：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Open opens the named file for reading.</span></span><br><span class="line"><span class="comment">// If successful, methods on the returned file can be used for reading.</span></span><br></pre></td></tr></table></figure><p>第二种形式适合方法内的注释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// queue all dependant actions</span></span><br><span class="line"><span class="keyword">var</span> results []<span class="keyword">chan</span> error</span><br><span class="line"><span class="keyword">for</span> _, dep := <span class="keyword">range</span> a.Deps &#123;</span><br><span class="line">        results = <span class="built_in">append</span>(results, execute(seen, dep))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种形式，“为什么这么做”，这是独一无二的，无法被前两种取代，也无法取代前两种。第三种形式的注释用于解释更多的状况，而这些状况往往难以脱离上下文，否则将没有意义，这些注释就是用来阐述上下文的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &amp;v2.Cluster_CommonLbConfig&#123;</span><br><span class="line">  <span class="comment">// Disable HealthyPanicThreshold</span></span><br><span class="line">  HealthyPanicThreshold: &amp;envoy_type.Percent&#123;</span><br><span class="line">    Value: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，很难立即弄清楚把<code>HealthyPanicThreshold</code>的百分比设置为零会产生什么影响。注释就用来明确将值设置为<code>0</code>实际上是禁用了<code>panic</code>阈值的这种行为。</p><h2 id="变量和常量上的注释应当描述它的内容，而非目的"><a href="#变量和常量上的注释应当描述它的内容，而非目的" class="headerlink" title="变量和常量上的注释应当描述它的内容，而非目的"></a>变量和常量上的注释应当描述它的内容，而非目的</h2><p>我之前谈过，变量或常量的名称应描述其目的。向变量或常量添加注释时，应该描述变量的<strong>内容</strong>，而不是定义它的<strong>目的</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNumber = <span class="number">6</span> <span class="comment">// determined from an unbiased die</span></span><br></pre></td></tr></table></figure><p>这个示例的注释描述了“为什么”<code>randomNumber</code>被赋值为 6，也说明了 6 这个值是从何而来的。但它没有描述<code>randomNumber</code>会被用到什么地方。下面是更多的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    StatusContinue           = <span class="number">100</span> <span class="comment">// RFC 7231, 6.2.1</span></span><br><span class="line">    StatusSwitchingProtocols = <span class="number">101</span> <span class="comment">// RFC 7231, 6.2.2</span></span><br><span class="line">    StatusProcessing         = <span class="number">102</span> <span class="comment">// RFC 2518, 10.1</span></span><br><span class="line"></span><br><span class="line">    StatusOK                 = <span class="number">200</span> <span class="comment">// RFC 7231, 6.3.1</span></span><br></pre></td></tr></table></figure><p>如在 RFC 7231 的第 6.2.1 节中定义的那样，在 HTTP 语境中 100 被当做<code>StatusContinue</code>。</p><blockquote><p>小窍门：对于那些没有初始值的变量，注释应当描述谁将负责初始化它们<br>// sizeCalculationDisabled indicates whether it is safe<br>// to calculate Types’ widths and alignments. See dowidth.<br>var sizeCalculationDisabled bool<br>这里，通过注释让读者清楚函数<code>dowidth</code>在负责维护<code>sizeCalculationDisabled</code>的状态。</p></blockquote><blockquote><p>小窍门：<strong>隐藏一目了然的东西</strong><br>Kate Gregory 提到一点<a href="https://www.infoq.com/articles/API-Design-Joshua-Bloch" target="_blank" rel="noopener">^3</a>，有时一个好的命名，可以省略不必要的注释。<br>// registry of SQL drivers<br>var registry = make(map[string]*sql.Driver)<br>注释是源码作者加的，因为<code>registry</code>没能解释清楚定义它的目的——它是个注册表，但是什么的注册表？<br>通过重命名变量名为<code>sqlDrivers</code>，现在我们很清楚这个变量的目的是存储 SQL 驱动。<br>var sqlDrivers = make(map[string]*sql.Driver)<br>现在注释已经多余了，可以移除。</p></blockquote><h2 id="总是为公开符号写文档说明"><a href="#总是为公开符号写文档说明" class="headerlink" title="总是为公开符号写文档说明"></a>总是为公开符号写文档说明</h2><p>因为 godoc 将作为您的包的文档，您应该总是为每个公开的符号写好注释说明——包括变量、常量、函数和方法——所有定义在您包内的公开符号。</p><p>这里是 Go 风格指南的两条规则：</p><ul><li>任何既不明显也不简短的公共功能必须加以注释。</li><li>无论长度或复杂程度如何，都必须对库中的任何函数进行注释。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ioutil</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>对这个规则有一个例外：您不需要为实现接口的方法进行文档说明，特别是不要这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read implements the io.Reader interface</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *FileReader)</span> <span class="title">Read</span><span class="params">(buf []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>这个注释等于说明都没说，它没有告诉您这个方法做了什么，实际上更糟的是，它让您去找别的地方的文档。在这种情况我建议将注释整个去掉。</p><p>这里有一个来自<code>io</code>这个包的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LimitReader returns a Reader that reads from r</span></span><br><span class="line"><span class="comment">// but stops with EOF after n bytes.</span></span><br><span class="line"><span class="comment">// The underlying implementation is a *LimitedReader.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LimitReader</span><span class="params">(r Reader, n <span class="keyword">int64</span>)</span> <span class="title">Reader</span></span> &#123; <span class="keyword">return</span> &amp;LimitedReader&#123;r, n&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A LimitedReader reads from R but limits the amount of</span></span><br><span class="line"><span class="comment">// data returned to just N bytes. Each call to Read</span></span><br><span class="line"><span class="comment">// updates N to reflect the new amount remaining.</span></span><br><span class="line"><span class="comment">// Read returns EOF when N &lt;= 0 or when the underlying R returns EOF.</span></span><br><span class="line"><span class="keyword">type</span> LimitedReader <span class="keyword">struct</span> &#123;</span><br><span class="line">  R Reader <span class="comment">// underlying reader</span></span><br><span class="line">  N <span class="keyword">int64</span>  <span class="comment">// max bytes remaining</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *LimitedReader)</span> <span class="title">Read</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> l.N &lt;= <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, EOF</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">int64</span>(<span class="built_in">len</span>(p)) &gt; l.N &#123;</span><br><span class="line">    p = p[<span class="number">0</span>:l.N]</span><br><span class="line">  &#125;</span><br><span class="line">  n, err = l.R.Read(p)</span><br><span class="line">  l.N -= <span class="keyword">int64</span>(n)</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，<code>LimitedReader</code>的声明紧接在使用它的函数之后，并且<code>LimitedReader.Read</code>又紧接着定义在<code>LimitedReader</code>之后，即便<code>LimitedReader.Read</code>本身没有文档注释，那和很清楚它是<code>io.Reader</code>的一种实现。</p><blockquote><p>小窍门：在您编写函数之前先写描述这个函数的注释，如果您发现注释很难写，那就表明您正准备写的这段代码一定难以理解。</p></blockquote><h3 id="不要为坏的代码写注释，重写它"><a href="#不要为坏的代码写注释，重写它" class="headerlink" title="不要为坏的代码写注释，重写它"></a>不要为坏的代码写注释，重写它</h3><blockquote><p>Don’t comment bad code — rewrite it — Brian Kernighan<br>不要为坏的代码写注释——重写它</p></blockquote><p>为粗制滥造的代码片段着重写注释是不够的，如果您遭遇到一段这样的注释，您应该发起一个问题（issue）从而记得后续重构它。技术债务只要不是过多就没有关系。</p><p>在标准库的惯例是，批注一个 TODO 风格的注释，说明是谁发现了坏代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO(dfc) this is O(N^2), find a faster way to do this.</span></span><br></pre></td></tr></table></figure><p>注释中的姓名并不意味着承诺去修复问题，但在解决问题时，他可能是最合适的人选。其他批注内容一般还有日期或者问题编号。</p><h3 id="与其为一大段代码写注释，不如重构它"><a href="#与其为一大段代码写注释，不如重构它" class="headerlink" title="与其为一大段代码写注释，不如重构它"></a>与其为一大段代码写注释，不如重构它</h3><blockquote><p>Good code is its own best documentation. As you’re about to add a comment, ask yourself, ‘How can I improve the code so that this comment isn’t needed?’ Improve the code and then document it to make it even clearer. — Steve McConnell<br>好的代码即为最好的文档。在您准备添加一行注释时，问自己，“我要如何改进这段代码从而使它不需要注释？”优化代码，然后注释它使之更清晰。</p></blockquote><p>函数应该只做一件事。如果您发现一段代码因为与函数的其他部分不相关因而需要注释时，考虑将这段代码拆分为独立的函数。</p><p>除了更容易理解之外，较小的函数更容易单独测试，现在您将不相关的代码隔离拆分到不同的函数中，估计只有函数名才是唯一需要的文档注释了。</p><h1 id="包的设计"><a href="#包的设计" class="headerlink" title="包的设计"></a>包的设计</h1><blockquote><p>Write shy code - modules that don’t reveal anything unnecessary to other modules and that don’t rely on other modules’ implementations. — Dave Thomas<br>编写内敛的代码——模块不向外部透露任何不必要的信息，也不依赖外部模块的实现。</p></blockquote><p>每个 Go Package 事实上自身都是一个小的 Go 程序。正如函数或方法的实现对其调用者不重要一样，构成公开 API 的函数、方法、类型的实现——其行为——对调用者也不重要。</p><p>一个好的 Go Package 应该致力于较低的源码级耦合，这样，随着项目的增长，对一个包的更改不会级联影响其他代码库。那些“世界末日”似的重构让代码的更新优化变得极其困难，也让工作在这样的代码库上的开发者的生产效率极度地受限。</p><p>在这一节中我会来谈一谈包的设计，包括包的命名、类型的命名，以及编写方法和函数的一些小技巧。</p><h2 id="一个好的包从它的名称开始"><a href="#一个好的包从它的名称开始" class="headerlink" title="一个好的包从它的名称开始"></a>一个好的包从它的名称开始</h2><p>编写一个好的 Go 程序包从命名开始。好好思考您的软件包的名字，仅用一个词来描述它是什么。（Austin Luo：就如同“电梯游说”一样，您只能在极短的时间极少的话语的情况下描述您要表达的东西。）</p><p>正如我在上一节讲变量命名一样，包的名称也同样非常重要。以我的经验来看，我们应当思考的不是“我在这个包里应当放哪些类型”，而是“包提供的服务都应该做什么”。通常这个问题的答案不应该是“这个包提供了某某类型”，而是“这个包让您可以进行 HTTP 通信”。</p><blockquote><p>小窍门：以包“提供”的东西来命名，而不是以“包含”的东西来命名。</p></blockquote><h3 id="好的包名应该是唯一的"><a href="#好的包名应该是唯一的" class="headerlink" title="好的包名应该是唯一的"></a>好的包名应该是唯一的</h3><p>在您的项目里，每个包名都应该是唯一的。这个建议很容易理解，也很容易遵守。包的命名应该源于它的目的——如果您发现有两个包需要取相同的名字，那可能是下面两种情况：</p><ul><li>包的名称太通用了。</li><li>和另外一个类似名称的包重复了。在这种情况下，您应该重新评审设计或者直接将这两个包合并。</li></ul><h2 id="避免将包命名为base、common、util"><a href="#避免将包命名为base、common、util" class="headerlink" title="避免将包命名为base、common、util"></a>避免将包命名为<code>base</code>、<code>common</code>、<code>util</code></h2><p>一个低劣的名称通常是“utility”。这些通常是随着时间推移沉淀下来的通用帮助类或者工具代码。这种包里通常混合有各种不相关的功能，并且因为其通用性，以至于难以准确地描述这个包都提供了些什么。这通常导致包名来源于这个包“包含”的东西——一堆工具。</p><p>像<code>utils</code>或<code>helpers</code>这样的名称，通常在一些大型项目中找到，这些项目中已经开发了较深的层次结构，并且希望在共享这些帮助类函数时，避免循环导入。虽然打散这些工具函数到新的包也能打破循环导入，但是因为其本身是源于项目的设计问题，包名称并未反映其目的，因此打散它也仅仅只起到了打破导入循环的作用而已。</p><p>针对优化<code>utils</code>或<code>helpers</code>这种包名，我的建议是分析它们是在哪里被使用，并且是否有可能把相关函数挪到调用者所在的包。即便这可能导致一些重复的帮助类代码，但这也比在两个包之间引入一个导入依赖来的更好。</p><blockquote><p>[A little] duplication is far cheaper than the wrong abstraction. — Sandy Metz<br>（一点点的）重复远比错误的抽象更值得。</p></blockquote><p>在多个地方使用工具类方法的情况下，优先选择多个包（的设计），每个包专注于一个单独的方面，而不是整个包。（Austin Luo：Separation Of Concerns。）</p><blockquote><p>小窍门：使用复数形式命名工具包。比如<code>strings</code>是字符串的处理工具。</p></blockquote><p>像<code>base</code>或<code>common</code>这样的名称，常用于一个通用的功能被分为两个或多个实现的情况，或者一些用于客户端、服务端程序，并且被重构为单独通用类型的包。我认为解决这个问题的方法是减少包的数量，把客户端、服务端的通用代码合并到一个统一包里。</p><p>具体例子，<code>net/http</code>包总并没有<code>client</code>和<code>server</code>这两个子包，取而代之的是只有两个名为<code>client.go</code>和<code>server.go</code>的文件，每个文件处理各自的类型，以及一个<code>transport.go</code>文件用于公共消息传输的代码。</p><blockquote><p>小窍门：<strong>标识符的名称包括其包的名称</strong><br>牢记标识符的名称包含其所在包的名称，这一点很重要</p><ul><li><code>net/http</code>包中的<code>Get</code>函数，在其他包引用时变成了<code>http.Get</code>。</li><li><code>strings</code>包中的<code>Reader</code>类型，在其他包导入后变成了<code>strings.Reader</code>。</li><li><code>net</code>包中的<code>Error</code>接口很明确地与网络错误相关。</li></ul></blockquote><h2 id="快速返回，而不是深层嵌套"><a href="#快速返回，而不是深层嵌套" class="headerlink" title="快速返回，而不是深层嵌套"></a>快速返回，而不是深层嵌套</h2><p>正如 Go 并不使用异常来控制执行流程，也不需要深度缩进代码只为了在顶层结构添加一个<code>try...catch...</code>块。与把成功执行的路径向右侧一层一层深度嵌套相比，Go 风格的代码是随着函数的执行，成功路径往屏幕下方移动。我的朋友 Mat Ryer 称这种方式为“视线”编码。<a href="https://medium.com/@matryer/line-of-sight-in-code-186dd7cdea88" target="_blank" rel="noopener">^4</a></p><p>这是通过“保护条款”来实现的（Austin Luo: 类似我们常说的防御式编程）：条件代码块在进入函数时立即断言前置条件。这里是<code>bytes</code>包里的一个示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Buffer)</span> <span class="title">UnreadRune</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> b.lastRead &lt;= opInvalid &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">"bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> b.off &gt;= <span class="keyword">int</span>(b.lastRead) &#123;</span><br><span class="line">    b.off -= <span class="keyword">int</span>(b.lastRead)</span><br><span class="line">  &#125;</span><br><span class="line">  b.lastRead = opInvalid</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦进入<code>UnreadRune</code>，就会检查<code>b.lastRead</code>，如果之前的操作不是<code>ReadRune</code>就会立即返回错误。从这里开始，函数执行下去的其余部分，我们就能明确肯定<code>b.lastRead</code>比<code>opInvalid</code>大了。</p><p>与没有使用“保护条款”的相同功能代码对比看看：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Buffer)</span> <span class="title">UnreadRune</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> b.lastRead &gt; opInvalid &#123;</span><br><span class="line">    <span class="keyword">if</span> b.off &gt;= <span class="keyword">int</span>(b.lastRead) &#123;</span><br><span class="line">      b.off -= <span class="keyword">int</span>(b.lastRead)</span><br><span class="line">    &#125;</span><br><span class="line">    b.lastRead = opInvalid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> errors.New(<span class="string">"bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最通常的、成功的情况，被缩进到了第一个<code>if</code>条件中了。并且成功的退出条件 <code>return nil</code>，需要非常小心地与闭口括号（}）对应。接下来，最后一行代码返回了一个错误，并且我们需要回退跟踪到函数的开口括号（{）才知道执行控制流什么时候到达了这里。</p><p>对于读者和维护程序员来说，这更容易出错，因此 Go 更喜欢使用“保护条款”并尽早返回错误。</p><h2 id="让零值变得有意义"><a href="#让零值变得有意义" class="headerlink" title="让零值变得有意义"></a>让零值变得有意义</h2><p>假设没有明确提供显示初始化器，每个变量声明之后都会被自动初始化为零内存对应的值，这就是<strong>零值</strong>。零值与其类型有关：数值类型为<code>0</code>，指针为<code>nil</code>，切片、映射、管道等也同样（为<code>nil</code>）。</p><p>始终将值设置为已知默认值，对于程序的安全性和正确性非常重要，并且可以使 Go 程序更简单，更紧凑。这就是 Go 程序员在说“给您的结构一个有用的零值”时所表达的意思。</p><p>我们来看<code>sync.Mutex</code>这类型。它有两个未导出的整数型字段，表示互斥锁的内部状态。由于零值，无论何时一个<code>sync.Mutex</code>类型变量被声明后，这些字段都将被设置为<code>0</code>。<code>sync.Mutex</code>类被故意地编码为这样，使得它无需被显式初始化即可使得零值有意义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">struct</span> &#123;</span><br><span class="line">  mu  sync.Mutex</span><br><span class="line">  val <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i MyInt</span><br><span class="line"></span><br><span class="line">  <span class="comment">// i.mu is usable without explicit initialisation.</span></span><br><span class="line">  i.mu.Lock()</span><br><span class="line">  i.val++</span><br><span class="line">  i.mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Austin Luo：原文为“useful”，我在此译为“有意义”而不是“有用”，意在强调其零值是符合业务的、符合逻辑的，并且也是初始的、默认的，而不是“不用管它，让它为零好了”。<br>这与变量的命名也息息相关，比如：<br><code>isCacheEnabled bool</code> // 缓存是否被启用<br><code>isCacheDisabled bool</code> // 缓存是否被禁用<br>对于上述两个变量，看起来都差不多，随意定义其中一个即可，唯一的差别只是一个表示启用一个表示禁用而已。但是结合考虑“业务要求默认启用缓存”和“bool 的零值为 false”，那么显然我们应该定义<code>isCacheDisabled bool</code>而不是前者。一方面，调用者不显式赋值时<strong>默认零值</strong>为<code>false</code>，另一方面值为<code>false</code>时表达的含义与<strong>业务要求默认启用缓存</strong>一致。<br>这才使得零值真正地<strong>有意义</strong>，正如示例中注释的那行<code>i.mu</code>一样，不显示初始化其代表的是默认锁是可用的。</p></blockquote><p>另一个有意义零值的类型示例是<code>bytes.Buffer</code>。您可以无需显式初始化地声明<code>bytes.Buffer</code>然后立即开始向它写入数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> b bytes.Buffer</span><br><span class="line">  b.WriteString(<span class="string">"Hello, world!\n"</span>)</span><br><span class="line">  io.Copy(os.Stdout, &amp;b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片的一个有用性质是它的零值为<code>nil</code>，我们只需要去看看切片的运行时定义即可理解它的合理性：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">  array *[...]T <span class="comment">// pointer to the underlying array</span></span><br><span class="line">  <span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line">  <span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此结构的零值将暗示<code>len</code>和<code>cap</code>的值为<code>0</code>，并且指向内存的指针<code>array</code>，保存切片背后数组的内容，其值也为<code>nil</code>。这意味着您不需要显式<code>make</code>切片，您只需声明它即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// s := make([]string, 0)</span></span><br><span class="line">  <span class="comment">// s := []string&#123;&#125;</span></span><br><span class="line">  <span class="keyword">var</span> s []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">  s = <span class="built_in">append</span>(s, <span class="string">"Hello"</span>)</span><br><span class="line">  s = <span class="built_in">append</span>(s, <span class="string">"world"</span>)</span><br><span class="line">  fmt.Println(strings.Join(s, <span class="string">" "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE：<code>var s []string</code>看起来和上面被注释掉的两行很像，但又不完全相同。要判断值为<code>nil</code>的切片和长度为零的切片的区别是可以办到的，下面的代码将输出<code>false</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><pre><code>var s1 = []string{}var s2 []stringfmt.Println(reflect.DeepEqual(s1, s2))</code></pre><p>}</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一个意外但是有用的惊喜是未初始化的指针——`<span class="literal">nil</span>`指针，您可以在`<span class="literal">nil</span>`值的类型上调用方法，这可以简单地用于提供默认值。</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">type <span class="type">Config</span> <span class="class"><span class="keyword">struct</span> </span>&#123;</span><br><span class="line">path string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(<span class="built_in">c</span> *Config)</span></span> <span class="type">Path</span>() string &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">c</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"/usr/home"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">c</span>.path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c1 *<span class="type">Config</span></span><br><span class="line"><span class="keyword">var</span> c2 = &amp;<span class="type">Config</span>&#123;</span><br><span class="line">  path: <span class="string">"/export"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.<span class="type">Println</span>(c1.<span class="type">Path</span>(), c2.<span class="type">Path</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避免包级别的状态"><a href="#避免包级别的状态" class="headerlink" title="避免包级别的状态"></a>避免包级别的状态</h2><p>编写可维护的程序的一个关键方面是松耦合——更改一个包，应该把对没有直接依赖它的包的影响降到最低。</p><p>在 Go 中有两种很好的方法可以实现松散耦合：</p><ul><li>使用接口来描述函数或方法所需的行为。</li><li>避免使用全局状态。</li></ul><p>在 Go 中，我们可以在函数或方法范围内声明变量，也可以在包的范围内声明变量。当变量是公开的，标识符首字母为大写，那么其范围实际上是整个程序——任何包都可以在任何时候观察到它的类型和存储的内容。</p><p>可变的全局状态在程序的独立部分之间引入了紧耦合，因为全局变量对于程序中的每个函数都是隐匿的参数！如果全局变量的类型变化了，那么任何依赖该变量的函数将会被打破。程序其他任何部分对变量值的修改，都将导致依赖该变量状态的函数被打破。</p><blockquote><p>Austin Luo：全局变量对每个函数都是可见的，但开发者可能意识不到全局变量的存在（即隐匿的参数），即使意识到并使用了全局变量，也可能意识不到该变量可能在别处被修改，导致全局变量的使用不可靠，依赖该变量状态（值）的函数被打破。</p></blockquote><p>如果您想减少全局变量带来的耦合，那么：</p><ol><li>将相关变量作为字段移动到需要它们的结构上。</li><li>使用接口来减少行为与该行为的实现之间的耦合。</li></ol><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>让我们来看看多个包合并在一起组成项目的情况。通常这应该是一个单独的 git 仓库，但在将来， Go 开发者将交替使用 <code>module</code> 和 <code>project</code>。</p><p>和包一样，每个项目也应该有一个清晰的目的。如果您的项目是个库，那么它应该只提供一个东西，比如 XML 解析，或者日志记录。您应该避免将多个不同的目的混杂在同一个项目中，这有助于避免<code>common</code>库的出现。</p><blockquote><p>小窍门：根据我的经验，<code>common</code> 库与其最大的消费者（使用者）紧密相连，这使得在不锁定步骤的情况下单独升级<code>common</code>或者消费者以进行升级或者修复变得很困难，从而带来很多不相关的更改和 API 破坏。</p></blockquote><p>如果您的项目是一个应用程序，比如您的 Web 应用，Kubernetes 控制器等等，那么在您的项目中可能有一个或多个 <code>main</code> 包。比如，我维护的那个 Kubernetes 控制器里有一个单独的 <code>cmd/contour</code> 包，用来提供到 Kubernetes 集群的服务部署，以及用于调试的客户端。</p><h2 id="考虑更少、更大的包"><a href="#考虑更少、更大的包" class="headerlink" title="考虑更少、更大的包"></a>考虑更少、更大的包</h2><p>对于从其他语言过渡到 Go 的程序员来说，我倾向于在代码审查中提到的一件事是，他们倾向于过度使用包。</p><p>Go 没有提供建立可见性的详细方法：比如 Java 的 <code>public</code>、<code>protected</code>、<code>private</code>和隐式 <code>default</code> 访问修饰符，也没有相当于 C++ 的<code>friend</code>类的概念。</p><p>在 Go 中我们只有两种访问修饰符，公开和私有，这由标识符首字母的大小写决定。如果标识符是公开的，命名首字母就是大写的，则这个标识符可以被其他任何 Go 包引用。</p><blockquote><p>注意：您可能听到有人说导出和非导出，那是公开和私有的同义词。</p></blockquote><p>鉴于对包里的符号可见性控制手段的有限，Go 程序员要怎么做才能避免创建过于复杂的包层次结构呢？</p><blockquote><p>小窍门：除 <code>cmd/</code> 和 <code>internal/</code> 之外，每个包都应该包含一些源代码。</p></blockquote><p>我反复建议的是偏向更少、更大的包。您的默认选项并不是创建新的包，那将导致为了创建宽而浅的 API 平面时您不得不公开太多的类型。</p><p>接下来的几节让我们更详细地探讨这些建议。</p><blockquote><p>小窍门：<strong>来自 Java？</strong><br>如果您有开发 Java 或 C# 的背景，考虑这样的经验规则：一个 Java 包等效于一个独立的 <code>.go</code> 源文件；一个 Go 包等效于整个 Maven 模块或 .NET 程序集。</p></blockquote><h3 id="通过-import-语句将代码整理到多个文件中"><a href="#通过-import-语句将代码整理到多个文件中" class="headerlink" title="通过 import 语句将代码整理到多个文件中"></a>通过 import 语句将代码整理到多个文件中</h3><p>如果您根据包提供给调用者的功能来整理包，那么在 Go 包里整理源文件是不是也应该按相同的方式？您如何知道什么时候您应该将一个 <code>.go</code> 文件拆分成多个文件？您如何知道是不是过分拆分，而应当考虑整合多个 <code>.go</code> 文件？</p><p>这里是我用到的一些经验规则：</p><ul><li>从单一的 <code>.go</code> 文件开始，并且使用与包相同的名字。比如包 <code>http</code> 的第一个文件应该是 <code>http.go</code>，并且放到名为 <code>http</code> 的文件夹中。</li><li>随着包的逐渐增长，您可以根据职责拆分不同的部分到不同的文件。例如，将 <code>Request</code> 和 <code>Response</code> 类型拆分到 <code>message.go</code> 中，将 <code>Client</code> 类型拆分到 <code>client.go</code> 中，将 <code>Server</code> 类型拆分到 <code>server.go</code> 中。</li><li>如果您发现您的文件具有很相似的 import 声明时，考虑合并它们，否则确定两者的具体差异并优化重构它们。</li><li>不同的文件应该负责包的不同区域。<code>messages.go</code> 可能负责网络相关的 HTTP 请求和响应编组，<code>http.go</code> 可能包含低级网络处理逻辑，<code>client.go</code> 和 <code>server.go</code> 实现 HTTP 请求创建或路由的业务逻辑，等等。</li></ul><blockquote><p>小窍门：源文件名应当考虑名词。</p></blockquote><blockquote><p>注意：Go 编译器并行编译各个包。在包中，Go 编译器并行地编译各个函数（方法在 Go 中只是花哨的函数）。修改包源码中代码的排列分布不影响编译时间。</p></blockquote><h3 id="内部测试优于外部测试"><a href="#内部测试优于外部测试" class="headerlink" title="内部测试优于外部测试"></a>内部测试优于外部测试</h3><p>Go 工具集允许您在两处编写包的测试。假设您的包名是 <code>http2</code>，您可以使用 <code>package http2</code> 声明并编写一个 <code>http2_test.go</code> 文件，这样做将会把 <code>http2_test.go</code> 中的代码当成 http2 包的一部分编译进去。这通常称为<strong>内部</strong>测试。</p><p>Go 工具集同样支持一个以 test 结尾的特定声明的包，例如 <code>package http_test</code>，即使这些测试代码不会被视为正式代码一样编译到正式的包里，并且他们有自己独立的包名，也允许您的测试文件和源码文件一样放置在一起。这允许让您像在外部另外一个包里调用一样编写测试用例，这我们称之为<strong>外部</strong>测试。</p><p>在编写单元测试时我推荐使用内部测试。这让您可以直接测试每个函数或方法，避免外部测试的繁文缛节。</p><p>但是，您应该把 <code>Example</code> 测试函数放到外部测试中。这确保了在 godoc 中查看时，示例具有适当的包前缀，并且可以轻松地进行复制粘贴。</p><blockquote><p>小窍门：<strong>避免复杂的包层次结构，克制分类的渴望</strong><br>只有一个例外，这我们将在后面详述。对于 Go 工具集来讲，Go 包的层次结构是没有意义的。例如，<code>net/http</code> 并不是 <code>net</code> 的子或子包。<br>如果您创建了不包含任何 <code>.go</code> 文件的中间目录，则不适用此建议。</p></blockquote><h3 id="使用-internal-包收敛公开的-API-表面"><a href="#使用-internal-包收敛公开的-API-表面" class="headerlink" title="使用 internal 包收敛公开的 API 表面"></a>使用 <code>internal</code> 包收敛公开的 API 表面</h3><p>如果您的项目包含多个包，则可能有一些导出的函数——这些函数旨在供项目中的其他包使用，却又不打算成为项目的公共 API 的一部分。如果有这样的情况，则 go 工具集会识别一个特殊的文件夹名——非包名—— <code>internal/</code>，这用于放置那些对当前项目公开，但对其他项目私有的代码。</p><p>要创建这样的包，把代码放置于名为 <code>internal/</code> 的目录或子目录即可。 go 命令发现导入的包中包含 <code>internal</code> 路径，它就会校验执行导入的包是否位于以 <code>internal</code> 的父目录为根的目录树中。</p><p>例如，包 <code>.../a/b/c/internal/d/e/f</code> 只能被根目录树 <code>.../a/b/c</code> 中的代码导入，不能被 <code>.../a/b/g</code> 或者其他任何库中的代码导入。<a href="https://golang.org/doc/go1.4#internalpackages" target="_blank" rel="noopener">^5</a></p><h2 id="确保-main-包越小越好"><a href="#确保-main-包越小越好" class="headerlink" title="确保 main 包越小越好"></a>确保 main 包越小越好</h2><p><code>main</code> 函数和 <code>main</code> 包应当只做尽可能少的事情，因为 <code>main.main</code> 实际上是一个单例，整个应用程序都只允许一个 <code>main</code> 函数存在，包括单元测试。</p><p>由于 <code>main.main</code> 是一个单例，因此 <code>main.main</code> 的调用中有很多假定，而这些假定又只在 <code>main.main</code> 或 <code>main.init</code> 期间调用，并且只调用一次。这导致很难为 <code>main.main</code> 中的代码编写单元测试，因此您的目标应该是将您的业务逻辑从主函数中移出，最好是压根从主程序包中移出。</p><blockquote><p>Austin Luo：这里主要是讲，由于整个程序（包括单元测试在内）只允许存在一个 <code>main.main</code>，因此在 <code>main.main</code> 中编写过多的代码将导致这些代码很难被测试覆盖，因此应当将这些代码从 <code>main.main</code> 中——甚至从 <code>main</code> 包中——独立出来，以便能够写单元测试进行测试。（文中的“假定”是针对测试而言，“假定” main 中的代码可以正常运行。）</p></blockquote><blockquote><p>小窍门：<code>main</code> 应当解析标识，打开数据库连接，初始化日志模块等等，然后将具体的执行交给其他高级对象。</p></blockquote><h1 id="API-设计"><a href="#API-设计" class="headerlink" title="API 设计"></a>API 设计</h1><p>今天给出的最后一个设计建议是我认为最重要的一个。</p><p>到此为止我给出的所有建议，也仅仅是建议。这是我写 Go 程序时遵守的方式，但也并没有强制推行到代码评审中。</p><p>但是，在审查 API 时，我就不太宽容了。因为之前我所说的一切都可以在不破坏向后兼容性的情况下得到修正，他们大多只是实施细节而已。</p><p>但说到包的开放 API，在初始设计中投入大量精力是值得的，因为后续的更改将是破坏性的，特别是对于已经使用 API ​​ 的人来说。</p><h2 id="设计难以被误用的-API"><a href="#设计难以被误用的-API" class="headerlink" title="设计难以被误用的 API"></a>设计难以被误用的 API</h2><blockquote><p>APIs should be easy to use and hard to misuse. — Josh Bloch <a href="https://www.infoq.com/articles/API-Design-Joshua-Bloch" target="_blank" rel="noopener">^3</a><br>API 应当易用并且难以被误用</p></blockquote><p>如果您从这个演讲中获得任何收益，那就应该是 Josh Bloch 的这个建议。如果 API 很难用于简单的事情，那么 API 的每次调用都会很复杂。当 API 的实际调用很复杂时，它将不那么明显，更容易被忽视。</p><h3 id="警惕具有多个相同类型参数的函数"><a href="#警惕具有多个相同类型参数的函数" class="headerlink" title="警惕具有多个相同类型参数的函数"></a>警惕具有多个相同类型参数的函数</h3><p>一个看起来很简单，但实际很难正确使用的 API 的例子，就是具有两个及以上的相同类型参数的情况。让我们来对比如下两个函数签名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">CopyFile</span><span class="params">(to, from <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>这两个函数有什么不同？很显然一个是返回两个数的最大数，另一个是复制文件，但这都不是重点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Max(<span class="number">8</span>, <span class="number">10</span>) <span class="comment">// 10</span></span><br><span class="line">Max(<span class="number">10</span>, <span class="number">8</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><code>Max</code>是可交换的，参数的顺序无关紧要，8 和 10 比较无论如何都是 10 更大，不论是 8 与 10 比较，还是 10 与 8 比较。</p><p>但是，对于 CopyFile 就不具有这样的特性了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CopyFile(<span class="string">"/tmp/backup"</span>, <span class="string">"presentation.md"</span>)</span><br><span class="line">CopyFile(<span class="string">"presentation.md"</span>, <span class="string">"/tmp/backup"</span>)</span><br></pre></td></tr></table></figure><p>哪条语句将 presentation.md 复制了一份，哪条语句又是用上周的版本覆盖了 presentation.md ？没有文档说明，您很难分辨。代码评审者在没有文档时也对您参数传入的顺序是否正确不得而知。</p><p>一个可行的解决方案是，引入一个帮助类，用来正确地调用 <code>CopyFile</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Source <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(src Source)</span> <span class="title">CopyTo</span><span class="params">(dest <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> CopyFile(dest, <span class="keyword">string</span>(src))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> from Source = <span class="string">"presentation.md"</span></span><br><span class="line">  from.CopyTo(<span class="string">"/tmp/backup"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 <code>CopyFile</code> 就总是可以被正确地调用——这也可以通过单元测试确定，也可以被设置为私有，进一步降低了误用的可能性。</p><blockquote><p>小窍门：具有多个相同类型参数的 API 很难被正确使用。</p></blockquote><h2 id="针对默认用例设计-API"><a href="#针对默认用例设计-API" class="headerlink" title="针对默认用例设计 API"></a>针对默认用例设计 API</h2><p>几年前我做过一次关于使用功能选项<a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">^7</a>使 API 在默认用例时更易用的报告<a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">^6</a>。</p><p>本演讲的主旨是您应该为常见用例设计 API。另一方面，您的 API 不应要求调用者提供那些他们不关心的参数。</p><h3 id="不鼓励使用-nil-作为参数"><a href="#不鼓励使用-nil-作为参数" class="headerlink" title="不鼓励使用 nil 作为参数"></a>不鼓励使用 <code>nil</code> 作为参数</h3><p>我讲述本章开宗明义时建议您不要强迫 API 的调用者在他们不关心这些参数意味着什么的情况下为您提供那些参数。当我说针对默认用例的设计 API 时，这就是我的意思。</p><p>这里有个来自 <code>net/http</code> 包的示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> http</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListenAndServe listens on the TCP network address addr and then calls</span></span><br><span class="line"><span class="comment">// Serve with handler to handle requests on incoming connections.</span></span><br><span class="line"><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The handler is typically nil, in which case the DefaultServeMux is used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ListenAndServe always returns a non-nil error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br></pre></td></tr></table></figure><p><code>ListenAndServe</code> 有两个参数，一个 TCP 地址用来监听传入连接，一个 <code>http.Handler</code> 用来处理传入的 HTTP 请求。<code>Serve</code> 允许第二个参数为 <code>nil</code>，并且注意，调用者通常都会传入 <code>nil</code> 用来表示他们希望使用 <code>http.DefaultServeMux</code> 作为隐式参数。</p><p>现在<code>Serve</code>的调用者就有两个方式来做同样的事情：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><p>两个方式都做完全一样的事情。</p><p>这种 <code>nil</code> 的行为是病毒式的。在 <code>http</code> 包中同样有个 <code>http.Serve</code> 帮助类，您可以合理地想象 <code>ListenAndServe</code> 是这样建立的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  l, err := net.Listen(<span class="string">"tcp"</span>, addr)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> l.Close()</span><br><span class="line">  <span class="keyword">return</span> Serve(l, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为<code>ListenAndServe</code>允许调用者为第二个参数传递<code>nil</code>，所以<code>http.Serve</code>也支持这种行为。事实上，<code>http.Serve</code> 是“当 <code>handler</code> 为 <code>nil</code>，则使用 <code>DefaultServeMux</code>”这个逻辑的一个实现。允许其中一个参数传入 <code>nil</code> 可能导致调用者以为他们可以给两个参数都传入 <code>nil</code>（Austin Luo：调用者可能想，既然第二个参数有默认实现，那第一个参数可能也有），但像这样调用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.Serve(<span class="literal">nil</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>将导致一个丑陋的 panic 。</p><blockquote><p>小窍门：在函数签名中不要混用可为 <code>nil</code> 和不可为 <code>nil</code> 的参数。</p></blockquote><p><code>http.ListenAndServe</code> 的作者尝试在常规状况时让 API 的使用者更轻松，但可能反而导致这个包难于被安全地使用。</p><p>显示地指定 <code>DefaultServeMux</code> 或隐式地指定 <code>nil</code>，并没有在代码行数上带来不同。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = http.Dir(<span class="string">"/htdocs"</span>)</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>相较于</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = http.Dir(<span class="string">"/htdocs"</span>)</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, http.DefaultServeMux)</span><br></pre></td></tr></table></figure><p>并且，仅仅为了节省一行代码，这样的混乱是值得的吗？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = http.Dir(<span class="string">"/htdocs"</span>)</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(root))</span><br><span class="line">http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, mux)</span><br></pre></td></tr></table></figure><blockquote><p>小窍门：认真考虑帮助类将节省程序员的时间。清晰比多个选择好。</p></blockquote><blockquote><p>小窍门：<strong>避免公开只用于测试的参数</strong><br>避免公开导出仅在测试作用域上具有不同值的 API。相反，使用 Public 包装隐藏这些参数，使用在测试作用域的帮助类来设置测试范围中的属性。</p></blockquote><h3 id="首选可变参数（var-args）而非切片参数（-T）"><a href="#首选可变参数（var-args）而非切片参数（-T）" class="headerlink" title="首选可变参数（var args）而非切片参数（[]T）"></a>首选可变参数（var args）而非切片参数（[]T）</h3><p>编写一个处理切片的函数或方法是很常见的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShutdownVMs</span><span class="params">(ids []<span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>这仅仅是我举的一个例子，但在我工作中更加常见。像这样的签名的问题是，他们假设被调用时会有多个实体。但是，我发现很多时候这些类型的函数却只有一个参数，为了满足函数签名的要求，它必须在一个切片内“装箱”。（Austin Luo：如示例，函数定义时预期会有多个 id，但实际调用时往往只有一个 id，为了满足前面，必须构造一个切片，并把 id 装进去。）</p><p>此外，由于 <code>ids</code> 是个切片，您可以向函数传入一个空的切片甚至 <code>nil</code>，编译器也会允许。这就增加了更多的测试用例，因为您应当覆盖这些场景。</p><p>为构造一个这类型的 API 的例子，最近我重构了一条逻辑，如果一组参数中至少有一个非零则要求我设置一些额外的字段。这段逻辑看起来像这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> svc.MaxConnections &gt; <span class="number">0</span> || svc.MaxPendingRequests &gt; <span class="number">0</span> || svc.MaxRequests &gt; <span class="number">0</span> || svc.MaxRetries &gt; <span class="number">0</span> &#123;</span><br><span class="line">  <span class="comment">// apply the non zero parameters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鉴于 if 语句变得非常长，我想将这个校验放到单独的函数中，这是优化的结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// anyPostive indicates if any value is greater than zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anyPositive</span><span class="params">(values ...<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> values &#123;</span><br><span class="line">    <span class="keyword">if</span> v &gt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这使我能够向读者明确执行内部块的条件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> anyPositive(svc.MaxConnections, svc.MaxPendingRequests, svc.MaxRequests, svc.MaxRetries) &#123;</span><br><span class="line">  <span class="comment">// apply the non zero parameters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但对于 <code>anyPositive</code> 还是有一个问题，有人可能会意外地像这样调用它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> anyPositive（）&#123;...&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下<code>anyPositive</code>会返回<code>false</code>，因为它将不会执行迭代并立即返回<code>false</code>。这还不是世界上最糟糕的事情——（更糟糕的是）没有传入参数时这段代码的逻辑将会变成“<code>anyPositive</code>是否返回<code>true</code>？”。</p><p>然而，假如可以这样那就更好了：更改 <code>anyPositive</code> 的签名，使得强制调用者应该传递至少一个参数。我们可以像这样组合常规参数和可变参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// anyPostive indicates if any value is greater than zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">anyPositive</span><span class="params">(first <span class="keyword">int</span>, rest ...<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> first &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> rest &#123;</span><br><span class="line">    <span class="keyword">if</span> v &gt; <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>anyPositive</code>的调用就不能少于一个参数了。</p><h2 id="让函数自身定义它所需的行为"><a href="#让函数自身定义它所需的行为" class="headerlink" title="让函数自身定义它所需的行为"></a>让函数自身定义它所需的行为</h2><p>假设我们有个将文档保存写入磁盘的工作任务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save writes the contents of doc to the file f.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Save</span><span class="params">(f *os.File, doc *Document)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>我可以这样描述这个函数，<code>Save</code>，它以一个 <code>*os.File</code> 作为目标来保存写入 <code>Document</code>。但这有一些问题。</p><p>签名 <code>Save</code> 排除了将数据写入网络位置的可能。假设网络存储成为后续的需求，可能不得不更改函数签名，从而影响其所有调用者。</p><p><code>Save</code> 也对测试不友好，因为这是直接对磁盘的文件进行操作。因此，为了验证其操作，测试用例不得不在文件被写入之后重新去读取写入的内容。而且我还必须确保 <code>f</code> 最终从临时位置被删除。</p><p>同时 <code>*os.File</code> 也定义了很多与 <code>Save</code> 无关的方法，比如读取目录，检查一个路径是否为符号链接等。如果 <code>Save</code> 函数的签名只描述 <code>*os.File</code> 的一部分就更好了。</p><p>我们可以怎么做呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save writes the contents of doc to the supplied</span></span><br><span class="line"><span class="comment">// ReadWriterCloser.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Save</span><span class="params">(rwc io.ReadWriteCloser, doc *Document)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>使用 <code>io.ReadWriteCloser</code> 我们可以遵循<strong>接口隔离原则</strong>重新定义 <code>Save</code> ，从而获得一个更常规的文件操作接口。</p><p>有了这个改变，<code>io.ReadWriteCloser</code> 接口的任何实现都可以替代前文的 <code>*os.File</code>。</p><p>这使得 <code>Save</code> 的应用更加广泛，并且向 <code>Save</code> 的调用者澄清了哪些 <code>*os.File</code> 类型的方法与其操作相关。</p><p>并且，作为 <code>Save</code> 函数作者，我不再能调用 <code>*os.File</code> 其他那些不相关方法，它们都被 <code>io.ReadWriteCloser</code> 接口隐藏到了背后。</p><p>我们可以针对接口隔离原则谈得更深入些。</p><p>首先，如果 <code>Save</code> 遵循单一职责原则，它不太可能读取它刚刚编写的文件以校验其内容——这应该是另一段代码的责任。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save writes the contents of doc to the supplied</span></span><br><span class="line"><span class="comment">// WriteCloser.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Save</span><span class="params">(wc io.WriteCloser, doc *Document)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>因此，我们可以将传递给 <code>Save</code> 的接口缩小到只是写和关闭两个方面。</p><p>其次，通过 <code>Save</code> 附带提供一种关闭其流的机制（Austin Luo：由于 <code>io.WriteCloser</code> 的存在，<code>Save</code> 隐含了关闭流的含义）。我们继承了这种机制，使其仍然看起来像一个文件，这就提出了在什么情况下 <code>wc</code> 会被关闭的问题。</p><p>可能 <code>Save</code> 会无条件地调用 <code>Close</code>，或者在成功的情况下才调用 <code>Close</code>。</p><p>这给 <code>Save</code> 的调用者带来一个问题，那就是希望在写入文档之后再向数据流写入其他数据时怎么办？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Save writes the contents of doc to the supplied</span></span><br><span class="line"><span class="comment">// Writer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Save</span><span class="params">(w io.Writer, doc *Document)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure><p>一个更好的解决方案是，重新定义 <code>Save</code>，只持有一个 <code>io.Writer</code>，将除了向数据流写入数据之外的其他所有职责都完全剥离出来。</p><p>通过在 <code>Save</code> 函数上遵循接口隔离原则，其结果是实际需求的最核心描述同时作为一个函数——它只需要一个可写的对象——并且是最通常的情况，我们现在可以使用 <code>Save</code> 来向任何 <code>io.Writer</code> 的实现保存数据。</p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>我已经做了好几场关于错误处理的演讲，在我的博客里也写了很多相关的内容，昨天的那一节我也讲了很多了，因此我不打算再赘述了。</p><ul><li><a href="https://dave.cheney.net/2014/12/24/inspecting-errors" target="_blank" rel="noopener">https://dave.cheney.net/2014/12/24/inspecting-errors</a></li><li><a href="https://dave.cheney.net/2016/04/07/constant-errors" target="_blank" rel="noopener">https://dave.cheney.net/2016/04/07/constant-errors</a></li></ul><p>相反，我想谈关于错误处理的其它两个方面。</p><h2 id="通过消除错误来消除错误处理"><a href="#通过消除错误来消除错误处理" class="headerlink" title="通过消除错误来消除错误处理"></a>通过消除错误来消除错误处理</h2><p>您昨天可能听了我的讲演，我谈到了关于改进错误处理的建议草案。但是您知道有什么是比改进错误处理语法更好的吗？那就是根本不用处理错误。</p><blockquote><p>注意：我并不是说“移除您的错误处理”。我建议的是，修改您的代码，从而无需处理错误。</p></blockquote><p>本节是从 John Ousterhout 的新书《A philosophy of Software Design》<a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201" target="_blank" rel="noopener">^9</a>中得到的启示。其中一章是“Define Errors Out of Existence”，我们来把这个建议放到 Go 中来看看。</p><h3 id="统计行数"><a href="#统计行数" class="headerlink" title="统计行数"></a>统计行数</h3><p>让我们来写一个统计文件行数的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CountLines</span><span class="params">(r io.Reader)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> (</span><br><span class="line">    br    = bufio.NewReader(r)</span><br><span class="line">    lines <span class="keyword">int</span></span><br><span class="line">    err   error</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    _, err = br.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">    lines++</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err != io.EOF &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lines, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们要遵循上一节的建议，<code>CountLines</code>持有了一个 <code>io.Reader</code>，而非 <code>*File</code>——提供要计数内容的 <code>io.Reader</code> 是调用者的职责。</p><p>我们构造了一个<code>bufio.Reader</code>，并将它放到循环中调用<code>ReadString</code>方法，累加一个计数器，直到文件末尾，然后我们返回读取到的行数。</p><p>至少这是我们期望的的代码，但这个函数因为错误处理变得更加复杂。例如，这里有个奇怪的结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_, err = br.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">lines++</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在判断错误<strong>之前</strong>累加了计数——这看起来很怪异。</p><p>我之所以写成这样，是因为<code>ReadString</code>在遇到换行符之前如果遇到文件结尾则会返回一个错误，如果文件中没有最终换行符，则会发生这种情况。</p><p>为了修复这个问题，我们重新排列逻辑以累加行数，然后查看是否需要退出循环。</p><blockquote><p>注意：这个逻辑依然不够完美，您能发现 bug 吗？</p></blockquote><p>错误还没有检查完毕。<code>ReadString</code>在遇到文件末尾时会返回<code>io.EOF</code>。这是符合预期的，<code>ReadString</code>需要某种方式“叫停，后面没有更多的东西可读取了”。因此在我们向<code>CountLine</code>的调用者返回错误之前，我们需要检查错误<strong>不是</strong><code>io.EOF</code>，并且在这种情况下才将其进行传播，否则我们返回 <code>nil</code> 说一切正常。</p><p>Russ Cox 觉察到错误处理可能会模 ​​ 糊函数操作，我想这就是个很好的例子。让我们来看一个优化的版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CountLines</span><span class="params">(r io.Reader)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">  sc := bufio.NewScanner(r)</span><br><span class="line">  lines := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> sc.Scan() &#123;</span><br><span class="line">    lines++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lines, sc.Err()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个优化的版本选择使用 <code>bufio.Scanner</code> 而不是 <code>bufio.Reader</code>。</p><p>在 <code>bufio.Scanner</code> 的封装下使用 <code>bufio.Reader</code>，但它提供了一个很好的抽象层，帮助我们移除了 <code>CountLines</code> 操作模糊不清的错误。</p><blockquote><p>注意：<code>bufio.Scanner</code> 可以根据任何模式扫描，但默认只查找换行。</p></blockquote><p><code>sc.Scan()</code> 这个方法，在匹配到一行文本并且没有遇到错误时会返回 <code>true</code>，因此，<code>for</code> 循环会在遇到文件结尾或者遇到错误时退出。类型 <code>bufio.Scanner</code> 会记录它遇到的第一个错误，一旦退出，我们可以使用 <code>sc.Err()</code> 方法获取到这个错误。</p><p>最后，<code>sc.Err()</code> 会合理处理 <code>io.EOF</code>，并且在遇到文件结尾但没有其他错误时，将错误转化为 <code>nil</code>。</p><blockquote><p>小窍门：当您发现自己遇到难以消除的错误时，请尝试将某些操作提取到帮助类中。</p></blockquote><h3 id="写入响应"><a href="#写入响应" class="headerlink" title="写入响应"></a>写入响应</h3><p>我的第二个例子受到了博客文章“Errors are values”<a href="https://blog.golang.org/errors-are-values" target="_blank" rel="noopener">^10</a>的启发。</p><p>之前的讲演中我们已经看过如何打开、写入和关闭文件。错误处理还存在，但不是那么难以消除，我们可以使用 <code>ioutil.ReadFile</code> 和 <code>ioutil.WriteFile</code> 来封装。但是当我们处理低级别的网络协议时，有必要通过 I/O 来构建响应，这就让错误处理可能变得重复。考虑构建 HTTP 响应的 HTTP 服务器的这个片段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">  Key, Value <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Status <span class="keyword">struct</span> &#123;</span><br><span class="line">  Code   <span class="keyword">int</span></span><br><span class="line">  Reason <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteResponse</span><span class="params">(w io.Writer, st Status, headers []Header, body io.Reader)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  _, err := fmt.Fprintf(w, <span class="string">"HTTP/1.1 %d %s\r\n"</span>, st.Code, st.Reason)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, h := <span class="keyword">range</span> headers &#123;</span><br><span class="line">    _, err := fmt.Fprintf(w, <span class="string">"%s: %s\r\n"</span>, h.Key, h.Value)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> _, err := fmt.Fprint(w, <span class="string">"\r\n"</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _, err = io.Copy(w, body)</span><br><span class="line">  <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们使用 <code>fmt.Fprintf</code> 构造了状态行并且检查了错误。然后为每个请求头写入键和值，同样检查了错误。最后我们使用 <code>\r\n</code> 终结了请求头这一段，仍然检查了错误。接下来复制响应体到客户端。最后，尽管我们不用检查 <code>io.Copy</code> 的错误，但我们也需要将 <code>io.Copy</code> 的双返回值转换为 <code>WriteResponse</code> 所需的单返回值。</p><p>这有太多的重复工作了。我们可以通过引入一个小的封装类 <code>errWriter</code> 来让这件事变得更容易。</p><p><code>errWriter</code> 满足 <code>io.Writer</code> 的契约，因此它可以用来包装现有的 <code>io.Writer</code>。<code>errWriter</code> 将写入传递给底层的 Writer，直到检测到错误，从这开始，它会丢弃任何写入并返回先前的错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> errWriter <span class="keyword">struct</span> &#123;</span><br><span class="line">  io.Writer</span><br><span class="line">  err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errWriter)</span> <span class="title">Write</span><span class="params">(buf []<span class="keyword">byte</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> e.err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>, e.err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> n <span class="keyword">int</span></span><br><span class="line">  n, e.err = e.Writer.Write(buf)</span><br><span class="line">  <span class="keyword">return</span> n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteResponse</span><span class="params">(w io.Writer, st Status, headers []Header, body io.Reader)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  ew := &amp;errWriter&#123;Writer: w&#125;</span><br><span class="line">  fmt.Fprintf(ew, <span class="string">"HTTP/1.1 %d %s\r\n"</span>, st.Code, st.Reason)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> _, h := <span class="keyword">range</span> headers &#123;</span><br><span class="line">    fmt.Fprintf(ew, <span class="string">"%s: %s\r\n"</span>, h.Key, h.Value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Fprint(ew, <span class="string">"\r\n"</span>)</span><br><span class="line">  io.Copy(ew, body)</span><br><span class="line">  <span class="keyword">return</span> ew.err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>errWriter</code> 替换 <code>WriteResponse</code> 可以显着提高代码的清晰度。每个操作不再需要用错误检查来自我修复。通过检查 <code>ew.err</code> 字段来将报告错误移动到函数的末尾，同时也避免因为 io.Copy 的多返回值而引起恼人的转换。</p><h2 id="错误只处理一次"><a href="#错误只处理一次" class="headerlink" title="错误只处理一次"></a>错误只处理一次</h2><p>最后，我想提一下您应该<strong>只处理一次</strong>错误。处理错误意味着检查错误值并做出<strong>单一</strong>决定。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WriteAll writes the contents of buf to the supplied writer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteAll</span><span class="params">(w io.Writer, buf []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">  w.Write(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果错误您一次都不处理，那您就忽略了它。就像我们看到的这样，<code>w.WriteAll</code> 的错误完全被丢弃了。</p><p>但是对单一错误做出多次处理决定，也是有问题的。以下是我经常遇到的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteAll</span><span class="params">(w io.Writer, buf []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  _, err := w.Write(buf)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(<span class="string">"unable to write:"</span>, err) <span class="comment">// annotated error goes to log file</span></span><br><span class="line">    <span class="keyword">return</span> err                           <span class="comment">// unannotated error returned to caller</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，如果 <code>w.Write</code> 产生了一个错误，则会在日志文件中写一行日志，记录错误发生的文件和代码行，并且错误又同时被返回给了调用者，调用者又可能去记录日志，继续返回，直至回溯到程序的顶部。</p><p>调用者可能也会做同样的事，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteConfig</span><span class="params">(w io.Writer, conf *Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  buf, err := json.Marshal(conf)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Printf(<span class="string">"could not marshal config: %v"</span>, err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> err := WriteAll(w, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(<span class="string">"could not write config: %v"</span>, err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到头来在您的日志中会出现重复的行，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unable to write: io.EOF</span><br><span class="line">could not write config: io.EOF</span><br></pre></td></tr></table></figure><p>但在程序的顶部，您得到了一个没有上下文的原始错误，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">err := WriteConfig(f, &amp;conf)</span><br><span class="line">fmt.Println(err) <span class="comment">// io.EOF</span></span><br></pre></td></tr></table></figure><p>我想进一步深入研究这一点，因为我不认为记录<strong>并且</strong>返回错误仅仅是个人偏好的问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteConfig</span><span class="params">(w io.Writer, conf *Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  buf, err := json.Marshal(conf)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Printf(<span class="string">"could not marshal config: %v"</span>, err)</span><br><span class="line">    <span class="comment">// oops, forgot to return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> err := WriteAll(w, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Println(<span class="string">"could not write config: %v"</span>, err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我看到的很多问题是程序员忘记在错误处返回。正如我们之前谈到的那样，Go 风格应当使用保护条款，检查函数进行下去的前提条件，并提前返回。</p><p>在这个示例中，作者处理了错误，记录了日志，但忘记返回，这将导致一个难以觉察的 bug。</p><p>在 Go 的错误处理契约中，如果出现错误，您不能对其他返回值的内容做出任何假设。就像上例中如果 JSON 反序列化失败，<code>buf</code> 的内容未知，可能什么都不包含，但包含了 1/2 的 JSON 片段会更糟糕。</p><p>因为程序员在检查和日志记录了错误之后忘记返回，一个混乱的缓冲区被传递给了 <code>WriteAll</code>，它又可能执行成功，这样配置文件就会被错误地覆盖了。但此时函数会正常返回，并且发生问题的唯一迹象只是单个日志行记录了 JSON 编码失败，而不是编写配置文件失败。</p><h3 id="向错误添加上下文"><a href="#向错误添加上下文" class="headerlink" title="向错误添加上下文"></a>向错误添加上下文</h3><p>这个 bug 的发生是因为作者尝试向错误消息添加<strong>上下文</strong>信息。他们试图给自己留下一个线索，指引他们回到错误的源头。</p><p>让我们看看使用 <code>fmt.Errorf</code> 来做同样的事的另一种方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteConfig</span><span class="params">(w io.Writer, conf *Config)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  buf, err := json.Marshal(conf)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"could not marshal config: %v"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> err := WriteAll(w, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"could not write config: %v"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WriteAll</span><span class="params">(w io.Writer, buf []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  _, err := w.Write(buf)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"write failed: %v"</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将错误的注释与返回组合到一行，则以就更难以忘记返回错误，从而避免意外继续。</p><p>如果写文件时发生一个 I/O 错误，错误对象的 <code>Error()</code> 方法将会报告如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not write config: write failed: input/output error</span><br></pre></td></tr></table></figure><h3 id="使用-github-com-pkg-errors-包装错误"><a href="#使用-github-com-pkg-errors-包装错误" class="headerlink" title="使用 github.com/pkg/errors 包装错误"></a>使用 <code>github.com/pkg/errors</code> 包装错误</h3><p><code>fmt.Errorf</code> 模式适用于提示错误信息，但其代价是原始的错误类型被掩盖了。我认为，将错误视为不透明的值对于生成松散耦合的软件很重要，所以如果对错误值所做的唯一事情是如下两个方面的话，则原始错误是什么类型就无关紧要了。</p><ol><li>检查是否为 <code>nil</code></li><li>打印或记录日志</li></ol><p>但是，在某些场景，可能并不常见，您确实需要恢复原始错误。在这种情况下，您可以使用类似我的 <code>errors</code> 包来备注这样的错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">  f, err := os.Open(path)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"open failed"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">  buf, err := ioutil.ReadAll(f)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"read failed"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buf, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadConfig</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">  home := os.Getenv(<span class="string">"HOME"</span>)</span><br><span class="line">  config, err := ReadFile(filepath.Join(home, <span class="string">".settings.xml"</span>))</span><br><span class="line">  <span class="keyword">return</span> config, errors.WithMessage(err, <span class="string">"could not read config"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  _, err := ReadConfig()</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在报告的错误将会是很好的 K&amp;D <a href="http://www.gopl.io/" target="_blank" rel="noopener">^11</a> 风格的错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not read config: open failed: open /Users/dfc/.settings.xml: no such file or directory</span><br></pre></td></tr></table></figure><p>并且错误值保留了对原始原因的引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  _, err := ReadConfig()</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"original error: %T %v\n"</span>, errors.Cause(err), errors.Cause(err))</span><br><span class="line">    fmt.Printf(<span class="string">"stack trace:\n%+v\n"</span>, err)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从而您可以恢复原始的错误，并且打印其堆栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">original error: *os.PathError open /Users/dfc/.settings.xml: no such file or directory</span><br><span class="line">stack trace:</span><br><span class="line">open /Users/dfc/.settings.xml: no such file or directory</span><br><span class="line">open failed</span><br><span class="line">main.ReadFile</span><br><span class="line">        /Users/dfc/devel/practical-go/src/errors/readfile2.go:16</span><br><span class="line">main.ReadConfig</span><br><span class="line">        /Users/dfc/devel/practical-go/src/errors/readfile2.go:29</span><br><span class="line">main.main</span><br><span class="line">        /Users/dfc/devel/practical-go/src/errors/readfile2.go:35</span><br><span class="line">runtime.main</span><br><span class="line">        /Users/dfc/go/src/runtime/proc.go:201</span><br><span class="line">runtime.goexit</span><br><span class="line">        /Users/dfc/go/src/runtime/asm_amd64.s:1333</span><br><span class="line">could not read config</span><br></pre></td></tr></table></figure><p>使用 <code>errors</code> 包让您得可以以人和机器都能检测到的方式向错误添加上下文。如果您昨天来看了我的讲演，就会知道 <code>error</code> 的包装正在进入即将发布的 Go 版本的标准库。</p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>我们选择 Go 开发项目通常是因为其并发的特性。Go 团队已经竭尽全力使 Go 中的并发性廉价（在硬件资源方面）并具有高性能，但是使用 Go 的并发性写出既不高性能也不可靠的代码仍然是可能的。在我即将离开的时候，我想留下一些关于避免并发特性带来的陷阱的建议。</p><p>Go 特性支持的第一类并发是针对通道、<code>select</code> 语句和 <code>go</code> 语句的。如果你从书籍或者培训课程中正式地学习过，你可能注意到并发这一节总是在最后才会讲到。这里也不例外，我选择最后才讲并发，好像它是对于 Go 程序员来说应该掌握的常规技能之外的附加部分。</p><p>这有两个方面。一方面 Go 的主旨是简单、轻量的并发模型。作为一个产品，我们的语言几乎只靠这方面进行兜售。另一方面，有一种说法认为并发实际上并不容易使用，否则作者并不会放到一本书的最后一章，我们回首我们之前的努力时也不会带有遗憾。</p><p>本节讨论使用 Go 原生的并发特性时的一些陷阱。</p><h2 id="保持自己忙碌，否则自己做"><a href="#保持自己忙碌，否则自己做" class="headerlink" title="保持自己忙碌，否则自己做"></a>保持自己忙碌，否则自己做</h2><p>这段程序有什么问题？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">"Hello, GopherCon SG"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码按我们预期在执行，他开启了一个简单的 Web 服务。但它同时又干了些别的事情，那就是在一个无限循环中浪费 CPU。这是因为<code>main</code>的最后一行<code>for {}</code>循环阻塞了主的协程，因为它不做任何输入输出，也不等待锁，也不在通道上做发送或接收，或以其他方式与调度程序通信。</p><p>由于 Go 运行时主要是协同安排的，因此该程序将在单个 CPU 上无效地循环，并且可能最终被实时锁定。</p><p>我们要怎么修复它呢？这里有个建议：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">  <span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">"Hello, GopherCon SG"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> &#123;</span><br><span class="line">    runtime.Gosched()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这可能看起来很愚蠢，但这是我看到的最通常的解决方案。这是不了解根本问题的症结所在。</p><p>现在，如果你对 Go 稍有经验，你可能写成这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">"Hello, GopherCon SG"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何一个空的 <code>select</code> 语句都会永远阻塞在那。这是个很有用的性质，因为现在我们不想仅仅因为调用<code>runtime.GoSched()</code>就让整个 CPU 都“旋转”起来。但这样做，我们只治了标，没有治本。</p><p>我想向你提出另一种解决方案，希望这一方案已经被采用了。与其让<code>http.ListenAndServe</code>在一个协程中执行并带来一个“主协程中应该做什么”的问题，不如简单地由主协程自己来执行<code>http.ListenAndServe</code>。</p><blockquote><p>小窍门：Go 程序的 <code>main.mian</code> 函数退出，则 Go 程序都会无条件退出，不论其他协程正在做什么。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"log"</span></span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(w, <span class="string">"Hello, GopherCon SG"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，这是我的第一个简易：如果你的协程在其他协程返回结果之前什么事都不能干，通常就应该直接了当地自己做这件事，而不是委托其他协程去做。</p><p>这通常也消除了将结果从协程引导回其发起者所需的大量状态跟踪和通道操作。</p><blockquote><p>小窍门：许多 Go 程序员滥用协程，特别是初学者。与生活中的所有事情一样，适度是成功的关键。</p></blockquote><h2 id="将并发留给调用者"><a href="#将并发留给调用者" class="headerlink" title="将并发留给调用者"></a>将并发留给调用者</h2><p>下面两个 API 的区别是什么？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListDirectory returns the contents of dir.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListDirectory</span><span class="params">(dir <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListDirectory returns a channel over which</span></span><br><span class="line"><span class="comment">// directory entries will be published. When the list</span></span><br><span class="line"><span class="comment">// of entries is exhausted, the channel will be closed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListDirectory</span><span class="params">(dir <span class="keyword">string</span>)</span> <span class="title">chan</span> <span class="title">string</span></span></span><br></pre></td></tr></table></figure><p>首先，显著的区别是，第一个例子读取目录到切片，然后将整个切片返回，否则如果有问题则返回一个错误。这是同步发生的，<code>ListDirectory</code>的调用者将被阻塞直到整个目录被读完。依赖于目录有多大，这个过程可能持续很长时间，也可能因为构建一个目录条目名称的切片，而分配大量的内存。</p><p>让我们来看看第二个例子。这更一个更像 Go，<code>ListDirectory</code>返回了一个传输目录条目的通道，当通道关闭时，表明没有更多目录条目了。由于通道信息发生在<code>ListDirectory</code>返回之后，<code>ListDirectory</code>内部可能开启了一个协程。</p><blockquote><p>注意：第二个版本实际上没有必要真的使用一个协程。它可以分配一个足以保存所有目录条目而不阻塞的通道，填充通道，关闭它，然后将通道返回给调用者。但这不太可能，因为这会消耗大量内存来缓冲通道中的所有结果。</p></blockquote><p>通道版本的<code>ListDirectory</code>还有两个进一步的问题：</p><ul><li>通过使用通道的关闭作为没有更多项目要处理的信号，<code>ListDirectory</code>在中途遇到错误就无法告知调用者返回的集合是不完整的。调用者也无法区分空目录和一读取就产生错误的情况，这两种结果对于<code>ListDirectory</code>返回的通道来说都是立即关闭。</li><li>调用者<strong>必须</strong>持续读取通道的内容直到通道关闭，因为这是让调用者知道协程已经结束的唯一办法。这是对<code>ListDirectory</code>的使用的一个严重限制。调用者必须花时间从通道读取数据，哪怕调用者已经接收到它想要的信息。就需要使用大量内存的中型到大型目录而言，它可能更有效，但这种方法并不比原始的基于切片的方法快。</li></ul><p>以上两个实现中的问题，其解决方案是使用回调。一个在每个目录条目上执行的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListDirectory</span><span class="params">(dir <span class="keyword">string</span>, fn <span class="keyword">func</span>(<span class="keyword">string</span>)</span>)</span></span><br></pre></td></tr></table></figure><p>毫不奇怪，<code>filepath.WalkDir</code>就是这么做的。</p><blockquote><p>小窍门：如果你的函数开启了一个协程，那么你必须给调用者提供一个停止协程的途径。将异步执行函数的决策留给该函数的调用者通常更容易。</p></blockquote><h2 id="不要启动一个永不停止的协程"><a href="#不要启动一个永不停止的协程" class="headerlink" title="不要启动一个永不停止的协程"></a>不要启动一个永不停止的协程</h2><p>上一个例子演示了没有必要的情况下使用协程。但使用 Go 的驱动原因之一是该语言提供的第一类并发功能。实际上，在许多情况下，您希望利用硬件中可用的并行性。为此，你必须使用协程。</p><p>这个简单的应用，在两个不同的端口上提供 http 服务，端口 8080 用于应用本身的流量，8081 用于访问 <code>/debug/pprof</code> 终结点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">  _ <span class="string">"net/http/pprof"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(resp, <span class="string">"Hello, QCon!"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">go</span> http.ListenAndServe(<span class="string">"127.0.0.1:8001"</span>, http.DefaultServeMux) <span class="comment">// debug</span></span><br><span class="line">  http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, mux)                       <span class="comment">// app traffic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管这个程序不是很复杂，但它代表了一个基本的真实应用程序。</p><p>随着应用程序的增长，有一些问题也显现出来，让我们现在来解决其中的一些。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveApp</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(resp, <span class="string">"Hello, QCon!"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveDebug</span><span class="params">()</span></span> &#123;</span><br><span class="line">  http.ListenAndServe(<span class="string">"127.0.0.1:8001"</span>, http.DefaultServeMux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">go</span> serveDebug()</span><br><span class="line">  serveApp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将 <code>serveApp</code> 和 <code>serveDebug</code> 的功能放到到各自的函数中，我们把他们从 main.main 分离出来。我们照样遵循了上面的建议，把 <code>serveApp</code> 和 <code>serveDebug</code> 的并发性留给了调用者。</p><p>但是这个程序有一些可操作性上的问题。如果<code>serveApp</code>返回则<code>main.main</code>会返回并导致程序关闭，最终由您正在使用的任何进程管理器重新启动。</p><blockquote><p>小窍门：正如函数的并发性留给调用者一样，应用应该将状态监视、重启留给程序的唤起者。不要让你的应用程序担负重启自身的责任，这是一个最好从应用程序外部处理的过程。</p></blockquote><p>但是，<code>serveDebug</code> 是在另一个协程中执行的，如果它退出，也仅仅是这个协程自身退出，程序的其他部分将继续运行。由于<code>/debug</code>处理程序停止工作，您的操作人员会很不高兴地发现他们无法在应用程序中获取统计信息。</p><p>我们要确保的是，负责服务此应用程序的任何协程停止，都关闭应用程序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveApp</span><span class="params">()</span></span> &#123;</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(resp, <span class="string">"Hello, QCon!"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, mux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveDebug</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">"127.0.0.1:8001"</span>, http.DefaultServeMux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">go</span> serveDebug()</span><br><span class="line">  <span class="keyword">go</span> serveApp()</span><br><span class="line">  <span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们通过必要时调用 <code>log.Fatal</code> 来检查 <code>serverApp</code> 和 <code>serveDebug</code> 从 <code>ListenAndServe</code> 返回的错误。由于两个处理器都是在协程中运行，我们使用 <code>select{}</code> 来阻塞主协程。</p><p>这种方法存在许多问题：</p><ol><li>如果 <code>ListenAndServe</code> 返回一个 <code>nil</code>，<code>log.Fatal</code>不会被调用，则对应的 HTTP 服务会停止，并且应用程序不会退出。</li><li><code>log.Fatal</code> 会调用 <code>os.Exit</code> 无条件终止进程，defer 不会被调用，其他协程不会被通知关闭，应用程序会停止。这会使得为这些函数编写测试用例变得很困难。</li></ol><blockquote><p>小窍门：只在 <code>main.main</code> 或 <code>init</code> 函数里使用 <code>log.Fatal</code>。</p></blockquote><p>我们需要的是，把任何错误都传回协程的发起者，以便于我们弄清楚为什么协程会停止，并且可以干净地关闭进程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveApp</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(resp, <span class="string">"Hello, QCon!"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> http.ListenAndServe(<span class="string">"0.0.0.0:8080"</span>, mux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveDebug</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> http.ListenAndServe(<span class="string">"127.0.0.1:8001"</span>, http.DefaultServeMux)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  done := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done &lt;- serveDebug()</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done &lt;- serveApp()</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> err := &lt;-done; err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"error: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用一个通道来收集协程返回的状态。通道的大小与我们要管理的协程数一致，从而使得向 <code>done</code> 通道发送状态时不会被阻塞，否则这将阻塞协程的关闭，导致泄漏。</p><p>由于没有办法安全地关闭 <code>done</code> 通道，我们不能使用 <code>for range</code> 循环通道知道所有协程都上报了信息，因此我们循环开启协程的次数，这也等于通道的容量。</p><p>现在我们有办法等待协程干净地退出，并且记录发生的日志。我们所需的仅仅是将一个协程的关闭信号，通知到其他协程而已。</p><p>其结果是，通知一个 <code>http.Server</code> 关闭这事被引入进来。所以我将这个逻辑转换为辅助函数。<code>serve</code> 帮助我们持有一个地址和一个 <code>http.Handler</code>，类似 <code>http.ListenAndServe</code> 以及一个用于触发 <code>Shutdown</code> 方法的 <code>stop</code> 通道。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serve</span><span class="params">(addr <span class="keyword">string</span>, handler http.Handler, stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  s := http.Server&#123;</span><br><span class="line">    Addr:    addr,</span><br><span class="line">    Handler: handler,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &lt;-stop <span class="comment">// wait for stop signal</span></span><br><span class="line">    s.Shutdown(context.Background())</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> s.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveApp</span><span class="params">(stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  mux := http.NewServeMux()</span><br><span class="line">  mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(resp http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprintln(resp, <span class="string">"Hello, QCon!"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> serve(<span class="string">"0.0.0.0:8080"</span>, mux, stop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveDebug</span><span class="params">(stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> serve(<span class="string">"127.0.0.1:8001"</span>, http.DefaultServeMux, stop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  done := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">2</span>)</span><br><span class="line">  stop := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done &lt;- serveDebug(stop)</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    done &lt;- serveApp(stop)</span><br><span class="line">  &#125;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stopped <span class="keyword">bool</span></span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> err := &lt;-done; err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"error: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !stopped &#123;</span><br><span class="line">      stopped = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">close</span>(stop)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，每当我们从 <code>done</code> 通道接收到一个值，就关闭 <code>stop</code> 通道，从而导致所有等待在这个通道上的协程关闭 <code>http.Server</code>。这将导致所有剩余的 <code>ListenAndServe</code> 协程返回。一旦我们启动的协程停止，<code>main.main</code> 便返回继而进程干净地停止了。</p><blockquote><p>小窍门：自己写这个逻辑是重复和微妙的。考虑类似这个包的东西，<a href="https://github.com/heptio/workgroup" target="_blank" rel="noopener">https://github.com/heptio/workgroup</a> 它将为你完成大部分工作。</p></blockquote><p>【完】</p><blockquote><p>翻译水平有限，如有偏颇之处，烦请<a href="http://shang.qq.com/wpa/qunwpa?idkey=2aa3ef00102d1db4f2275d835aabf3eb043e8ba7b22ead791ba469cdb198a8cc" target="_blank" rel="noopener">联系我</a>更正。转载请注明出处。翻译：Austin Luo；邮箱：<a href="mailto:uonun@163.com" target="_blank" rel="noopener">uonun@163.com</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;译者注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文为 &lt;strong&gt;QCon 2018 上海站&lt;/strong&gt;主题演讲嘉宾、Heptio 资深工程师、著名 Go 语言专家 &lt;a href=&quot;https://2018.qconshanghai.com/speaker/2503&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;David Cheney&lt;/a&gt; 关于 Go 语言实践的英文分享。为方便大家阅读，在此由 &lt;a href=&quot;https://www.udnz.com&quot;&gt;Austin Luo&lt;/a&gt; 翻译为中文，在文中难以理解之处，也特别增加了译者的理解说明。翻译水平有限，如有偏颇之处，烦请联系我（&lt;a href=&quot;mailto:uonun@163.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;uonun@163.com&lt;/a&gt;）更正。转载请注明出处，保留本节译者注。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指导原则&lt;ul&gt;
&lt;li&gt;简单性&lt;/li&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;生产率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标识符&lt;ul&gt;
&lt;li&gt;选择清晰的名称，而不是简洁的名称&lt;/li&gt;
&lt;li&gt;标识符长度&lt;/li&gt;
&lt;li&gt;命名中不要包含所属类型的名称&lt;/li&gt;
&lt;li&gt;使用一致的命名风格&lt;/li&gt;
&lt;li&gt;使用一致的声明风格&lt;/li&gt;
&lt;li&gt;成为团队合作者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码注释&lt;ul&gt;
&lt;li&gt;变量和常量上的注释应当描述它的内容，而非目的&lt;/li&gt;
&lt;li&gt;总是为公开符号写文档说明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;包的设计&lt;ul&gt;
&lt;li&gt;一个好的包从它的名称开始&lt;/li&gt;
&lt;li&gt;避免将包命名为 base、common、util&lt;/li&gt;
&lt;li&gt;快速返回，而不是深层嵌套&lt;/li&gt;
&lt;li&gt;让零值变得有意义&lt;/li&gt;
&lt;li&gt;避免包级别的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目结构&lt;ul&gt;
&lt;li&gt;考虑更少，更大的包&lt;/li&gt;
&lt;li&gt;确保 main 包越小越好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;API 设计&lt;ul&gt;
&lt;li&gt;设计难以被误用的 API&lt;/li&gt;
&lt;li&gt;针对默认用例设计 API&lt;/li&gt;
&lt;li&gt;让函数自身定义它所需的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误处理&lt;ul&gt;
&lt;li&gt;通过消除错误来消除错误处理&lt;/li&gt;
&lt;li&gt;错误只处理一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并发&lt;ul&gt;
&lt;li&gt;保持自己忙碌，否则自己做&lt;/li&gt;
&lt;li&gt;将并发留给调用者&lt;/li&gt;
&lt;li&gt;不要启动一个永不停止的协程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来这两场我将给大家一些编写 Go 代码的最佳实践。&lt;/p&gt;
&lt;p&gt;今天这是一个研讨会风格的演讲，我会摒弃那些绚丽的 PPT，而是使用您们可以直接带走的文档。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;您可以在这里找到这个演讲最新的在线版本：&lt;br&gt;&lt;a href=&quot;https://dave.cheney.net/practical-go/presentations/qcon-china.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dave.cheney.net/practical-go/presentations/qcon-china.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Go" scheme="https://www.udnz.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>在 Visual Studio Code 中使用 MINGW32 作为终端</title>
    <link href="https://www.udnz.com/2018/10/08/%E5%9C%A8-Visual-Studio-Code-%E4%B8%AD%E4%BD%BF%E7%94%A8-MINGW32-%E4%BD%9C%E4%B8%BA%E7%BB%88%E7%AB%AF/"/>
    <id>https://www.udnz.com/2018/10/08/在-Visual-Studio-Code-中使用-MINGW32-作为终端/</id>
    <published>2018-10-08T09:09:18.000Z</published>
    <updated>2018-10-08T09:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>打开 Visual Studio Code 的设置，按如下配置即可：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 找到您的 git 目录</span><br><span class="line">  <span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\Program Files (x86)\\Git\\bin\\bash.exe"</span>,</span><br><span class="line">  <span class="string">"terminal.integrated.shellArgs.windows"</span>: [<span class="string">"--login"</span>, <span class="string">"-i"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开 Visual Studio Code 的设置，按如下配置即可：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="VSC" scheme="https://www.udnz.com/tags/VSC/"/>
    
  </entry>
  
  <entry>
    <title>Linux 环境一键打包发布脚本</title>
    <link href="https://www.udnz.com/2018/10/06/Linux-%E7%8E%AF%E5%A2%83%E4%B8%80%E9%94%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/"/>
    <id>https://www.udnz.com/2018/10/06/Linux-环境一键打包发布脚本/</id>
    <published>2018-10-06T10:16:28.000Z</published>
    <updated>2018-10-06T10:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下脚本作为工作笔记沉淀，记录一下。</p><a id="more"></a><p>deploy.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本脚本用于开发环境，直接打包需要发布的文件，然后通过 SSH 复制到服务器并直接通过 pm2 启动执行。</span></span><br><span class="line"><span class="comment"># 主要功能：</span></span><br><span class="line"><span class="comment">#   - 打包本地文件</span></span><br><span class="line"><span class="comment">#   - 剪切备份 $BUILDDIR 目录（实际程序执行的目录）</span></span><br><span class="line"><span class="comment">#   - 复制到远程服务器 $BUILDDIR 目录</span></span><br><span class="line"><span class="comment">#   - 解压</span></span><br><span class="line"><span class="comment">#   - 使用备份的配置文件覆盖</span></span><br><span class="line"><span class="comment">#   - 启动程序</span></span><br><span class="line"></span><br><span class="line">WORKROOT=/path/to/your/dir/on/remote/server</span><br><span class="line">BUILDDIR=<span class="variable">$WORKROOT</span>/build</span><br><span class="line"></span><br><span class="line">SKEY=<span class="string">" -i ~/.ssh/your-ssh-key-file"</span></span><br><span class="line">SCHANNEL=<span class="string">"your-ssh-user@your-ssh-host"</span></span><br><span class="line">SROOT=<span class="variable">$SCHANNEL</span>:<span class="variable">$WORKROOT</span></span><br><span class="line">SBUILD=<span class="variable">$SCHANNEL</span>:<span class="variable">$BUILDDIR</span></span><br><span class="line">DATE=`date <span class="string">'+%Y-%m-%d%H%M%S'</span>`</span><br><span class="line"></span><br><span class="line">. ./bash/pack.sh <span class="variable">$DATE</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"copying files..."</span></span><br><span class="line">scp <span class="variable">$SKEY</span> -r ./build/build-<span class="variable">$DATE</span>.zip <span class="variable">$SROOT</span></span><br><span class="line">ssh <span class="variable">$SKEY</span> <span class="variable">$SCHANNEL</span> mv <span class="variable">$BUILDDIR</span> <span class="variable">$BUILDDIR</span>-<span class="variable">$DATE</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"unzipping files..."</span></span><br><span class="line">ssh <span class="variable">$SKEY</span> <span class="variable">$SCHANNEL</span> unzip -q <span class="variable">$WORKROOT</span>/build-<span class="variable">$DATE</span>.zip -d <span class="variable">$BUILDDIR</span></span><br><span class="line"><span class="comment">#ssh $SKEY $SCHANNEL cp $WORKROOT/bak/etc/config.json $BUILDDIR/etc/config.json</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"starting..."</span></span><br><span class="line">CMD=<span class="string">"cd <span class="variable">$BUILDDIR</span> ; pm2 restart ./etc/pm2.config.json"</span></span><br><span class="line">ssh <span class="variable">$SKEY</span> <span class="variable">$SCHANNEL</span> <span class="variable">$CMD</span></span><br></pre></td></tr></table></figure><p>pack.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要在项目根目录执行，如：./bash/pack.sh</span></span><br><span class="line"></span><br><span class="line">DATE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$DATE</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">  DATE=`date <span class="string">'+%Y-%m-%d%H%M%S'</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份本地配置，使用生产环境配置</span></span><br><span class="line">mv ./etc/config.json ./etc/config.dev.json.bak</span><br><span class="line">mv ./etc/config.prod.json ./etc/config.json</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"packing files..."</span></span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./bin</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./dal</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./etc -i ./etc/*.json</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./controller</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./middlewares</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./models</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./node_modules</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./public</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./routes</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./utils</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./views</span><br><span class="line">zip -r -q ./build/build-<span class="variable">$DATE</span>.zip ./app.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原配置</span></span><br><span class="line">mv ./etc/config.json ./etc/config.prod.json</span><br><span class="line">mv ./etc/config.dev.json.bak ./etc/config.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下脚本作为工作笔记沉淀，记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.udnz.com/tags/Linux/"/>
    
      <category term="DevOps" scheme="https://www.udnz.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>通过 SSH 隧道链接远程 MySQL</title>
    <link href="https://www.udnz.com/2018/10/01/%E9%80%9A%E8%BF%87-SSH-%E9%9A%A7%E9%81%93%E9%93%BE%E6%8E%A5%E8%BF%9C%E7%A8%8B-MySQL/"/>
    <id>https://www.udnz.com/2018/10/01/通过-SSH-隧道链接远程-MySQL/</id>
    <published>2018-10-01T12:18:10.000Z</published>
    <updated>2018-10-01T12:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景：</p><ul><li>SSH 跳板机：10.0.0.1</li><li>MySQL 数据库：10.0.0.2:3306</li></ul><p>MySQL 部署的机器不允许 SSH 连接，并且数据库端口只允许 localhost 或 10.0.0.1 这台跳板机访问，此时本机可以通过 ssh 连上跳板机，通过 ssh 建立的隧道端口转发连接上 MySQL 数据库。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机连接跳板机</span></span><br><span class="line"><span class="comment"># 打开本机 13306 端口，代理到 ssh 跳板机，并且通过跳板机访问 10.0.0.2:3306</span></span><br><span class="line">ssh -fCPN -L localhost:13306:10.0.0.2:3306 root@10.0.0.1</span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line"><span class="comment"># -C    使用压缩功能,是可选的,加快速度.</span></span><br><span class="line"><span class="comment"># -P    用一个非特权端口进行出去的连接.</span></span><br><span class="line"><span class="comment"># -f    一旦SSH完成认证并建立port forwarding,则转入后台运行.</span></span><br><span class="line"><span class="comment"># -N    不执行远程命令.该参数在只打开转发端口时很有用（V2版本SSH支持）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接 MySQL</span></span><br><span class="line">mysql -uusername -ppassword -hlocalhost -P13306</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://mingxinglai.com/cn/2015/09/connect-mysql-via-ssh-tunnel/" target="_blank" rel="noopener">http://mingxinglai.com/cn/2015/09/connect-mysql-via-ssh-tunnel/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH 跳板机：10.0.0.1&lt;/li&gt;
&lt;li&gt;MySQL 数据库：10.0.0.2:3306&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL 部署的机器不允许 SSH 连接，并且数据库端口只允许 localhost 或 10.0.0.1 这台跳板机访问，此时本机可以通过 ssh 连上跳板机，通过 ssh 建立的隧道端口转发连接上 MySQL 数据库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://www.udnz.com/tags/Linux/"/>
    
      <category term="SSH" scheme="https://www.udnz.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Architecture</title>
    <link href="https://www.udnz.com/2018/09/30/Understanding-Architecture/"/>
    <id>https://www.udnz.com/2018/09/30/Understanding-Architecture/</id>
    <published>2018-09-30T07:13:43.000Z</published>
    <updated>2018-09-30T07:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="架构是这样定义的"><a href="#架构是这样定义的" class="headerlink" title="架构是这样定义的"></a>架构是这样定义的</h1><ul><li>每个系统都有一个架构</li><li>架构由架构元素以及相互之间的关系构成</li><li>系统是为了满足 <strong>利益相关者（stakeholder）</strong> 的需求而构建的</li><li>利益相关者都有自己的<strong>关注点（concerns）</strong></li><li>架构由架构文档描述</li><li>架构文档描述了一系列的<strong>架构视角</strong></li><li>每个视角都解决并且对应到利益相关者的关注点。</li></ul><p>架构师的首要任务是尽最大可能找出所有利益相关者，业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。架构师常犯错误是漏掉重要的利益相关者，沟通不充分，都会造成架构有欠缺，不能满足利益相关者的需求。利益相关者的关注点是有可能冲突的，比如管理层（可管理性）vs技术方（性能），业务方（多快好省）vs 技术方（可靠稳定），这需要架构师去灵活平衡，如何平衡体现了架构师的水平和价值。</p><a id="more"></a><blockquote><p>Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.</p><p>—- Grady Booch, UML的创始人之一</p><p>架构表示对一个系统的成型起关键作用的设计决策，这里的关键性是由“改变它”的成本来决定的。</p></blockquote><p>微服务中每个服务可以独立演变，它的cost of change比较小，整体架构比较灵活，是一种支持创新的演化式架构。</p><h1 id="Architecture-Requirements"><a href="#Architecture-Requirements" class="headerlink" title="Architecture Requirements"></a>Architecture Requirements</h1><table><thead><tr><th>Requirement</th><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>Easy to separate</td><td>Autonomy</td><td>易分离，自治性</td></tr><tr><td>Easy to understand</td><td>Understandablility</td><td>可理解性</td></tr><tr><td>Easy to extend</td><td>Extensibility</td><td>可延展性</td></tr><tr><td>Easy to change</td><td>Changeability</td><td>可变性</td></tr><tr><td>Easy to replace</td><td>Replaceability</td><td>可替换性</td></tr><tr><td>Easy to deploy</td><td>Deployability</td><td>可部署性</td></tr><tr><td>Easy to scale</td><td>Scalability</td><td>伸缩性，可扩展性</td></tr><tr><td>Easy to recover</td><td>Resilience</td><td>可恢复性</td></tr><tr><td>Easy to connect</td><td>Uniform interface</td><td>易连接，易集成，统一接口</td></tr><tr><td>Easy to afford</td><td>Cost-efficiency</td><td>成本效率，性价比</td></tr></tbody></table><p>架构的目标是用于管理复杂性、易变性和不确定性，以确保在长期的系统演化过程中，一部分架构的变化不会对架构的其它部分产生不必要的负面影响。这样做可以确保业务和研发效率的敏捷，让应用的易变部分能够频繁地变化，对应用的其它部分的影响尽可能的小。</p><h1 id="微服务更多是关于组织和团队，而不是技术"><a href="#微服务更多是关于组织和团队，而不是技术" class="headerlink" title="微服务更多是关于组织和团队，而不是技术"></a>微服务更多是关于组织和团队，而不是技术</h1><blockquote><p>organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations.</p><p>康威定律：设计系统的组织，其产生的设计和架构等价于组织间的沟通结构.</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1411204-7b51d528373115c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;架构是这样定义的&quot;&gt;&lt;a href=&quot;#架构是这样定义的&quot; class=&quot;headerlink&quot; title=&quot;架构是这样定义的&quot;&gt;&lt;/a&gt;架构是这样定义的&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;每个系统都有一个架构&lt;/li&gt;
&lt;li&gt;架构由架构元素以及相互之间的关系构成&lt;/li&gt;
&lt;li&gt;系统是为了满足 &lt;strong&gt;利益相关者（stakeholder）&lt;/strong&gt; 的需求而构建的&lt;/li&gt;
&lt;li&gt;利益相关者都有自己的&lt;strong&gt;关注点（concerns）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;架构由架构文档描述&lt;/li&gt;
&lt;li&gt;架构文档描述了一系列的&lt;strong&gt;架构视角&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每个视角都解决并且对应到利益相关者的关注点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构师的首要任务是尽最大可能找出所有利益相关者，业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。架构师常犯错误是漏掉重要的利益相关者，沟通不充分，都会造成架构有欠缺，不能满足利益相关者的需求。利益相关者的关注点是有可能冲突的，比如管理层（可管理性）vs技术方（性能），业务方（多快好省）vs 技术方（可靠稳定），这需要架构师去灵活平衡，如何平衡体现了架构师的水平和价值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="https://www.udnz.com/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 环境搭建</title>
    <link href="https://www.udnz.com/2018/09/30/Kubernetes/"/>
    <id>https://www.udnz.com/2018/09/30/Kubernetes/</id>
    <published>2018-09-30T03:08:49.000Z</published>
    <updated>2018-11-30T12:59:46.516Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#kubernetes">kubernetes</a><ul><li><a href="#安装-vm-驱动">安装 VM 驱动</a></li><li><a href="#--virtualbox">- VirtualBox</a></li><li><a href="#--kvm2">- KVM2</a></li><li><a href="#--其他驱动">- 其他驱动</a></li><li><a href="#安装-kubectl">安装 kubectl</a></li><li><a href="#安装-minikube">安装 minikube</a></li></ul></li><li><a href="#运行">运行</a><ul><li><a href="#拉取-k8s-相关镜像">拉取 k8s 相关镜像</a></li><li><a href="#kubenetes">Kubenetes</a></li><li><a href="#向-kubernetes-添加账号">向 kubernetes 添加账号</a></li></ul></li><li><a href="#相关问题">相关问题</a><ul><li><a href="#failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-cgroupfs-is-different-from-docker-cgrdriver-systemd">failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”</a></li><li><a href="#error-filecontent--proc-sys-net-bridge-bridge-nf-call-iptables-procsysnetbridgebridge-nf-call-iptables-contents-are-not-set-to-1">[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1</a></li><li><a href="#unable-to-update-cni-config-no-networks-found-in-etccninetd">Unable to update cni config: No networks found in /etc/cni/net.d</a></li></ul></li><li><a href="#参考">参考</a></li></ul><!-- /TOC --><a id="more"></a><h1 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h1><p>指引：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-kubectl/</a></p><h2 id="安装-VM-驱动"><a href="#安装-VM-驱动" class="headerlink" title="安装 VM 驱动"></a>安装 VM 驱动</h2><blockquote><p>腾讯云 CVM 未能启用驱动启动 minikube，安装驱动的过程可忽略。</p></blockquote><h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="- VirtualBox"></a>- VirtualBox</h2><blockquote><p>CentOS：虚拟机不支持内部 VM，未在物理机上尝试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo</span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum install -y binutils gcc make patch libgomp glibc-headers glibc-devel kernel-headers kernel-devel dkms</span><br><span class="line">yum install -y VirtualBox-5.2</span><br><span class="line"></span><br><span class="line">service vboxdrv start</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.if-not-true-then-false.com/2010/install-virtualbox-with-yum-on-fedora-centos-red-hat-rhel/" target="_blank" rel="noopener">https://www.if-not-true-then-false.com/2010/install-virtualbox-with-yum-on-fedora-centos-red-hat-rhel/</a></li><li><a href="https://www.virtualbox.org/wiki/Linux_Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Linux_Downloads</a></li><li><a href="https://www.cnblogs.com/harry-h/p/6405433.html" target="_blank" rel="noopener">https://www.cnblogs.com/harry-h/p/6405433.html</a></li></ul><blockquote><p>MAC 上可以直接下载安装：<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></p></blockquote><h2 id="KVM2"><a href="#KVM2" class="headerlink" title="- KVM2"></a>- KVM2</h2><blockquote><p>安装成功，但 <code>minikube start</code> 时未能尝试成功</p></blockquote><p><a href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm2-driver" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm2-driver</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt-daemon-kvm qemu-kvm</span><br><span class="line"></span><br><span class="line">curl -Lo docker-machine-driver-kvm2 https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 \</span><br><span class="line">&amp;&amp; chmod +x docker-machine-driver-kvm2 \</span><br><span class="line">&amp;&amp; sudo cp docker-machine-driver-kvm2 /usr/<span class="built_in">local</span>/bin/ \</span><br><span class="line">&amp;&amp; rm docker-machine-driver-kvm2</span><br></pre></td></tr></table></figure><p>附：查看虚拟机网络以及使用不同的网络启动 minikube</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libvirt virt-install bridge-utils</span><br><span class="line"><span class="comment"># 查看虚拟机网络</span></span><br><span class="line">virsh net-list --all</span><br><span class="line"><span class="comment"># 使用不同的虚拟机网络(minikube-net)</span></span><br><span class="line">minikube start --vm-driver kvm2 --kvm-network minikube-net</span><br></pre></td></tr></table></figure><h2 id="其他驱动"><a href="#其他驱动" class="headerlink" title="- 其他驱动"></a>- 其他驱动</h2><p>指引：<a href="https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm-driver" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#kvm-driver</a></p><h2 id="安装-kubectl"><a href="#安装-kubectl" class="headerlink" title="安装 kubectl"></a>安装 kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum install -y kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># MAC: 方式一</span></span><br><span class="line">brew install kubernetes-cli</span><br><span class="line"><span class="comment"># MAC：方式二</span></span><br><span class="line">curl -Lo kubectl http://storage.googleapis.com/kubernetes-release/release/v1.5.1/bin/darwin/amd64/kubectl &amp;&amp; chmod +x kubectl &amp;&amp; sudo mv kubectl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装校验</span></span><br><span class="line">kubectl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保服务已启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet.service</span><br><span class="line">systemctl start kubelet.service</span><br></pre></td></tr></table></figure><h2 id="安装-minikube"><a href="#安装-minikube" class="headerlink" title="安装 minikube"></a>安装 minikube</h2><p>指引：<a href="https://github.com/kubernetes/minikube/releases" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/releases</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.29.0/minikube-linux-amd64 \</span><br><span class="line">    &amp;&amp; chmod +x minikube \</span><br><span class="line">    &amp;&amp; sudo cp minikube /usr/<span class="built_in">local</span>/bin/ \</span><br><span class="line">    &amp;&amp; rm minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># MAC</span></span><br><span class="line">brew cask install minikube</span><br></pre></td></tr></table></figure><hr><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p><strong>（使用 KVM2 驱动）运行之前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> libvirtd &amp;&amp; systemctl start libvirtd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程文件</span></span><br><span class="line">ls -l /var/run/libvirt/libvirt-sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若进程文件不存在，则修改配置：</span></span><br><span class="line">vi /etc/libvirt/libvirtd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消行前注释，重新启动服务</span></span><br><span class="line"><span class="comment">#unix_sock_dir = "/var/run/libvirt"</span></span><br></pre></td></tr></table></figure><h2 id="拉取-k8s-相关镜像"><a href="#拉取-k8s-相关镜像" class="headerlink" title="拉取 k8s 相关镜像"></a>拉取 k8s 相关镜像</h2><p>原本在 <code>minikube start</code> 命令中会自动拉取镜像，但是因为众所周知的原因，我们无法成功拉取到镜像。这里可以使用阿里 docker 容器镜像服务：<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入虚拟机拉取，而非本机</span></span><br><span class="line">minikube ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-apiserver-amd64:v1.10.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-controller-manager-amd64:v1.10.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/kube-scheduler-amd64:v1.10.0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/k8sth/etcd-amd64:3.1.12</span><br><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com/kubernetes_google/kubernetes-dashboard-amd64:v1.10.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/kube-apiserver-amd64:v1.10.0 k8s.gcr.io/kube-apiserver-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/kube-controller-manager-amd64:v1.10.0 k8s.gcr.io/kube-controller-manager-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/kube-scheduler-amd64:v1.10.0 k8s.gcr.io/kube-scheduler-amd64:v1.10.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/k8sth/etcd-amd64:3.1.12 k8s.gcr.io/etcd-amd64:3.1.12</span><br><span class="line">docker tag registry.cn-shenzhen.aliyuncs.com/kubernetes_google/kubernetes-dashboard-amd64:v1.10.0 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0</span><br></pre></td></tr></table></figure><h2 id="Kubenetes"><a href="#Kubenetes" class="headerlink" title="Kubenetes"></a>Kubenetes</h2><p>指引：<a href="https://kubernetes.io/docs/setup/minikube/#quickstart" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/minikube/#quickstart</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在代理下运行时，需要指定正确的代理，否则 minikube 在内部访问网络会有问题</span></span><br><span class="line"><span class="comment"># 注意，代理地址应当是在虚拟机中能够访问的地址，不能使用 127.0.0.1、localhost 这种</span></span><br><span class="line">https_proxy=http://web-proxy.oa.com:8080</span><br><span class="line">minikube start \</span><br><span class="line">    --docker-env http_proxy=http://web-proxy.oa.com:8080 \</span><br><span class="line">    --docker-env https_proxy=http://web-proxy.oa.com:8080 \</span><br><span class="line">    --docker-env no_proxy=192.168.99.0/24</span><br><span class="line">    --vm-driver=none</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装和启动过程中可能产生错误，通过该命令查看日志</span></span><br><span class="line">minikube logs -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 k8s（ CentOS 上不使用任何 vm 驱动，MAC 上默认可使用 VirtualBox）</span></span><br><span class="line">minikube start \</span><br><span class="line">    --network-plugin=cni \</span><br><span class="line">    --container-runtime=containerd \</span><br><span class="line">    --bootstrapper=kubeadm</span><br><span class="line">    --vm-driver=none</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dashboard</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/dashboard</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml</span><br><span class="line">kubectl proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署及运行镜像</span></span><br><span class="line">kubectl run hello-minikube --image=registry.cn-hangzhou.aliyuncs.com/acs/echoserver:1.4 --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出服务</span></span><br><span class="line">kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询 Pod</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl describe --namespace=kube-system po kubernetes-dashboard-6f4cfc5d87-d647l</span><br><span class="line">kubectl logs kubernetes-dashboard-6f4cfc5d87-x976v --namespace=kube-system</span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用服务</span></span><br><span class="line">curl $(minikube service hello-minikube --url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">kubectl delete services hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line">kubectl delete deployment hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 k8s</span></span><br><span class="line">minikube stop</span><br></pre></td></tr></table></figure><h2 id="向-kubernetes-添加账号"><a href="#向-kubernetes-添加账号" class="headerlink" title="向 kubernetes 添加账号"></a>向 kubernetes 添加账号</h2><p><a href="https://github.com/kubernetes/dashboard/wiki/Creating-sample-user" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/wiki/Creating-sample-user</a></p><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><h2 id="failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-“cgroupfs”-is-different-from-docker-cgr…driver-“systemd”"><a href="#failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-“cgroupfs”-is-different-from-docker-cgr…driver-“systemd”" class="headerlink" title="failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”"></a>failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”</h2><p>该问题因为 docker 的配置和 kubelet 的配置不一致导致。</p><p>使用 docker info 打印 docker 信息：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_16_centos kubelet.service.d]# docker info | grep Driver</span><br><span class="line"> <span class="literal">WARNING</span>: Usage <span class="keyword">of</span> loopback devices <span class="keyword">is</span> strongly discouraged <span class="keyword">for</span> production <span class="keyword">use</span>. <span class="keyword">Use</span> `<span class="comment">--storage-opt dm.thinpooldev` to specify a custom block storage device.</span></span><br><span class="line">  <span class="literal">WARNING</span>: You<span class="symbol">'re</span> <span class="keyword">not</span> using the <span class="keyword">default</span> seccomp profile</span><br><span class="line">Storage Driver: devicemapper</span><br><span class="line">Logging Driver: journald</span><br><span class="line">Cgroup Driver: systemd</span><br></pre></td></tr></table></figure><p>而查看 kubelet 服务的启动参数（<code>--cgroup-driver</code>），其设置为 <code>cgroupfs</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_16_centos kubelet.service.d]# more /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line"><span class="attribute">Wants</span>=docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/bin/kubelet <span class="attribute">--hostname-override</span>=minikube <span class="attribute">--cluster-domain</span>=cluster.local <span class="attribute">--cgroup-driver</span>=cgroupfs <span class="attribute">--authorization-mode</span>=Webhook <span class="attribute">--client-ca-file</span>=/var/lib/minikube/certs/ca.crt <span class="attribute">--fail-swap-on</span>=<span class="literal">false</span> <span class="attribute">--kubeconfig</span>=/etc/kubernetes/ku</span><br><span class="line">belet.conf <span class="attribute">--bootstrap-kubeconfig</span>=/etc/kubernetes/bootstrap-kubelet.conf <span class="attribute">--pod-manifest-path</span>=/etc/kubernetes/manifests <span class="attribute">--allow-privileged</span>=<span class="literal">true</span> <span class="attribute">--cluster-dns</span>=10.96.0.10 <span class="attribute">--cadvisor-port</span>=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure><p>此时，修改 docker 的服务参数（<code>vi /usr/lib/systemd/system/docker.service</code>），将其中的 <code>--exec-opt native.cgroupdriver</code> 参数值改为 <code>cgroupfs</code> 。</p><p>然后，重启 docker，重启 kubelet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="ERROR-FileContent–proc-sys-net-bridge-bridge-nf-call-iptables-proc-sys-net-bridge-bridge-nf-call-iptables-contents-are-not-set-to-1"><a href="#ERROR-FileContent–proc-sys-net-bridge-bridge-nf-call-iptables-proc-sys-net-bridge-bridge-nf-call-iptables-contents-are-not-set-to-1" class="headerlink" title="[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1"></a>[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1</h2><p>解决方案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure></p><h2 id="Unable-to-update-cni-config-No-networks-found-in-etc-cni-net-d"><a href="#Unable-to-update-cni-config-No-networks-found-in-etc-cni-net-d" class="headerlink" title="Unable to update cni config: No networks found in /etc/cni/net.d"></a>Unable to update cni config: No networks found in /etc/cni/net.d</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubernetes-cni</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/a42eeb66a19c" target="_blank" rel="noopener">https://www.jianshu.com/p/a42eeb66a19c</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#kubernetes&quot;&gt;kubernetes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#安装-vm-驱动&quot;&gt;安装 VM 驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#--virtualbox&quot;&gt;- VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#--kvm2&quot;&gt;- KVM2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#--其他驱动&quot;&gt;- 其他驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装-kubectl&quot;&gt;安装 kubectl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#安装-minikube&quot;&gt;安装 minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#运行&quot;&gt;运行&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#拉取-k8s-相关镜像&quot;&gt;拉取 k8s 相关镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kubenetes&quot;&gt;Kubenetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#向-kubernetes-添加账号&quot;&gt;向 kubernetes 添加账号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#相关问题&quot;&gt;相关问题&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#failed-to-create-kubelet-misconfiguration-kubelet-cgroup-driver-cgroupfs-is-different-from-docker-cgrdriver-systemd&quot;&gt;failed to create kubelet: misconfiguration: kubelet cgroup driver: “cgroupfs” is different from docker cgr…driver: “systemd”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#error-filecontent--proc-sys-net-bridge-bridge-nf-call-iptables-procsysnetbridgebridge-nf-call-iptables-contents-are-not-set-to-1&quot;&gt;[ERROR FileContent–proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#unable-to-update-cni-config-no-networks-found-in-etccninetd&quot;&gt;Unable to update cni config: No networks found in /etc/cni/net.d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
    
    </summary>
    
    
      <category term="k8s" scheme="https://www.udnz.com/tags/k8s/"/>
    
      <category term="kubernetes" scheme="https://www.udnz.com/tags/kubernetes/"/>
    
      <category term="Micro Service" scheme="https://www.udnz.com/tags/Micro-Service/"/>
    
  </entry>
  
  <entry>
    <title>记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪</title>
    <link href="https://www.udnz.com/2018/06/15/%E8%AE%B0%E4%B8%80%E6%AC%A1-NET-Framework-%E4%B8%8D%E5%85%BC%E5%AE%B9-HTTP-COOKIE-%E5%8D%8F%E8%AE%AE%E6%A0%87%E5%87%86%E7%9A%84%E9%97%AE%E9%A2%98%E8%B7%9F%E8%B8%AA/"/>
    <id>https://www.udnz.com/2018/06/15/记一次-NET-Framework-不兼容-HTTP-COOKIE-协议标准的问题跟踪/</id>
    <published>2018-06-15T08:48:16.000Z</published>
    <updated>2018-06-15T08:48:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在后端系统实现了 HTTP 请求的代理类，用于请求其他第三方系统。大致的请求流程是这样的：</p><p><img src="/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-1.png" alt=""></p><p>消费系统不能直接请求业务系统的 HTTP 接口，需要由中间的 HttpHelper 代理请求。其中 HttpHelper 接受消费系统传入的各种参数，包括要请求的 URL、METHOD、HEAD、BODY 等，在实际生产中一直运行得很好，直到如下异常的出现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.Net.CookieException: Cookie format error.</span><br><span class="line">   at System.Net.CookieContainer.CookieCutter(Uri uri, String headerName, String setCookieHeader, Boolean isThrow)</span><br></pre></td></tr></table></figure><a id="more"></a><p>跟进异常信息，很容易知道是设置 Cookie 时发生的异常。根据请求端传入的 HEAD 信息排查，我们很容易还原故障现场：传入 HTTP 头信息 <code>Cookie: expires=Fri, 15 Jun 2018 15:19:14 GMT</code></p><p><img src="/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-2.png" alt=""></p><p>这里是在设置 Cookie 的过期时间，并且这个时间看起来也正常，并没有格式错误或者时间不存在的错误。看起来问题不出在时间本身上。上网查查 HTTP 规范，根据 HTTP Cookie 协议，也是允许如下形式的字符串的，看起来也没有什么问题：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span>: sessionToken=abc123; Expires=Wed, 09 Jun 2021 10:18:14 GMT</span><br></pre></td></tr></table></figure><p>既然异常是微软代码抛出来的，也给了具体抛出异常的方法的地方，那么我们就来翻翻微软代码吧。终于，在微软代码 System.Net.Cookie.VerifySetDefaults:L382 发现了问题所在。在这里，微软在校验 Cookie 值时，如果发现指定的值字符串中有保留字符（“,”、”;”），则要求该值必须使用双引号引起来，否则就会抛出异常。查看我们请求的头，在 expires 的值“Fri, 15 Jun 2018 15:19:14 GMT”中，的确有“,”存在，并且值也并未使用双引号引起来。于是我尝试修改传入的 HTTP 头参数：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span>: expires=“Fri, 15 Jun 2018 15:19:14 GMT”</span><br></pre></td></tr></table></figure><p>很自然，异常不再存在了，目前看起来的确是微软的这段代码导致了抛出异常。</p><p>你们我们来看看，这个值到底是不是可以去加双引号吧。继续上网翻文档，在 <code>rfc2965#section-3.1</code> 和 <code>rfc6265#section-4.1.1</code> 中提到，值可以是字符串或引号引起来的字符串（<code>quoted-string</code>），这是 在 HTTP State Management Mechanism 中有所规定的。那么我们可以很放心地做这个兼容性处理了，即，当传入的 Cookie 值包含保留字符，并且未被双引号引起来时（一定会产生异常），我们自动地追加双引号，把值引起来，这样既可避免微软对值进行严格校验时抛出异常了。</p><p>但是，此事还没有到此为止，我们实际来试试，加了双引号之后，业务系统是否能够正确收到消费系统传入的头呢？收到的头，是否为消费系统的正确意图呢？</p><p><img src="/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-3.png" alt=""></p><p>值得注意的是，在业务系统里获取到的 Cookie 值，是添加了引号的值，并不是严格地与消费系统里传入的文本一致。</p><p>到此为止，应对这个异常便有两个方案了：</p><ol><li>传入的 Cookie 值包含保留字符，并且未被双引号引起来时（一定会产生异常），我们自动地追加双引号。</li><li>什么都不做，按原意抛出异常，提醒调用者更正 HTTP 头信息的格式。</li></ol><p>在我们的项目中，由于情况特殊（使用场景为后端服务之间的通信交互），一般不涉及到 Cookie 的设置，并且消费服务可能由很多个不同的团队实现，而业务服务可以统一处理添加的双引号，因此我们采用了方案 1。至于其他场景，实际上个人偏向于采用方案 2，不掩盖任何问题——特别是因为加了双引号之后，请求接受端接收到的值，不能完全原样表达请求发起端设置的值。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://en.wikipedia.org/wiki/HTTP_cookie" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/HTTP_cookie</a></li><li><a href="https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,67f8e4d3cb862668" target="_blank" rel="noopener">https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,67f8e4d3cb862668</a></li><li><a href="https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,dca3e494aed8e006" target="_blank" rel="noopener">https://referencesource.microsoft.com/#System/net/System/Net/cookie.cs,dca3e494aed8e006</a></li><li><a href="https://tools.ietf.org/html/rfc6265#section-4.1.1" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc6265#section-4.1.1</a></li><li><a href="https://tools.ietf.org/html/rfc2965#section-3.1" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2965#section-3.1</a></li><li><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在后端系统实现了 HTTP 请求的代理类，用于请求其他第三方系统。大致的请求流程是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/记一次 .NET Framework 不兼容 HTTP COOKIE 协议标准的问题跟踪-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;消费系统不能直接请求业务系统的 HTTP 接口，需要由中间的 HttpHelper 代理请求。其中 HttpHelper 接受消费系统传入的各种参数，包括要请求的 URL、METHOD、HEAD、BODY 等，在实际生产中一直运行得很好，直到如下异常的出现：&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.Net.CookieException: Cookie format error.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   at System.Net.CookieContainer.CookieCutter(Uri uri, String headerName, String setCookieHeader, Boolean isThrow)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="http" scheme="https://www.udnz.com/tags/http/"/>
    
      <category term=".net" scheme="https://www.udnz.com/tags/net/"/>
    
      <category term="Cookie" scheme="https://www.udnz.com/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>软件系统的黑匣子：我们要怎样写日志</title>
    <link href="https://www.udnz.com/2018/02/28/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%BB%91%E5%8C%A3%E5%AD%90%EF%BC%9A%E6%88%91%E4%BB%AC%E8%A6%81%E6%80%8E%E6%A0%B7%E5%86%99%E6%97%A5%E5%BF%97/"/>
    <id>https://www.udnz.com/2018/02/28/软件系统的黑匣子：我们要怎样写日志/</id>
    <published>2018-02-28T07:28:22.000Z</published>
    <updated>2018-02-28T07:28:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>作为一个软件系统，需要写日志，这是不言而喻的，这是大家都会不假思索地说“那当然”的事。不论是什么语言，写日志的专用框架也不一而足，写到文本的，写到数据库的，写到队列的，写到Redis的等等等等。对于日志的几个级别，Trace、Debug、Warning、Error、Fault，大家也能够如数家珍。但是，有多少人能够回答下面这几个问题呢？</p><p>为什么需要写日志？<br>什么时候写日志？<br>日志是写给谁看的？<br>日志里都要写什么？<br>日志的组织形式应该怎样？</p><p>接下来，我尝试一一地解答这些问题，说说我的理解。</p><a id="more"></a><h1 id="为什么需要写日志"><a href="#为什么需要写日志" class="headerlink" title="为什么需要写日志"></a>为什么需要写日志</h1><p>首先我们要树立一个观点，那就是“不是为了记录日志而记录日志，日志也不是随意记的”。要实现能够只通过日志文件还原整个程序执行的过程，达到能透明地看到程序里执行情况，每个线程每个过程到底执行到哪的目的。日志就像飞机的黑匣子一样，应当能够复原异常的整个现场乃至细节。</p><p>作为程序员，我相信吐槽写注释、写文档的段子已经见得很多了。然而在我看来，写日志的重要性完全不亚于前两者，甚至在很多时候，比前两者更为重要。</p><p>我们说“软件工程”，很多人只着眼了“软件”两个字，而忽视了“工程”。软件本身是为解决问题服务的，作为一项工程，我们不单要考虑软件本身的开发环节（注释、文档），还应当考虑软件的运营环节（日志）。世界上没有100%完美的事，不存在没有 bug 的软件系统，一旦软件上线，作为开发人员的我们，就不再能够接触到了，如果系统发生了异常，我们却又对系统运行的状态一无所知，那我们就完全没有办法解决问题。有时候重启一下应用，重启一下系统什么的，也能临时解决，但这只是掩耳盗铃，该来的还会再来，出现过的异常，还会在某一天再次出现。</p><p>这个时候对“日志”的需求便应运而生。通过日志，记录程序在运行过程中的细节，记录发生异常时的现场，我们便能像庖丁解牛一样，对运行中的应用了如指掌了。</p><h1 id="什么时候写日志"><a href="#什么时候写日志" class="headerlink" title="什么时候写日志"></a>什么时候写日志</h1><p>所谓“麻雀虽小五脏俱全”，当我们在建构一个软件系统框架时，所谓的几层结构，所谓的基础模块（通用模块、工具模块、数据访问模块……），包括写日志的模块，这些方法都是不用思考，放之四海而皆准的东西，直接搭建/拼凑起来再说。</p><p>然后呢？我想很多人就开始闷头做功能了——我是指只写功能代码，完成实际的业务逻辑。在做业务功能的时候，由于现代IDE的调试功能很强大，可以一行一行调试，看到运行状态、变量状态等等，所以此时对日志的需求和功用是极度不敏感，觉得此时可有可无。但是一旦业务功能做完了，基于各种各样的理由，工期紧啊，已经完成功能了啊，就直接转测不再继续完善了。其结果是，功能的确完成了，但是搭建的日志模块却几乎没有使用。完成了整个系统，只有不痛不痒的两三行日志，大多都是在搭建框架时写的“应用启动了”，“应用停止了”一类。后面就不用说了，都说回头补设计文档，有多少人补了？都说回头补注释，有多少人补了？既然已经转测了，既然已经上线了，就更不会再回头去写日志了。</p><p>后来，可想而知，当生产环境除了问题，由于没有日志，到底出了什么异常，就两眼一抹黑，没人能知道了。终于，临时解决了问题，意识到日志的重要性之后，急急回头翻出代码来写日志，可是当时做业务的逻辑、思考、陷阱、注意事项等等，都忘记的差不多了，写日志也就只能像看陌生代码一样，看表面，“进入了XXX方法”，“插入数据库完成”，只能写这样的日志了。而在我看来，这样的日志是不够的，这也是我最反感的写日志的方式，完全是为了写而写——也是不足以还原故障现场的，这个后续再说。</p><p>说到此可能你应该也看出来的，什么时候写日志是最佳时机呢？那就是在开发功能代码时。可以说，日志本身也是属于功能代码的一部分，只不过业务功能是给最终客户的，而日志是给运维、开发等用的。此时写日志有一个巨大的好处，那就是因为你是一边在思考，一边在开发，那么此时业务流转、可能的异常都会考虑得很完善，写日志的过程，也是反复思考和校验逻辑的过程，也就自然而然地会在日志中体现更多的关键信息。</p><h1 id="日志是写给谁看的"><a href="#日志是写给谁看的" class="headerlink" title="日志是写给谁看的"></a>日志是写给谁看的</h1><ul><li>当然是给运维了啊，运维能够第一时间看到，比如日志中写端口被占用，马上改个端口就可以了！</li><li>当然是给开发了啊，每次系统发生了异常，运维人员不是直接把日志给开发人员一丢就了事了吗？</li></ul><p>在我看来，不论是运维，还是开发，再广泛地讲，包括白盒测试，都是需要看日志的。日志对不同的人，都有不同的使用价值。运维通过日志了解到程序基本的安装、环境依赖、加载情况、运行态信息等等；开发通过日志还可以了解到程序对业务处理的信息，每个业务的流程、环节、现场状态等等；白盒测试也可以通过日志了解到程序要求的非功能特性等等。</p><h1 id="日志里都要写什么"><a href="#日志里都要写什么" class="headerlink" title="日志里都要写什么"></a>日志里都要写什么</h1><p>明确了“为什么要写日志”和“日志写给谁看的”了之后，要回答“日志里都要写什么”就容易得多了。我们需要从多个侧面来想这个问题。</p><h2 id="考虑使用者"><a href="#考虑使用者" class="headerlink" title="考虑使用者"></a>考虑使用者</h2><p>正如前文说，日志可能面向运维、面向开发等等不同身份的人群。因此日志的内容上，就要为不同的人写入其关切的入不同内容。</p><h2 id="考虑业务"><a href="#考虑业务" class="headerlink" title="考虑业务"></a>考虑业务</h2><p>这里的“业务”可能不一定是最终用户的业务，也可能是中间态的业务逻辑。当业务处理出现问题时，到底是程序的bug造成，还是错误的数据造成，或者是硬件、网络等资源的问题造成，这些都应当能够从日志中分析得出来。</p><p>一段日志，应当能够对故障现场的每一个细节都能在大脑思维里复盘。同时，日志不单单像流水账一样记录程序的运行过程，每行日志还不应该是孤立的，还应当是一个有机的整体，是有上下文的，有头有尾的。比如下面这一段日志：</p><p><img src="/images/log-example.png" alt="log-example"></p><p>日志中记录了一些关键事件以及一些关键信息。比如什么时候侦测到了新消息，有几个Handler可以去处理，每个Handler对应了哪个线程，每个线程对应在处理那种消息；有了某个处理过程的开始，就应当有对应的结束，如果涉及到多线程，还应当能够区分两行同样的日志，对应的不同线程和不同业务单据等等。而不仅仅是“侦测到消息”，“开始处理”，“处理完毕”这种简单的记录。</p><h2 id="考虑运营"><a href="#考虑运营" class="headerlink" title="考虑运营"></a>考虑运营</h2><p>对于业务，一般我们需要后续的分析和运营，日志在这方面也有起到较大作用，因此这部分日志应当考虑以结构化、规范化的方式来记录，从而方便后续对日志进行自动化分析。</p><h2 id="考虑生命周期"><a href="#考虑生命周期" class="headerlink" title="考虑生命周期"></a>考虑生命周期</h2><p>那么日志是越详细越好，记录得越多越好吗？是。也不是。</p><p>每一个软件系统都是有一定的生命周期的。刚测试上线的软件，一般最不稳定，最容易出现各种这样那样的问题，此时日志应当详细些。而长期运行了很久的软件，经过了时间、业务的大量考验，该出现的bug也已经修复得差不多了，几乎不会再出现什么问题，日志应当少一些。</p><p>怎么实现呢？很显然我们不能通过改代码，去掉写日志的代码之后重新发布来做这件事。常规地，我们通过日志分级来应对这个问题。通过不同的日志分级，以及日志输出开关，实时地调整日志输出的细节程度。因此，在我们编写输出日志的代码时，就务必要注意即将输出的日志应当是什么级别。Trace、Debug、Warning、Error、Fault，这些级别，应当对应不同重要程度、不同使用场景的细节。</p><p>考虑了以上三个方面，在开发完成之后，我们还应当切换不同的身份、角度以及配置不同的日志输出级别，来“设身处地”地审视输出的日志文件，是否能够满足要求，这样才能写一份好的日志记录。</p><h1 id="日志的组织形式应该怎样"><a href="#日志的组织形式应该怎样" class="headerlink" title="日志的组织形式应该怎样"></a>日志的组织形式应该怎样</h1><p>既然叫“日志”，那我们通常的组织形式变是以时间为顺序来组织的一系列文件。除此之外，还可以将日志写入数据库、外部分析系统等等。</p><p>考虑“Separation of Concerns”，日志的组织形式，也可以根据上文考虑的不同方面来组织，比如将Error及以上的日志冗余独立记录，将面向运维的启停、加载信息独立记录，将软件运行日志和业务处理日志分开记录等等。关键是“Concern”，编写记录日志的代码时，我们应该对这段代码的功能、重要性、在整个系统的角色有深刻的认知，从而才能以不同的“关切”来考虑日志应该怎么输出，怎么组织。</p><h1 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h1><p>当然，根据软件系统的不同，其日志的侧重点也可能不同。但总体来说，日志就如同飞机的黑匣子一样重要，我们应当重视日志输出的编写工作，而绝非仅仅是完成核心业务代码的编写。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;作为一个软件系统，需要写日志，这是不言而喻的，这是大家都会不假思索地说“那当然”的事。不论是什么语言，写日志的专用框架也不一而足，写到文本的，写到数据库的，写到队列的，写到Redis的等等等等。对于日志的几个级别，Trace、Debug、Warning、Error、Fault，大家也能够如数家珍。但是，有多少人能够回答下面这几个问题呢？&lt;/p&gt;
&lt;p&gt;为什么需要写日志？&lt;br&gt;什么时候写日志？&lt;br&gt;日志是写给谁看的？&lt;br&gt;日志里都要写什么？&lt;br&gt;日志的组织形式应该怎样？&lt;/p&gt;
&lt;p&gt;接下来，我尝试一一地解答这些问题，说说我的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="https://www.udnz.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>创建 VS 2017 的离线安装包</title>
    <link href="https://www.udnz.com/2017/11/15/%E5%88%9B%E5%BB%BA-VS-2017-%E7%9A%84%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>https://www.udnz.com/2017/11/15/创建-VS-2017-的离线安装包/</id>
    <published>2017-11-15T08:03:02.000Z</published>
    <updated>2017-11-15T08:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下以 VS 的编译工具包为例，实际上 VS IDE 本身也可以如此进行。</p><h1 id="一、下载在线安装文件"><a href="#一、下载在线安装文件" class="headerlink" title="一、下载在线安装文件"></a>一、下载在线安装文件</h1><ol><li>进入下载页：<a href="https://www.visualstudio.com/zh-hans/downloads/" target="_blank" rel="noopener">https://www.visualstudio.com/zh-hans/downloads/</a></li><li>选择最底部的 <code>Other Tools and Frameworks</code> -&gt; <code>Visual Studio 2017</code> 生成工具 并下载。</li><li>以管理员身份运行刚刚下载的在线安装文件，注意带参数：<code>--layout &quot;F:\software\VS2017 BuildTool\Offline&quot; --lang zh-CN</code></li></ol><p><img src="/images/创建 VS 2017 的离线安装包-1.png" alt=""></p><p>此时将开始下载安装所需文件：（如果断电断网或者关闭了下载窗口，没关系，输入命令重头来过，还是会继续下载的）</p><p><img src="/images/创建 VS 2017 的离线安装包-2.png" alt=""></p><a id="more"></a><h1 id="二、离线安装"><a href="#二、离线安装" class="headerlink" title="二、离线安装"></a>二、离线安装</h1><ol><li><p>打开刚刚存放离线文件的路径，然后找到certificates文件夹并打开，依次安装该文件夹下的软件证书。</p></li><li><p>运行离线根目录下的安装程序，各版本位置如下：</p><ul><li>企业版：离线文件存储文件夹\vs_Enterprise.exe</li><li>专业版：离线文件存储文件夹\vs_Professional.exe</li><li>社区版：离线文件存储文件夹\vs_Community.exe</li></ul></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/install/create-an-offline-installation-of-visual-studio" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/visualstudio/install/create-an-offline-installation-of-visual-studio</a></p><p><a href="https://www.ithome.com/html/win10/297093.htm" target="_blank" rel="noopener">https://www.ithome.com/html/win10/297093.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下以 VS 的编译工具包为例，实际上 VS IDE 本身也可以如此进行。&lt;/p&gt;
&lt;h1 id=&quot;一、下载在线安装文件&quot;&gt;&lt;a href=&quot;#一、下载在线安装文件&quot; class=&quot;headerlink&quot; title=&quot;一、下载在线安装文件&quot;&gt;&lt;/a&gt;一、下载在线安装文件&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;进入下载页：&lt;a href=&quot;https://www.visualstudio.com/zh-hans/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.visualstudio.com/zh-hans/downloads/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;选择最底部的 &lt;code&gt;Other Tools and Frameworks&lt;/code&gt; -&amp;gt; &lt;code&gt;Visual Studio 2017&lt;/code&gt; 生成工具 并下载。&lt;/li&gt;
&lt;li&gt;以管理员身份运行刚刚下载的在线安装文件，注意带参数：&lt;code&gt;--layout &amp;quot;F:\software\VS2017 BuildTool\Offline&amp;quot; --lang zh-CN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/创建 VS 2017 的离线安装包-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时将开始下载安装所需文件：（如果断电断网或者关闭了下载窗口，没关系，输入命令重头来过，还是会继续下载的）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/创建 VS 2017 的离线安装包-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://www.udnz.com/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>什么是写程序的快感？</title>
    <link href="https://www.udnz.com/2017/04/21/%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%99%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BF%AB%E6%84%9F%EF%BC%9F/"/>
    <id>https://www.udnz.com/2017/04/21/什么是写程序的快感？/</id>
    <published>2017-04-21T05:25:28.000Z</published>
    <updated>2017-04-21T05:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>初中时，在电视里看office学习节目，对电脑无比神往。高二时，第一次开电脑上机课，两个人一台机学开机关机等基本操作，激动得大腿肌肉颤抖，在凳子上坐不住，坐两分钟蹲几分钟马步，实在会发抖，过了十几分钟才坐的住。这就是快感。</p><p>大学时，左边放着个水杯，码一阵代码后开启调试的间歇喝一口水，结果杯里的水喝完了，举着空杯喝一口空气。杯子放下继续码代码，直到第二次…第N次举着空水杯喝空气之后，仍然没有去把杯子续上，然而续水很远吗？不，水壶就在右手边。这就是快感。</p><p>临毕业，自己写一个博客程序，生生推倒重写3次，每一次都是质变。期间一个结构设计问题思考酝酿了很久，最终是半夜做梦突然来了灵感醒来，兴奋的再也睡不着了，马上一个激灵起来实现。整个博客程序完成之后无意看到了head first设计模式，各种我操我操的感叹，尼玛怎么跟我想的一样？这就是快感。</p><a id="more"></a><p>毕业后，特别是做自己的练手项目，无论白天黑夜，总跟自己说，这个问题5分钟就能解决，然而第N个5分钟过去了，需求已经早扩大得无边无际了，还在继续，直到天亮仍然放不下。这就是快感。</p><p>这个清明节，做了两个 visual studio 插件，三天假两天都是凌晨5点睡觉的。刚刚才收到无警告报告（手上的项目每几个小时会上报运营报告，凌晨2点是个check point），一抬头，天就亮了。这就是快感。</p><p>非计算机专业，纯自学一路走来，唯有这快感激励我走到今天，提供我码每一行代码的动力。这么多年来，很多朋友、同事接私单业余做也收益可观，但我只做过两个帮忙性质的单子，是的，十年只两个。摸着良心说，挣钱还真不是我码代码的第一原因——虽然做过的小产品已经很多了，但从来都没有转化为经济。我还买不起房，并不是来体验生活的富二代。</p><p>这种示例还很多…五指朝上地说，没有半句虚言。</p><p>快感，就是着了魔。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初中时，在电视里看office学习节目，对电脑无比神往。高二时，第一次开电脑上机课，两个人一台机学开机关机等基本操作，激动得大腿肌肉颤抖，在凳子上坐不住，坐两分钟蹲几分钟马步，实在会发抖，过了十几分钟才坐的住。这就是快感。&lt;/p&gt;
&lt;p&gt;大学时，左边放着个水杯，码一阵代码后开启调试的间歇喝一口水，结果杯里的水喝完了，举着空杯喝一口空气。杯子放下继续码代码，直到第二次…第N次举着空水杯喝空气之后，仍然没有去把杯子续上，然而续水很远吗？不，水壶就在右手边。这就是快感。&lt;/p&gt;
&lt;p&gt;临毕业，自己写一个博客程序，生生推倒重写3次，每一次都是质变。期间一个结构设计问题思考酝酿了很久，最终是半夜做梦突然来了灵感醒来，兴奋的再也睡不着了，马上一个激灵起来实现。整个博客程序完成之后无意看到了head first设计模式，各种我操我操的感叹，尼玛怎么跟我想的一样？这就是快感。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="https://www.udnz.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>后端视角的高性能、高可用设计概要</title>
    <link href="https://www.udnz.com/2017/03/23/%E5%90%8E%E7%AB%AF%E8%A7%86%E8%A7%92%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%81%E9%AB%98%E5%8F%AF%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%A6%81/"/>
    <id>https://www.udnz.com/2017/03/23/后端视角的高性能、高可用设计概要/</id>
    <published>2017-03-23T02:31:28.000Z</published>
    <updated>2017-03-23T02:31:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h1><h2 id="业务方面"><a href="#业务方面" class="headerlink" title="业务方面"></a>业务方面</h2><ul><li>将同步业务转化为异步业务</li><li>业务分级，柔性可用</li><li>减少不必要的数据库请求</li><li>业务解耦，降低关联性</li></ul><h2 id="应用方面"><a href="#应用方面" class="headerlink" title="应用方面"></a>应用方面</h2><ul><li>前端高性能设计（略）</li><li>使用缓存：多级缓存、分布式缓存</li><li>预加载、懒加载、延迟初始化</li><li>尽量减小交互接口数据包大小</li><li>尽量减少序列化、对象克隆</li><li>尽量减少跨进程、跨机器、跨网络访问</li><li>尽量减少在同步业务中使用事务</li><li>尽量减少锁的使用<ul><li>使用乐观锁</li><li>尽量缩小锁的范围</li><li>尽量将低性能逻辑放到锁的范围之外</li></ul></li><li>使用异步逻辑</li><li>队列削峰，先接受，后处理</li><li>尽量复用<ul><li>线程：线程池</li><li>连接：长连接、连接池</li></ul></li></ul><a id="more"></a><h2 id="数据库方面"><a href="#数据库方面" class="headerlink" title="数据库方面"></a>数据库方面</h2><ul><li>数据库读写分离</li><li>优化 SQL 语句、表结构、索引等</li></ul><h2 id="硬件及部署方面"><a href="#硬件及部署方面" class="headerlink" title="硬件及部署方面"></a>硬件及部署方面</h2><ul><li>负载均衡</li><li>分离应用服务器和数据库服务器</li></ul><h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><h2 id="业务方面-1"><a href="#业务方面-1" class="headerlink" title="业务方面"></a>业务方面</h2><ul><li>快速拒绝：尽早拒绝不符合策略的请求</li><li>灰度推广、灰度上线：按部门、分时段</li><li>服务分级，柔性可用</li></ul><h2 id="应用方面-1"><a href="#应用方面-1" class="headerlink" title="应用方面"></a>应用方面</h2><ul><li>自动重试机制<ul><li>单点重试</li><li>多点重试</li></ul></li><li>超时机制</li><li>幂等设计</li><li>无状态设计</li><li>容错机制<ul><li>登录时，创建 Staff 抛出“该员工不存在”</li><li></li></ul></li><li>提高编码质量，减少异常</li><li>完善的测试准出<ul><li>功能</li><li>性能</li></ul></li></ul><h2 id="运维方面"><a href="#运维方面" class="headerlink" title="运维方面"></a>运维方面</h2><ul><li>状态报告及预警<ul><li>KeepAlive</li></ul></li><li>资源报告及预警<ul><li>CPU、内存、硬盘、IO</li></ul></li><li>业务报告及预警<ul><li>QPS、TPS、SQL查询</li><li>PV、UV</li></ul></li><li>日志</li></ul><h2 id="硬件及部署方面-1"><a href="#硬件及部署方面-1" class="headerlink" title="硬件及部署方面"></a>硬件及部署方面</h2><ul><li>核心业务与非核心业务分开部署</li><li>负载均衡、双机热备、主备</li><li>异地多活</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>先思考，后动手。多思考，少蛮干。</li><li>严格要求自己，将出手的产品当做孩子一样对待</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高性能&quot;&gt;&lt;a href=&quot;#高性能&quot; class=&quot;headerlink&quot; title=&quot;高性能&quot;&gt;&lt;/a&gt;高性能&lt;/h1&gt;&lt;h2 id=&quot;业务方面&quot;&gt;&lt;a href=&quot;#业务方面&quot; class=&quot;headerlink&quot; title=&quot;业务方面&quot;&gt;&lt;/a&gt;业务方面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将同步业务转化为异步业务&lt;/li&gt;
&lt;li&gt;业务分级，柔性可用&lt;/li&gt;
&lt;li&gt;减少不必要的数据库请求&lt;/li&gt;
&lt;li&gt;业务解耦，降低关联性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;应用方面&quot;&gt;&lt;a href=&quot;#应用方面&quot; class=&quot;headerlink&quot; title=&quot;应用方面&quot;&gt;&lt;/a&gt;应用方面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前端高性能设计（略）&lt;/li&gt;
&lt;li&gt;使用缓存：多级缓存、分布式缓存&lt;/li&gt;
&lt;li&gt;预加载、懒加载、延迟初始化&lt;/li&gt;
&lt;li&gt;尽量减小交互接口数据包大小&lt;/li&gt;
&lt;li&gt;尽量减少序列化、对象克隆&lt;/li&gt;
&lt;li&gt;尽量减少跨进程、跨机器、跨网络访问&lt;/li&gt;
&lt;li&gt;尽量减少在同步业务中使用事务&lt;/li&gt;
&lt;li&gt;尽量减少锁的使用&lt;ul&gt;
&lt;li&gt;使用乐观锁&lt;/li&gt;
&lt;li&gt;尽量缩小锁的范围&lt;/li&gt;
&lt;li&gt;尽量将低性能逻辑放到锁的范围之外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用异步逻辑&lt;/li&gt;
&lt;li&gt;队列削峰，先接受，后处理&lt;/li&gt;
&lt;li&gt;尽量复用&lt;ul&gt;
&lt;li&gt;线程：线程池&lt;/li&gt;
&lt;li&gt;连接：长连接、连接池&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Architecture" scheme="https://www.udnz.com/tags/Architecture/"/>
    
      <category term="高可用" scheme="https://www.udnz.com/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="高性能" scheme="https://www.udnz.com/tags/%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
</feed>
